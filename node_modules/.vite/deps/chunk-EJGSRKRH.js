import {
  useControllable
} from "./chunk-UDNZX2WJ.js";
import {
  AppLayoutContext
} from "./chunk-KGTDQHUA.js";
import {
  RuntimeContentWrapper,
  awsuiPluginsInternal,
  sortByPriority
} from "./chunk-ZPYXPLK6.js";
import {
  useContainerQuery
} from "./chunk-BQ3I4KFU.js";
import {
  DynamicOverlapContext,
  getContentHeaderClassName,
  getGlobalFlag,
  shouldRemoveHighContrastHeader
} from "./chunk-IRDBMKXJ.js";
import {
  internal_default as internal_default2
} from "./chunk-6UFT4YRR.js";
import {
  Transition
} from "./chunk-SJ7LIZY2.js";
import {
  custom_css_properties_default,
  useMobile
} from "./chunk-4K34KLGB.js";
import {
  useInternalI18n
} from "./chunk-VCW6C342.js";
import {
  InternalButton
} from "./chunk-DPGYCRGF.js";
import {
  fireNonCancelableEvent
} from "./chunk-T3BYYNEM.js";
import {
  findUpUntil
} from "./chunk-37SB7DJX.js";
import {
  useUniqueId
} from "./chunk-3TE4OIE4.js";
import {
  isDevelopment
} from "./chunk-TIE5RIC4.js";
import {
  internal_default
} from "./chunk-NUCDU4ZC.js";
import {
  KeyCode,
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent,
  useDensityMode,
  useResizeObserver,
  useStableCallback,
  useVisualRefresh,
  warnOnce
} from "./chunk-CHBULPAM.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/app-layout/index.js
var import_react39 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/widget.js
var import_react38 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/implementation.js
var import_react37 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/classic.js
var import_react20 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/defaults.js
var defaultContentTypeState = {
  navigationOpen: true,
  minContentWidth: 280,
  maxContentWidth: void 0
};
var defaults = {
  default: Object.assign({}, defaultContentTypeState),
  dashboard: Object.assign({}, defaultContentTypeState),
  cards: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  form: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 800
  },
  table: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  wizard: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 1080
  }
};
function applyDefaults(contentType, stateFromProps, isRefresh) {
  var _a, _b, _c, _d;
  const contentTypeDefaults = isRefresh ? Object.assign(Object.assign({}, defaults[contentType]), { maxContentWidth: void 0 }) : defaults[contentType];
  return {
    maxContentWidth: (_a = stateFromProps.maxContentWidth) !== null && _a !== void 0 ? _a : contentTypeDefaults.maxContentWidth,
    minContentWidth: (_b = stateFromProps.minContentWidth) !== null && _b !== void 0 ? _b : contentTypeDefaults.minContentWidth,
    navigationOpen: (_c = stateFromProps.navigationOpen) !== null && _c !== void 0 ? _c : contentTypeDefaults.navigationOpen,
    toolsOpen: (_d = stateFromProps.toolsOpen) !== null && _d !== void 0 ? _d : contentTypeDefaults.toolsOpen
  };
}

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/notifications/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/notifications/styles.scoped.css";
var styles_css_default = {
  "notifications": "awsui_notifications_1hmm4_1d89k_9",
  "notifications-sticky": "awsui_notifications-sticky_1hmm4_1d89k_10",
  "no-content-paddings": "awsui_no-content-paddings_1hmm4_1d89k_25"
};

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var Notifications = import_react.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { sticky, disableContentPaddings } = _a, props = __rest(_a, ["sticky", "disableContentPaddings"]);
  return sticky ? import_react.default.createElement(
    "div",
    { ref, className: styles_css_default["notifications-sticky"], style: { top: props.topOffset } },
    import_react.default.createElement("div", { role: "region", className: clsx_m_default(props.testUtilsClassName, disableContentPaddings && styles_css_default["no-content-paddings"]), "aria-label": (_b = props.labels) === null || _b === void 0 ? void 0 : _b.notifications }, props.children)
  ) : import_react.default.createElement("div", { role: "region", ref, className: clsx_m_default(props.testUtilsClassName, styles_css_default.notifications, disableContentPaddings && styles_css_default["no-content-paddings"]), "aria-label": (_c = props.labels) === null || _c === void 0 ? void 0 : _c.notifications }, props.children);
});

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/toggles/styles.scoped.css";
var styles_css_default2 = {
  "toggle-button": "awsui_toggle-button_16w0h_1lkgf_99",
  "close-button": "awsui_close-button_16w0h_1lkgf_134"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var togglesConfig = {
  navigation: {
    TagName: "nav",
    iconName: "menu",
    getLabels: (labels = {}) => ({
      mainLabel: labels.navigation,
      openLabel: labels.navigationToggle,
      closeLabel: labels.navigationClose
    })
  },
  tools: {
    TagName: "aside",
    iconName: "status-info",
    getLabels: (labels = {}) => ({
      mainLabel: labels.tools,
      openLabel: labels.toolsToggle,
      closeLabel: labels.toolsClose
    })
  }
};
var ToggleButton = import_react2.default.forwardRef(({ className, ariaLabel, ariaExpanded, ariaControls, iconName, iconSvg, disabled, testId, onClick, badge }, ref) => {
  return import_react2.default.createElement(
    "button",
    { ref, className: clsx_m_default(className, styles_css_default2["toggle-button"]), "aria-label": ariaLabel, type: "button", onClick, disabled, "aria-expanded": ariaExpanded, "aria-haspopup": ariaExpanded ? void 0 : true, "aria-controls": ariaControls, "data-testid": testId },
    import_react2.default.createElement(internal_default, { svg: iconSvg, name: iconName, badge })
  );
});
var CloseButton = import_react2.default.forwardRef(({ className, ariaLabel, onClick }, ref) => {
  return import_react2.default.createElement(
    "span",
    { className: styles_css_default2["close-button"] },
    import_react2.default.createElement(InternalButton, { ref, className, ariaLabel, variant: "icon", formAction: "none", iconName: "close", onClick })
  );
});

// node_modules/@cloudscape-design/components/app-layout/drawer/overflow-menu.js
var import_react3 = __toESM(require_react());
function OverflowMenu({ items, onItemClick, customTriggerBuilder, ariaLabel }) {
  return import_react3.default.createElement(internal_default2, { items: items.map((item) => ({
    id: item.id,
    text: item.ariaLabels.drawerName,
    iconName: item.trigger.iconName,
    iconSvg: item.trigger.iconSvg,
    badge: item.badge
  })), onItemClick, ariaLabel, variant: "icon", customTriggerBuilder, expandToViewport: true });
}

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.scoped.css";
var styles_css_default3 = {
  "block-body-scroll": "awsui_block-body-scroll_19d8l_c90gb_103",
  "mobile-bar": "awsui_mobile-bar_19d8l_c90gb_107",
  "mobile-bar-breadcrumbs": "awsui_mobile-bar-breadcrumbs_19d8l_c90gb_120",
  "mobile-toggle": "awsui_mobile-toggle_19d8l_c90gb_127",
  "mobile-toggle-type-navigation": "awsui_mobile-toggle-type-navigation_19d8l_c90gb_136",
  "mobile-toggle-type-tools": "awsui_mobile-toggle-type-tools_19d8l_c90gb_139",
  "mobile-toggle-type-drawer": "awsui_mobile-toggle-type-drawer_19d8l_c90gb_139",
  "drawers-container": "awsui_drawers-container_19d8l_c90gb_146"
};

// node_modules/@cloudscape-design/components/app-layout/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/styles.scoped.css";
var styles_css_default4 = {
  "resize-active": "awsui_resize-active_lm6vo_1lt83_104",
  "resize-side": "awsui_resize-side_lm6vo_1lt83_110",
  "resize-bottom": "awsui_resize-bottom_lm6vo_1lt83_113",
  "with-motion": "awsui_with-motion_lm6vo_1lt83_118",
  "root": "awsui_root_lm6vo_1lt83_133",
  "root-no-scroll": "awsui_root-no-scroll_lm6vo_1lt83_140",
  "layout": "awsui_layout_lm6vo_1lt83_145",
  "layout-no-scroll": "awsui_layout-no-scroll_lm6vo_1lt83_151",
  "layout-main": "awsui_layout-main_lm6vo_1lt83_155",
  "layout-main-scrollable": "awsui_layout-main-scrollable_lm6vo_1lt83_161",
  "unfocusable": "awsui_unfocusable_lm6vo_1lt83_166",
  "breadcrumbs-desktop": "awsui_breadcrumbs-desktop_lm6vo_1lt83_170",
  "content-header-wrapper": "awsui_content-header-wrapper_lm6vo_1lt83_175",
  "content-wrapper": "awsui_content-wrapper_lm6vo_1lt83_179",
  "content-overlapped": "awsui_content-overlapped_lm6vo_1lt83_183",
  "content-extra-top-padding": "awsui_content-extra-top-padding_lm6vo_1lt83_187"
};

// node_modules/@cloudscape-design/components/app-layout/test-classes/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/test-classes/styles.scoped.css";
var styles_css_default5 = {
  "root": "awsui_root_1fj9k_1uvk8_5",
  "navigation": "awsui_navigation_1fj9k_1uvk8_9",
  "navigation-toggle": "awsui_navigation-toggle_1fj9k_1uvk8_13",
  "navigation-close": "awsui_navigation-close_1fj9k_1uvk8_17",
  "content": "awsui_content_1fj9k_1uvk8_21",
  "notifications": "awsui_notifications_1fj9k_1uvk8_25",
  "breadcrumbs": "awsui_breadcrumbs_1fj9k_1uvk8_29",
  "tools": "awsui_tools_1fj9k_1uvk8_33",
  "tools-close": "awsui_tools-close_1fj9k_1uvk8_37",
  "tools-toggle": "awsui_tools-toggle_1fj9k_1uvk8_41",
  "drawer-closed": "awsui_drawer-closed_1fj9k_1uvk8_45",
  "mobile-bar": "awsui_mobile-bar_1fj9k_1uvk8_49",
  "disable-body-scroll-root": "awsui_disable-body-scroll-root_1fj9k_1uvk8_53",
  "drawers-trigger": "awsui_drawers-trigger_1fj9k_1uvk8_57",
  "active-drawer": "awsui_active-drawer_1fj9k_1uvk8_61",
  "active-drawer-close-button": "awsui_active-drawer-close-button_1fj9k_1uvk8_65",
  "drawers-slider": "awsui_drawers-slider_1fj9k_1uvk8_69"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/drawers-helpers.js
function splitItems(maybeItems, splitIndex, activeId) {
  const items = maybeItems !== null && maybeItems !== void 0 ? maybeItems : [];
  const visibleItems = items.slice(0, splitIndex);
  const overflowItems = items.slice(splitIndex);
  if (overflowItems.length === 1) {
    return { visibleItems: items, overflowItems: [] };
  }
  if (activeId && overflowItems.length > 0 && visibleItems.length > 0) {
    const activeInOverflow = overflowItems.find((item) => item.id === activeId);
    if (activeInOverflow) {
      overflowItems.splice(overflowItems.indexOf(activeInOverflow), 1);
      overflowItems.unshift(visibleItems.pop());
      visibleItems.push(activeInOverflow);
    }
  }
  return { visibleItems, overflowItems };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/runtime-api.js
var import_react4 = __toESM(require_react());
function convertRuntimeDrawers(drawers) {
  const converted = drawers.map((_a) => {
    var _b;
    var { mountContent, unmountContent, trigger } = _a, runtimeDrawer = __rest(_a, ["mountContent", "unmountContent", "trigger"]);
    return Object.assign(Object.assign({}, runtimeDrawer), { ariaLabels: Object.assign({ drawerName: (_b = runtimeDrawer.ariaLabels.content) !== null && _b !== void 0 ? _b : "" }, runtimeDrawer.ariaLabels), trigger: {
      iconSvg: (
        // eslint-disable-next-line react/no-danger
        import_react4.default.createElement("span", { dangerouslySetInnerHTML: { __html: trigger.iconSvg } })
      )
    }, content: import_react4.default.createElement(RuntimeContentWrapper, { key: runtimeDrawer.id, mountContent, unmountContent }), onResize: (event) => {
      fireNonCancelableEvent(runtimeDrawer.onResize, { size: event.detail.size, id: runtimeDrawer.id });
    } });
  });
  const sorted = sortByPriority(converted);
  return {
    before: sorted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) > 0;
    }),
    after: sorted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) <= 0;
    })
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var TOOLS_DRAWER_ID = "awsui-internal-tools";
function getToolsDrawerItem(props) {
  if (props.toolsHide) {
    return null;
  }
  const { iconName, getLabels } = togglesConfig.tools;
  const { mainLabel, closeLabel, openLabel } = getLabels(props.ariaLabels);
  return {
    id: TOOLS_DRAWER_ID,
    content: props.tools,
    resizable: false,
    ariaLabels: {
      triggerButton: openLabel,
      closeButton: closeLabel,
      drawerName: mainLabel !== null && mainLabel !== void 0 ? mainLabel : ""
    },
    trigger: {
      iconName
    }
  };
}
function useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange) {
  const [runtimeDrawers, setRuntimeDrawers] = (0, import_react5.useState)({ before: [], after: [] });
  const onActiveDrawerChangeStable = useStableCallback(onActiveDrawerChange);
  const drawerWasOpenRef = (0, import_react5.useRef)(false);
  drawerWasOpenRef.current = drawerWasOpenRef.current || !!activeDrawerId;
  (0, import_react5.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered((drawers) => {
      setRuntimeDrawers(convertRuntimeDrawers(drawers));
      if (!drawerWasOpenRef.current) {
        const defaultActiveDrawer = sortByPriority(drawers).find((drawer) => drawer.defaultActive);
        if (defaultActiveDrawer) {
          onActiveDrawerChangeStable(defaultActiveDrawer.id);
        }
      }
    });
    return () => {
      unsubscribe();
      setRuntimeDrawers({ before: [], after: [] });
    };
  }, [disableRuntimeDrawers, onActiveDrawerChangeStable]);
  return runtimeDrawers;
}
function applyToolsDrawer(toolsProps, runtimeDrawers) {
  const drawers = [...runtimeDrawers.before, ...runtimeDrawers.after];
  if (drawers.length === 0) {
    return null;
  }
  const toolsItem = getToolsDrawerItem(toolsProps);
  if (toolsItem) {
    drawers.unshift(toolsItem);
  }
  return drawers;
}
function useDrawers({ drawers, activeDrawerId: controlledActiveDrawerId, onDrawerChange, __disableRuntimeDrawers: disableRuntimeDrawers }, ariaLabels, toolsProps) {
  var _a, _b, _c, _d;
  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {
    componentName: "AppLayout",
    controlledProp: "activeDrawerId",
    changeHandler: "onChange"
  });
  const [drawerSizes, setDrawerSizes] = (0, import_react5.useState)({});
  function onActiveDrawerResize({ id, size }) {
    setDrawerSizes((oldSizes) => Object.assign(Object.assign({}, oldSizes), { [id]: size }));
    fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onResize, { id, size });
  }
  function onActiveDrawerChange(newDrawerId) {
    setActiveDrawerId(newDrawerId);
    if (hasOwnDrawers) {
      fireNonCancelableEvent(onDrawerChange, { activeDrawerId: newDrawerId });
    } else if (!toolsProps.toolsHide) {
      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);
    }
  }
  const hasOwnDrawers = !!drawers;
  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange);
  const combinedDrawers = drawers ? [...runtimeDrawers.before, ...drawers, ...runtimeDrawers.after] : applyToolsDrawer(toolsProps, runtimeDrawers);
  let activeDrawerIdResolved = (toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId;
  const activeDrawer = combinedDrawers === null || combinedDrawers === void 0 ? void 0 : combinedDrawers.find((drawer) => drawer.id === activeDrawerIdResolved);
  activeDrawerIdResolved = (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _a !== void 0 ? _a : null;
  const activeDrawerSize = activeDrawerIdResolved ? (_c = (_b = drawerSizes[activeDrawerIdResolved]) !== null && _b !== void 0 ? _b : activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _c !== void 0 ? _c : toolsProps.toolsWidth : toolsProps.toolsWidth;
  const minDrawerSize = Math.min((_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _d !== void 0 ? _d : 290, 290);
  return {
    ariaLabelsWithDrawers: ariaLabels,
    drawers: combinedDrawers || void 0,
    activeDrawer,
    activeDrawerId: activeDrawerIdResolved,
    activeDrawerSize,
    minDrawerSize,
    onActiveDrawerChange,
    onActiveDrawerResize
  };
}

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var MobileToggle = import_react6.default.forwardRef(({ className, ariaLabels, type, disabled, onClick }, ref) => {
  const { TagName, iconName, getLabels } = togglesConfig[type];
  const { mainLabel, openLabel } = getLabels(ariaLabels);
  return import_react6.default.createElement(
    TagName,
    { className: clsx_m_default(styles_css_default3["mobile-toggle"], styles_css_default3[`mobile-toggle-type-${type}`]), "aria-hidden": disabled, "aria-label": mainLabel, onClick: (e) => e.target === e.currentTarget && onClick() },
    import_react6.default.createElement(ToggleButton, { ref, className, iconName, onClick, ariaLabel: openLabel, disabled, ariaExpanded: disabled })
  );
});
function MobileToolbar({ ariaLabels, toggleRefs, topOffset, navigationHide, toolsHide, anyPanelOpen, unfocusable, drawers, activeDrawerId, children, onNavigationOpen, onToolsOpen, onDrawerChange, mobileBarRef }) {
  (0, import_react6.useEffect)(() => {
    if (anyPanelOpen) {
      document.body.classList.add(styles_css_default3["block-body-scroll"]);
      return () => {
        document.body.classList.remove(styles_css_default3["block-body-scroll"]);
      };
    } else {
      document.body.classList.remove(styles_css_default3["block-body-scroll"]);
    }
  }, [anyPanelOpen]);
  const { overflowItems, visibleItems } = splitItems(drawers, 2, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react6.default.createElement(
    "div",
    { ref: mobileBarRef, className: clsx_m_default(styles_css_default3["mobile-bar"], styles_css_default5["mobile-bar"], unfocusable && styles_css_default4.unfocusable), style: { top: topOffset } },
    !navigationHide && import_react6.default.createElement(MobileToggle, { ref: toggleRefs.navigation, type: "navigation", className: styles_css_default5["navigation-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onNavigationOpen }),
    import_react6.default.createElement("div", { className: styles_css_default3["mobile-bar-breadcrumbs"] }, children && import_react6.default.createElement("div", { className: styles_css_default5.breadcrumbs }, children)),
    !toolsHide && !drawers && import_react6.default.createElement(MobileToggle, { ref: toggleRefs.tools, type: "tools", className: styles_css_default5["tools-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onToolsOpen }),
    drawers && import_react6.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react6.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default3["drawers-container"]), role: "toolbar", "aria-orientation": "horizontal" },
        visibleItems.map((item, index) => {
          var _a;
          return import_react6.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default3["mobile-toggle"], styles_css_default3["mobile-toggle-type-drawer"]), key: index, onClick: () => onDrawerChange(item.id) },
            import_react6.default.createElement(ToggleButton, { className: clsx_m_default(styles_css_default5["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default5["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, badge: item.badge, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: activeDrawerId === item.id, testId: `awsui-app-layout-trigger-${item.id}` })
          );
        }),
        overflowItems.length > 0 && import_react6.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default3["mobile-toggle"], styles_css_default3["mobile-toggle-type-drawer"]) },
          import_react6.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-focus-control.js
var import_react7 = __toESM(require_react());
function useFocusControl(isOpen, restoreFocus = false, activeDrawerId) {
  const refs = {
    toggle: (0, import_react7.useRef)(null),
    close: (0, import_react7.useRef)(null),
    slider: (0, import_react7.useRef)(null)
  };
  const previousFocusedElement = (0, import_react7.useRef)();
  const shouldFocus = (0, import_react7.useRef)(false);
  const doFocus = () => {
    var _a, _b, _c;
    if (!shouldFocus.current) {
      return;
    }
    if (isOpen) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      if (refs.slider.current) {
        (_a = refs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();
      } else {
        (_b = refs.close.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
      }
    }
    shouldFocus.current = false;
  };
  const setFocus = (force) => {
    shouldFocus.current = true;
    if (force && isOpen) {
      doFocus();
    }
  };
  (0, import_react7.useEffect)(doFocus, [isOpen, activeDrawerId]);
  const loseFocus = (0, import_react7.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  return {
    refs,
    setFocus,
    loseFocus
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-content-height.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-observed-element.js
var import_react8 = __toESM(require_react());
function useObservedElement(selector) {
  const getElement = (0, import_react8.useCallback)(() => {
    return document.querySelector(selector);
  }, [selector]);
  const [height, setHeight] = (0, import_react8.useState)(0);
  useResizeObserver(getElement, (entry) => setHeight(entry.borderBoxHeight));
  return height;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-content-height.js
function useContentHeight(headerSelector, footerSelector, disableBodyScroll) {
  const headerHeight = useObservedElement(headerSelector);
  const footerHeight = useObservedElement(footerSelector);
  const [headerFooterHeight, setHeaderFooterHeight] = (0, import_react9.useState)(0);
  (0, import_react9.useEffect)(() => {
    const id = requestAnimationFrame(() => setHeaderFooterHeight(headerHeight + footerHeight));
    return () => cancelAnimationFrame(id);
  }, [headerHeight, footerHeight]);
  const heightStyleValue = `calc(100vh - ${headerFooterHeight}px)`;
  return {
    headerHeight,
    footerHeight,
    contentHeightStyle: {
      [disableBodyScroll ? "height" : "minHeight"]: heightStyleValue
    }
  };
}

// node_modules/@cloudscape-design/components/split-panel/utils/size-utils.js
var CONSTRAINED_PAGE_HEIGHT = 400;
var MAIN_PANEL_MIN_HEIGHT = 250;
var CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;
function getSplitPanelDefaultSize(position) {
  if (typeof document === "undefined") {
    return 0;
  }
  return position === "side" ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;
}
function getLimitedValue(min, value, max) {
  if (min > max) {
    return min;
  }
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.scoped.css";
var styles_css_default6 = {
  "content-wrapper": "awsui_content-wrapper_zycdx_1ocfz_103",
  "content-wrapper-mobile": "awsui_content-wrapper-mobile_zycdx_1ocfz_107",
  "content-type-dashboard": "awsui_content-type-dashboard_zycdx_1ocfz_112"
};

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var ContentWrapper = import_react10.default.forwardRef(({ className, contentType, children, toolsPadding, disablePaddings, navigationPadding, isMobile, contentWidthStyles }, ref) => {
  if (disablePaddings) {
    return import_react10.default.createElement("div", { className, ref }, children);
  }
  return import_react10.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default6["content-wrapper"], !navigationPadding && styles_css_default6["content-wrapper-no-navigation-padding"], !toolsPadding && styles_css_default6["content-wrapper-no-tools-padding"], isMobile && styles_css_default6["content-wrapper-mobile"]) },
    import_react10.default.createElement("div", { style: contentWidthStyles, className: clsx_m_default(className, styles_css_default6[`content-type-${contentType}`]) }, children)
  );
});
var content_wrapper_default = ContentWrapper;

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/drawer/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/drawer/styles.scoped.css";
var styles_css_default7 = {
  "toggle": "awsui_toggle_1uo6m_1740t_103",
  "drawer-triggers": "awsui_drawer-triggers_1uo6m_1740t_109",
  "drawer": "awsui_drawer_1uo6m_1740t_109",
  "drawer-mobile": "awsui_drawer-mobile_1uo6m_1740t_119",
  "drawer-closed": "awsui_drawer-closed_1uo6m_1740t_122",
  "drawer-content": "awsui_drawer-content_1uo6m_1740t_129",
  "drawer-content-clickable": "awsui_drawer-content-clickable_1uo6m_1740t_141",
  "drawer-resize-content": "awsui_drawer-resize-content_1uo6m_1740t_151",
  "drawer-triggers-wrapper": "awsui_drawer-triggers-wrapper_1uo6m_1740t_157",
  "drawer-trigger": "awsui_drawer-trigger_1uo6m_1740t_109",
  "drawer-trigger-active": "awsui_drawer-trigger-active_1uo6m_1740t_176",
  "hide": "awsui_hide_1uo6m_1740t_184"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var Drawer = import_react11.default.forwardRef(({ id, contentClassName, toggleClassName, closeClassName, width, type, toggleRefs, topOffset, bottomOffset, ariaLabels, children, hideOpenButton, isOpen, isHidden, isMobile, onToggle, onClick, onLoseFocus, resizeHandle }, ref) => {
  const openButtonWrapperRef = (0, import_react11.useRef)(null);
  const { TagName, iconName } = togglesConfig[type];
  const { mainLabel, closeLabel, openLabel } = ariaLabels;
  const drawerContentWidthOpen = isMobile ? void 0 : width;
  const drawerContentWidth = isOpen ? drawerContentWidthOpen : void 0;
  const regularOpenButton = import_react11.default.createElement(
    TagName,
    { ref: openButtonWrapperRef, "aria-label": mainLabel, className: styles_css_default7.toggle, "aria-hidden": isOpen },
    import_react11.default.createElement(ToggleButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName, ariaLabel: openLabel, onClick: () => onToggle(true), ariaExpanded: isOpen ? void 0 : false })
  );
  return import_react11.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default7.drawer, {
      [styles_css_default7.hide]: isHidden,
      [styles_css_default7["drawer-closed"]]: !isOpen,
      [styles_css_default5["drawer-closed"]]: !isOpen,
      [styles_css_default7["drawer-mobile"]]: isMobile
    }), style: { width: drawerContentWidth }, onBlur: onLoseFocus ? (e) => {
      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
        onLoseFocus(e);
      }
    } : void 0, onClick: (event) => {
      var _a;
      if (onClick) {
        onClick(event);
      }
      if (!isOpen) {
        if (openButtonWrapperRef.current === event.target || !((_a = openButtonWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
          onToggle(true);
        }
      }
    } },
    import_react11.default.createElement(
      "div",
      { id, style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default7["drawer-content"], styles_css_default7["drawer-content-clickable"], contentClassName) },
      !isMobile && !hideOpenButton && regularOpenButton,
      import_react11.default.createElement(
        TagName,
        { className: clsx_m_default(resizeHandle && styles_css_default7["drawer-resize-content"]), "aria-label": mainLabel, "aria-hidden": !isOpen },
        !isMobile && isOpen && resizeHandle,
        import_react11.default.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: closeLabel, onClick: () => {
          onToggle(false);
        } }),
        children
      )
    )
  );
});
var DrawerTrigger = import_react11.default.forwardRef(({ testUtilsClassName, ariaLabel, ariaExpanded, ariaControls, badge, itemId, isActive, trigger, onClick }, ref) => import_react11.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default7["drawer-trigger"], isActive && styles_css_default7["drawer-trigger-active"]), onClick },
  import_react11.default.createElement(ToggleButton, { ref, className: testUtilsClassName, iconName: trigger.iconName, iconSvg: trigger.iconSvg, ariaLabel, ariaExpanded, ariaControls, badge, testId: itemId && `awsui-app-layout-trigger-${itemId}` })
));
var DrawerTriggersBar = ({ isMobile, topOffset, bottomOffset, activeDrawerId, ariaLabels, drawers, drawerRefs, onDrawerChange }) => {
  const containerRef = import_react11.default.useRef(null);
  const previousActiveDrawerId = (0, import_react11.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const isCompactMode = useDensityMode(containerRef) === "compact";
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = isCompactMode ? 34 : 38;
      const overflowSpot = containerHeight / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      return index;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react11.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default7.drawer, styles_css_default7["drawer-closed"], styles_css_default5["drawer-closed"], {
      [styles_css_default7["drawer-mobile"]]: isMobile,
      [styles_css_default7.hide]: drawers.length === 1 && !!activeDrawerId
    }), ref: containerRef },
    import_react11.default.createElement("div", { ref: triggersContainerRef, style: { top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default7["drawer-content"], {
      [styles_css_default7["drawer-content-clickable"]]: drawers.length === 1
    }), onClick: drawers.length === 1 ? () => onDrawerChange(drawers[0].id !== activeDrawerId ? drawers[0].id : null) : void 0 }, !isMobile && import_react11.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react11.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default7["drawer-triggers-wrapper"]), role: "toolbar", "aria-orientation": "vertical" },
        visibleItems.map((item, index) => {
          var _a;
          return import_react11.default.createElement(DrawerTrigger, { key: index, testUtilsClassName: clsx_m_default(styles_css_default5["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default5["tools-toggle"]), ariaExpanded: activeDrawerId === item.id, ref: item.id === previousActiveDrawerId.current ? drawerRefs.toggle : void 0, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaControls: activeDrawerId === item.id ? item.id : void 0, trigger: item.trigger, badge: item.badge, itemId: item.id, isActive: activeDrawerId === item.id, onClick: drawers.length !== 1 ? () => onDrawerChange(item.id !== activeDrawerId ? item.id : null) : void 0 });
        }),
        overflowItems.length > 0 && import_react11.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default7["drawer-trigger"]) },
          import_react11.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    ))
  );
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var import_react14 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-pointer-events.js
var import_react12 = __toESM(require_react());
var usePointerEvents = ({ position, panelRef, handleRef, onResize, hasTransitions = false }) => {
  const onDocumentPointerMove = (0, import_react12.useCallback)((event) => {
    if (!panelRef || !panelRef.current || !handleRef || !handleRef.current) {
      return;
    }
    panelRef.current.classList.remove(styles_css_default4["with-motion"]);
    if (position === "side") {
      const mouseClientX = event.clientX || 0;
      const handleOffset = handleRef.current.getBoundingClientRect().width / 2;
      const width = panelRef.current.getBoundingClientRect().right - mouseClientX + handleOffset;
      onResize(width);
    } else {
      const mouseClientY = event.clientY || 0;
      const handleOffset = handleRef.current.getBoundingClientRect().height / 2;
      const height = panelRef.current.getBoundingClientRect().bottom - mouseClientY + handleOffset;
      onResize(height);
    }
  }, [position, panelRef, handleRef, onResize]);
  const onDocumentPointerUp = (0, import_react12.useCallback)(() => {
    if (!panelRef || !panelRef.current) {
      return;
    }
    if (hasTransitions) {
      panelRef.current.classList.add(styles_css_default4["with-motion"]);
    }
    document.body.classList.remove(styles_css_default4["resize-active"]);
    document.body.classList.remove(styles_css_default4[`resize-${position}`]);
    document.removeEventListener("pointerup", onDocumentPointerUp);
    document.removeEventListener("pointermove", onDocumentPointerMove);
  }, [panelRef, onDocumentPointerMove, position, hasTransitions]);
  const onSliderPointerDown = (0, import_react12.useCallback)(() => {
    document.body.classList.add(styles_css_default4["resize-active"]);
    document.body.classList.add(styles_css_default4[`resize-${position}`]);
    document.addEventListener("pointerup", onDocumentPointerUp);
    document.addEventListener("pointermove", onDocumentPointerMove);
  }, [onDocumentPointerMove, onDocumentPointerUp, position]);
  return onSliderPointerDown;
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-keyboard-events.js
var KEYBOARD_SINGLE_STEP_SIZE = 10;
var KEYBOARD_MULTIPLE_STEPS_SIZE = 60;
var getCurrentSize = (panelRef) => {
  if (!panelRef || !panelRef.current) {
    return {
      panelHeight: 0,
      panelWidth: 0
    };
  }
  return {
    panelHeight: panelRef.current.clientHeight,
    panelWidth: panelRef.current.clientWidth
  };
};
var useKeyboardEvents = ({ position, onResize, panelRef }) => {
  return (event) => {
    let currentSize;
    let maxSize;
    const { panelHeight, panelWidth } = getCurrentSize(panelRef);
    if (position === "side") {
      currentSize = panelWidth;
      maxSize = window.innerWidth;
    } else {
      currentSize = panelHeight;
      maxSize = window.innerHeight;
    }
    const primaryGrowKey = position === "bottom" ? KeyCode.up : KeyCode.left;
    const primaryShrinkKey = position === "bottom" ? KeyCode.down : KeyCode.right;
    const altGrowKey = position === "bottom" ? KeyCode.right : KeyCode.down;
    const altShrinkKey = position === "bottom" ? KeyCode.left : KeyCode.up;
    let isEventHandled = true;
    switch (event.keyCode) {
      case primaryGrowKey:
      case altGrowKey:
        onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);
        break;
      case primaryShrinkKey:
      case altShrinkKey:
        onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);
        break;
      case KeyCode.pageUp:
        onResize(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);
        break;
      case KeyCode.pageDown:
        onResize(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);
        break;
      case KeyCode.home:
        onResize(maxSize);
        break;
      case KeyCode.end:
        onResize(0);
        break;
      default:
        isEventHandled = false;
    }
    if (isEventHandled) {
      event.preventDefault();
      event.stopPropagation();
    }
  };
};

// node_modules/@cloudscape-design/components/split-panel/icons/resize-handler.js
var import_react13 = __toESM(require_react());
var ResizeHandler = ({ className }) => import_react13.default.createElement(
  "svg",
  { focusable: false, className, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16" },
  import_react13.default.createElement("line", { strokeWidth: "2", x1: "2", y1: "5", x2: "14", y2: "5" }),
  import_react13.default.createElement("line", { strokeWidth: "2", x1: "14", y1: "10", x2: "2", y2: "10" })
);
var resize_handler_default = ResizeHandler;

// node_modules/@cloudscape-design/components/split-panel/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/split-panel/styles.scoped.css";
var styles_css_default8 = {
  "drawer": "awsui_drawer_1r9lg_5jcsd_201",
  "refresh": "awsui_refresh_1r9lg_5jcsd_201",
  "animating": "awsui_animating_1r9lg_5jcsd_215",
  "preference-icon--layout-border": "awsui_preference-icon--layout-border_1r9lg_5jcsd_238",
  "preference-icon--layout-background": "awsui_preference-icon--layout-background_1r9lg_5jcsd_242",
  "preference-icon--layout-header": "awsui_preference-icon--layout-header_1r9lg_5jcsd_245",
  "preference-icon--border": "awsui_preference-icon--border_1r9lg_5jcsd_248",
  "preference-icon--primary-button": "awsui_preference-icon--primary-button_1r9lg_5jcsd_252",
  "preference-icon--secondary": "awsui_preference-icon--secondary_1r9lg_5jcsd_255",
  "preference-icon--disabled-element": "awsui_preference-icon--disabled-element_1r9lg_5jcsd_258",
  "preference-icon--separator": "awsui_preference-icon--separator_1r9lg_5jcsd_261",
  "preference-icon--focus-text": "awsui_preference-icon--focus-text_1r9lg_5jcsd_264",
  "preference-icon-refresh--layout-top": "awsui_preference-icon-refresh--layout-top_1r9lg_5jcsd_268",
  "preference-icon-refresh--layout-main": "awsui_preference-icon-refresh--layout-main_1r9lg_5jcsd_271",
  "preference-icon-refresh--primary": "awsui_preference-icon-refresh--primary_1r9lg_5jcsd_274",
  "preference-icon-refresh--disabled": "awsui_preference-icon-refresh--disabled_1r9lg_5jcsd_277",
  "preference-icon-refresh--column-header": "awsui_preference-icon-refresh--column-header_1r9lg_5jcsd_280",
  "preference-icon-refresh--window": "awsui_preference-icon-refresh--window_1r9lg_5jcsd_283",
  "preference-icon-refresh--secondary": "awsui_preference-icon-refresh--secondary_1r9lg_5jcsd_287",
  "preference-icon-refresh--default": "awsui_preference-icon-refresh--default_1r9lg_5jcsd_290",
  "preference-icon-refresh--separator": "awsui_preference-icon-refresh--separator_1r9lg_5jcsd_293",
  "preference-icon-refresh--input-default": "awsui_preference-icon-refresh--input-default_1r9lg_5jcsd_296",
  "preference-icon-refresh--heading": "awsui_preference-icon-refresh--heading_1r9lg_5jcsd_299",
  "root": "awsui_root_1r9lg_5jcsd_303",
  "preferences-button": "awsui_preferences-button_1r9lg_5jcsd_338",
  "close-button": "awsui_close-button_1r9lg_5jcsd_342",
  "drawer-closed": "awsui_drawer-closed_1r9lg_5jcsd_354",
  "drawer-content-side": "awsui_drawer-content-side_1r9lg_5jcsd_359",
  "drawer-content-bottom": "awsui_drawer-content-bottom_1r9lg_5jcsd_375",
  "position-bottom": "awsui_position-bottom_1r9lg_5jcsd_381",
  "position-side": "awsui_position-side_1r9lg_5jcsd_408",
  "slider": "awsui_slider_1r9lg_5jcsd_414",
  "slider-side": "awsui_slider-side_1r9lg_5jcsd_449",
  "slider-wrapper-bottom": "awsui_slider-wrapper-bottom_1r9lg_5jcsd_456",
  "slider-wrapper-side": "awsui_slider-wrapper-side_1r9lg_5jcsd_467",
  "open-button": "awsui_open-button_1r9lg_5jcsd_478",
  "open-button-side": "awsui_open-button-side_1r9lg_5jcsd_482",
  "slider-icon": "awsui_slider-icon_1r9lg_5jcsd_491",
  "slider-icon-bottom": "awsui_slider-icon-bottom_1r9lg_5jcsd_497",
  "slider-icon-side": "awsui_slider-icon-side_1r9lg_5jcsd_501",
  "pane-header-wrapper-bottom": "awsui_pane-header-wrapper-bottom_1r9lg_5jcsd_505",
  "drawer-mobile": "awsui_drawer-mobile_1r9lg_5jcsd_516",
  "drawer-disable-content-paddings": "awsui_drawer-disable-content-paddings_1r9lg_5jcsd_520",
  "content-bottom": "awsui_content-bottom_1r9lg_5jcsd_529",
  "pane-bottom-center-align": "awsui_pane-bottom-center-align_1r9lg_5jcsd_545",
  "pane-bottom-content-nav-padding": "awsui_pane-bottom-content-nav-padding_1r9lg_5jcsd_550",
  "pane-bottom-content-tools-padding": "awsui_pane-bottom-content-tools-padding_1r9lg_5jcsd_554",
  "content-bottom-max-width": "awsui_content-bottom-max-width_1r9lg_5jcsd_558",
  "content-side": "awsui_content-side_1r9lg_5jcsd_563",
  "pane-header-wrapper-side": "awsui_pane-header-wrapper-side_1r9lg_5jcsd_573",
  "pane-content-wrapper-side": "awsui_pane-content-wrapper-side_1r9lg_5jcsd_579",
  "header": "awsui_header_1r9lg_5jcsd_586",
  "header-text": "awsui_header-text_1r9lg_5jcsd_596",
  "header-actions": "awsui_header-actions_1r9lg_5jcsd_609",
  "divider": "awsui_divider_1r9lg_5jcsd_617"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var ResizableDrawer = (_a) => {
  var _b, _c, _d, _e;
  var { onResize, maxWidth, minWidth, refs, activeDrawer, toolsContent } = _a, props = __rest(_a, ["onResize", "maxWidth", "minWidth", "refs", "activeDrawer", "toolsContent"]);
  const { isOpen, children, width, isMobile } = props;
  const clampedWidth = getLimitedValue(minWidth, width, maxWidth);
  const relativeSize = (clampedWidth - minWidth) / (maxWidth - minWidth) * 100;
  const setSidePanelWidth = (newWidth) => {
    const size = getLimitedValue(minWidth, newWidth, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (isOpen && id && maxWidth >= minWidth) {
      onResize({ size, id });
    }
  };
  const drawerRefObject = (0, import_react14.useRef)(null);
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: refs.slider,
    onResize: setSidePanelWidth
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const onKeyDown = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react14.default.createElement(
    "div",
    { ref: refs.slider, role: "slider", tabIndex: 0, "aria-label": (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle, "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": relativeSize, className: clsx_m_default(styles_css_default8.slider, styles_css_default8[`slider-side`], styles_css_default5["drawers-slider"]), onKeyDown, onPointerDown: onSliderPointerDown },
    import_react14.default.createElement(resize_handler_default, { className: clsx_m_default(styles_css_default8["slider-icon"], styles_css_default8[`slider-icon-side`]) })
  );
  return import_react14.default.createElement(
    Drawer,
    Object.assign({}, props, { id: activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id, width: clampedWidth, ref: drawerRefObject, isHidden: !activeDrawer, resizeHandle: !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react14.default.createElement("div", { className: styles_css_default8["slider-wrapper-side"] }, resizeHandle), ariaLabels: {
      openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,
      mainLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.drawerName,
      closeLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.closeButton
    } }),
    toolsContent && import_react14.default.createElement("div", { className: clsx_m_default((activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID && styles_css_default7.hide) }, toolsContent),
    (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID ? children : null
  );
};

// node_modules/@cloudscape-design/components/app-layout/split-panel/constants.js
var SPLIT_PANEL_MIN_HEIGHT = 160;
var SPLIT_PANEL_MIN_WIDTH = 280;

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/split-panel/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/split-panel/styles.scoped.css";
var styles_css_default9 = {
  "drawer-displayed": "awsui_drawer-displayed_1lh3u_1yevz_103",
  "drawer-content": "awsui_drawer-content_1lh3u_1yevz_107"
};

// node_modules/@cloudscape-design/components/internal/context/split-panel-context.js
var import_react15 = __toESM(require_react());
var SplitPanelContext = (0, import_react15.createContext)(null);
var SplitPanelContextProvider = SplitPanelContext.Provider;
function useSplitPanelContext() {
  const ctx = (0, import_react15.useContext)(SplitPanelContext);
  if (!ctx) {
    throw new Error("Split panel can only be used inside app layout");
  }
  return ctx;
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
function SideSplitPanelDrawer({ displayed, children }) {
  const { isOpen, size, topOffset, bottomOffset } = useSplitPanelContext();
  const width = isOpen && children ? size : void 0;
  return import_react16.default.createElement(
    "div",
    { className: clsx_m_default(displayed && styles_css_default9["drawer-displayed"]), style: { width }, "data-testid": "side-split-panel-drawer" },
    import_react16.default.createElement("div", { className: styles_css_default9["drawer-content"], style: { width, top: topOffset, bottom: bottomOffset } }, children)
  );
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/provider.js
var import_react17 = __toESM(require_react());
function SplitPanelProvider(_a) {
  var { children, size, getMaxHeight, maxWidth, onResize } = _a, rest = __rest(_a, ["children", "size", "getMaxHeight", "maxWidth", "onResize"]);
  const { position, reportSize, isOpen } = rest;
  const [maxHeight, setMaxHeight] = (0, import_react17.useState)(size);
  const minSize = position === "bottom" ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;
  const maxSize = position === "bottom" ? maxHeight : maxWidth;
  const cappedSize = getLimitedValue(minSize, size, maxSize);
  const relativeSize = (size - minSize) / (maxSize - minSize) * 100;
  const onResizeWithValidation = (newSize) => {
    const maxSize2 = position === "side" ? maxWidth : getMaxHeight();
    const isResizeValid = position === "side" ? maxSize2 >= SPLIT_PANEL_MIN_WIDTH : maxSize2 >= SPLIT_PANEL_MIN_HEIGHT;
    if (isOpen && isResizeValid) {
      onResize(getLimitedValue(minSize, newSize, maxSize2));
    }
  };
  (0, import_react17.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));
    return () => cancelAnimationFrame(handle);
  }, [size, minSize, position, getMaxHeight]);
  (0, import_react17.useEffect)(() => {
    reportSize(cappedSize);
  }, [reportSize, cappedSize]);
  (0, import_react17.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handler = () => setMaxHeight(getMaxHeight());
    window.addEventListener("resize", handler);
    return () => window.removeEventListener("resize", handler);
  }, [position, getMaxHeight]);
  return import_react17.default.createElement(SplitPanelContextProvider, { value: Object.assign(Object.assign({}, rest), { size: cappedSize, relativeSize, onResize: onResizeWithValidation }) }, children);
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-app-layout-rect.js
var import_react18 = __toESM(require_react());
function useAppLayoutRect(element) {
  const [offsets, setOffsets] = (0, import_react18.useState)({ left: 0, right: 0, width: Number.POSITIVE_INFINITY });
  const updatePosition = (0, import_react18.useCallback)(() => {
    if (!element || !document.body.clientWidth) {
      return;
    }
    const { left, right } = element.getBoundingClientRect();
    const bodyWidth = document.body.clientWidth;
    setOffsets({ left, right: bodyWidth - right, width: bodyWidth });
  }, [element]);
  (0, import_react18.useEffect)(() => {
    window.addEventListener("resize", updatePosition);
    return () => window.removeEventListener("resize", updatePosition);
  }, [updatePosition]);
  const getElement = (0, import_react18.useCallback)(() => element, [element]);
  useResizeObserver(getElement, updatePosition);
  return offsets;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-split-panel-focus-control.js
var import_react19 = __toESM(require_react());
function useSplitPanelFocusControl(dependencies) {
  const refs = {
    toggle: (0, import_react19.useRef)(null),
    slider: (0, import_react19.useRef)(null),
    preferences: (0, import_react19.useRef)(null)
  };
  const lastInteraction = (0, import_react19.useRef)(null);
  (0, import_react19.useEffect)(() => {
    var _a, _b, _c, _d;
    switch ((_a = lastInteraction.current) === null || _a === void 0 ? void 0 : _a.type) {
      case "open":
        (_b = refs.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
        break;
      case "close":
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
        break;
      case "position":
        (_d = refs.preferences.current) === null || _d === void 0 ? void 0 : _d.focus();
        break;
    }
    lastInteraction.current = null;
  }, dependencies);
  return {
    refs,
    setLastInteraction: (interaction) => lastInteraction.current = interaction
  };
}

// node_modules/@cloudscape-design/components/app-layout/classic.js
var ClassicAppLayout = import_react20.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g;
  var { navigation, navigationWidth = 280, navigationHide, navigationOpen: controlledNavigationOpen, tools, toolsWidth = 290, toolsHide, toolsOpen: controlledToolsOpen, breadcrumbs, notifications, stickyNotifications, contentHeader, disableContentHeaderOverlap, content, contentType = "default", disableContentPaddings, disableBodyScroll, maxContentWidth, minContentWidth, headerSelector = "#b #h", footerSelector = "#b #f", ariaLabels, splitPanel, splitPanelSize: controlledSplitPanelSize, splitPanelOpen: controlledSplitPanelOpen, splitPanelPreferences: controlledSplitPanelPreferences, onSplitPanelPreferencesChange, onSplitPanelResize, onSplitPanelToggle, onNavigationChange, onToolsChange, drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId } = _a, rest = __rest(_a, ["navigation", "navigationWidth", "navigationHide", "navigationOpen", "tools", "toolsWidth", "toolsHide", "toolsOpen", "breadcrumbs", "notifications", "stickyNotifications", "contentHeader", "disableContentHeaderOverlap", "content", "contentType", "disableContentPaddings", "disableBodyScroll", "maxContentWidth", "minContentWidth", "headerSelector", "footerSelector", "ariaLabels", "splitPanel", "splitPanelSize", "splitPanelOpen", "splitPanelPreferences", "onSplitPanelPreferencesChange", "onSplitPanelResize", "onSplitPanelToggle", "onNavigationChange", "onToolsChange", "drawers", "onDrawerChange", "activeDrawerId"]);
  if (isDevelopment) {
    if (controlledToolsOpen && toolsHide) {
      warnOnce("AppLayout", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const __embeddedViewMode = Boolean(rest.__embeddedViewMode);
  const rootRef = (0, import_react20.useRef)(null);
  const isMobile = useMobile();
  const defaults2 = applyDefaults(contentType, { maxContentWidth, minContentWidth }, false);
  const [navigationOpen = false, setNavigationOpen] = useControllable(controlledNavigationOpen, onNavigationChange, isMobile ? false : defaults2.navigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, isMobile ? false : defaults2.toolsOpen, { componentName: "AppLayout", controlledProp: "toolsOpen", changeHandler: "onToolsChange" });
  const onToolsToggle = (open) => {
    setToolsOpen(open);
    focusToolsButtons();
    fireNonCancelableEvent(onToolsChange, { open });
  };
  const { drawers, activeDrawer, minDrawerSize, activeDrawerSize, activeDrawerId, ariaLabelsWithDrawers, onActiveDrawerChange, onActiveDrawerResize } = useDrawers(Object.assign({ drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId }, rest), ariaLabels, {
    ariaLabels,
    tools,
    toolsOpen,
    toolsHide,
    toolsWidth,
    onToolsToggle
  });
  ariaLabels = ariaLabelsWithDrawers;
  const hasDrawers = !!drawers;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(toolsOpen || activeDrawer !== void 0, true);
  const { refs: drawerRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const onNavigationToggle = useStableCallback((open) => {
    setNavigationOpen(open);
    focusNavButtons();
    fireNonCancelableEvent(onNavigationChange, { open });
  });
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink) {
      onNavigationToggle(false);
    }
  };
  (0, import_react20.useEffect)(() => {
    if (isMobile) {
      onNavigationToggle(false);
    }
  }, [isMobile, onNavigationToggle]);
  const navigationVisible = !navigationHide && navigationOpen;
  const toolsVisible = !toolsHide && toolsOpen;
  const { contentHeightStyle, headerHeight, footerHeight } = useContentHeight(headerSelector, footerSelector, disableBodyScroll);
  const [notificationsHeight, notificationsRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;
  const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;
  const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  });
  const splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || "bottom";
  const [splitPanelReportedToggle, setSplitPanelReportedToggle] = (0, import_react20.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));
  const closedDrawerWidth = 40;
  const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;
  const getEffectiveToolsWidth = () => {
    if (activeDrawer && activeDrawerSize) {
      return activeDrawerSize;
    }
    if (toolsHide || drawers) {
      return 0;
    }
    if (toolsOpen) {
      return toolsWidth;
    }
    return closedDrawerWidth;
  };
  const effectiveToolsWidth = getEffectiveToolsWidth();
  const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);
  const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {
    componentName: "AppLayout",
    controlledProp: "splitPanelSize",
    changeHandler: "onSplitPanelResize"
  });
  const mainContentRef = (0, import_react20.useRef)(null);
  const legacyScrollRootRef = (0, import_react20.useRef)(null);
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    splitPanelOpen
  ]);
  const onSplitPanelPreferencesSet = (0, import_react20.useCallback)((detail) => {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]);
  const onSplitPanelSizeSet = (0, import_react20.useCallback)((newSize) => {
    setSplitPanelSize(newSize);
    fireNonCancelableEvent(onSplitPanelResize, { size: newSize });
  }, [setSplitPanelSize, onSplitPanelResize]);
  const onSplitPanelToggleHandler = (0, import_react20.useCallback)(() => {
    setSplitPanelOpen(!splitPanelOpen);
    setSplitPanelLastInteraction({ type: splitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);
  const getSplitPanelMaxHeight = useStableCallback(() => {
    if (typeof document === "undefined") {
      return 0;
    } else if (disableBodyScroll && legacyScrollRootRef.current) {
      const availableHeight = legacyScrollRootRef.current.clientHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    } else {
      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    }
  });
  const { left: leftOffset, right: rightOffset, width: documentWidth } = useAppLayoutRect(rootRef.current);
  const rightDrawerBarWidth = drawers ? drawers.length > 1 ? closedDrawerWidth : 0 : 0;
  const contentPadding = 80;
  const resizableSpaceAvailable = Math.max(0, documentWidth - leftOffset - rightOffset - effectiveNavigationWidth - defaults2.minContentWidth - contentPadding - rightDrawerBarWidth);
  const isSplitPanelForcedPosition = isMobile || resizableSpaceAvailable - effectiveToolsWidth < SPLIT_PANEL_MIN_WIDTH;
  const finalSplitPanePosition = isSplitPanelForcedPosition ? "bottom" : splitPanelPosition;
  const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === "side";
  const sideSplitPanelSize = splitPaneAvailableOnTheSide ? splitPanelOpen ? splitPanelSize : closedDrawerWidth : 0;
  const splitPanelMaxWidth = Math.max(0, resizableSpaceAvailable - effectiveToolsWidth);
  const drawerMaxSize = Math.max(0, resizableSpaceAvailable - sideSplitPanelSize);
  const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;
  const contentMaxWidthStyle = !isMobile ? { maxWidth: defaults2.maxContentWidth } : void 0;
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react20.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react20.useState)(0);
  const splitPanelContextProps = {
    topOffset: headerHeight + (finalSplitPanePosition === "bottom" ? stickyNotificationsHeight || 0 : 0),
    bottomOffset: footerHeight,
    leftOffset: leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),
    rightOffset: isMobile ? 0 : rightOffset + effectiveToolsWidth + rightDrawerBarWidth,
    position: finalSplitPanePosition,
    size: splitPanelSize,
    maxWidth: splitPanelMaxWidth,
    getMaxHeight: getSplitPanelMaxHeight,
    disableContentPaddings,
    contentWidthStyles: contentMaxWidthStyle,
    isOpen: splitPanelOpen,
    isForcedPosition: isSplitPanelForcedPosition,
    onResize: onSplitPanelSizeSet,
    onToggle: onSplitPanelToggleHandler,
    onPreferencesChange: onSplitPanelPreferencesSet,
    setSplitPanelToggle: setSplitPanelReportedToggle,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    refs: splitPanelRefs
  };
  const splitPanelWrapped = splitPanel && import_react20.default.createElement(SplitPanelProvider, Object.assign({}, splitPanelContextProps), finalSplitPanePosition === "side" ? import_react20.default.createElement(SideSplitPanelDrawer, { displayed: splitPanelDisplayed }, splitPanel) : splitPanel);
  const contentWrapperProps = {
    contentType,
    navigationPadding: navigationHide || !!navigationOpen,
    contentWidthStyles: !isMobile ? { minWidth: defaults2.minContentWidth, maxWidth: defaults2.maxContentWidth } : void 0,
    toolsPadding: (
      // tools padding is displayed in one of the three cases
      // 1. Nothing on the that screen edge (no tools panel and no split panel)
      toolsHide || hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== "side") || // 2. Tools panel is present and open
      toolsVisible || // 3. Split panel is open in side position
      splitPaneAvailableOnTheSide && splitPanelOpen
    ),
    isMobile
  };
  (0, import_react20.useImperativeHandle)(ref, () => ({
    openTools: () => onToolsToggle(true),
    closeNavigationIfNecessary: () => {
      if (isMobile) {
        onNavigationToggle(false);
      }
    },
    focusToolsClose: () => {
      if (hasDrawers) {
        focusDrawersButtons(true);
      } else {
        focusToolsButtons(true);
      }
    },
    focusActiveDrawer: () => focusDrawersButtons(true),
    focusSplitPanel: () => {
      var _a2;
      return (_a2 = splitPanelRefs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }));
  const splitPanelBottomOffset = (_b = !splitPanelDisplayed || finalSplitPanePosition !== "bottom" ? void 0 : splitPanelOpen ? splitPanelReportedSize : splitPanelReportedHeaderHeight) !== null && _b !== void 0 ? _b : void 0;
  const [mobileBarHeight, mobileBarRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  return import_react20.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default4.root, styles_css_default5.root, disableBodyScroll && styles_css_default4["root-no-scroll"]), ref: rootRef, style: contentHeightStyle },
    isMobile && !__embeddedViewMode && (!toolsHide || !navigationHide || breadcrumbs) && import_react20.default.createElement(MobileToolbar, { anyPanelOpen, toggleRefs: { navigation: navigationRefs.toggle, tools: toolsRefs.toggle }, topOffset: headerHeight, ariaLabels, navigationHide, toolsHide, onNavigationOpen: () => onNavigationToggle(true), onToolsOpen: () => onToolsToggle(true), unfocusable: anyPanelOpen, mobileBarRef, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
      onActiveDrawerChange(newDrawerId);
      if (newDrawerId !== activeDrawerId) {
        focusToolsButtons();
        focusDrawersButtons();
      }
    } }, breadcrumbs),
    import_react20.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default4.layout, disableBodyScroll && styles_css_default4["layout-no-scroll"]) },
      !navigationHide && import_react20.default.createElement(Drawer, { contentClassName: styles_css_default5.navigation, toggleClassName: styles_css_default5["navigation-toggle"], closeClassName: styles_css_default5["navigation-close"], ariaLabels: togglesConfig.navigation.getLabels(ariaLabels), bottomOffset: footerHeight, topOffset: headerHeight, isMobile, isOpen: navigationOpen, onClick: isMobile ? onNavigationClick : void 0, onToggle: onNavigationToggle, toggleRefs: navigationRefs, type: "navigation", width: navigationWidth }, navigation),
      import_react20.default.createElement(
        "main",
        { ref: legacyScrollRootRef, className: clsx_m_default(styles_css_default4["layout-main"], {
          [styles_css_default4["layout-main-scrollable"]]: disableBodyScroll,
          [styles_css_default5["disable-body-scroll-root"]]: disableBodyScroll,
          [styles_css_default4.unfocusable]: isMobile && anyPanelOpen
        }) },
        import_react20.default.createElement(
          "div",
          { style: {
            marginBottom: splitPanelBottomOffset
          } },
          notifications && import_react20.default.createElement(Notifications, { disableContentPaddings, testUtilsClassName: styles_css_default5.notifications, labels: ariaLabels, topOffset: disableBodyScroll ? 0 : headerHeight, sticky: !isMobile && stickyNotifications, ref: notificationsRef }, notifications),
          (!isMobile && breadcrumbs || contentHeader) && import_react20.default.createElement(
            content_wrapper_default,
            Object.assign({}, contentWrapperProps),
            !isMobile && breadcrumbs && import_react20.default.createElement("div", { className: clsx_m_default(styles_css_default5.breadcrumbs, styles_css_default4["breadcrumbs-desktop"]) }, breadcrumbs),
            contentHeader && import_react20.default.createElement("div", { className: clsx_m_default(styles_css_default4["content-header-wrapper"], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles_css_default4["content-extra-top-padding"], !hasRenderedNotifications && !breadcrumbs && styles_css_default4["content-header-wrapper-first-child"], !disableContentHeaderOverlap && styles_css_default4["content-header-wrapper-overlapped"]) }, contentHeader)
          ),
          import_react20.default.createElement(
            content_wrapper_default,
            Object.assign({}, contentWrapperProps, {
              ref: mainContentRef,
              disablePaddings: disableContentPaddings,
              // eslint-disable-next-line react/forbid-component-props
              className: clsx_m_default(!disableContentPaddings && styles_css_default4["content-wrapper"], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles_css_default4["content-extra-top-padding"], styles_css_default5.content, !disableContentHeaderOverlap && contentHeader && styles_css_default4["content-overlapped"], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles_css_default4["content-wrapper-first-child"])
            }),
            import_react20.default.createElement(AppLayoutContext.Provider, { value: {
              stickyOffsetTop: (
                // We don't support the table header being sticky in case the deprecated disableBodyScroll is enabled,
                // therefore we ensure the table header scrolls out of view by offseting a large enough value (9999px)
                (disableBodyScroll ? isMobile ? -9999 : 0 : headerHeight) + (isMobile ? 0 : stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0)
              ),
              stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0),
              mobileBarHeight: mobileBarHeight !== null && mobileBarHeight !== void 0 ? mobileBarHeight : 0
            } }, content)
          )
        ),
        finalSplitPanePosition === "bottom" && splitPanelWrapped
      ),
      finalSplitPanePosition === "side" && splitPanelWrapped,
      hasDrawers ? import_react20.default.createElement(ResizableDrawer, { contentClassName: clsx_m_default(activeDrawerId && styles_css_default5["active-drawer"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default5.tools), toggleClassName: styles_css_default5["tools-toggle"], closeClassName: clsx_m_default(styles_css_default5["active-drawer-close-button"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default5["tools-close"]), ariaLabels: {
        openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,
        closeLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.closeButton,
        mainLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.drawerName,
        resizeHandle: (_f = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _f === void 0 ? void 0 : _f.resizeHandle
      }, minWidth: minDrawerSize, maxWidth: drawerMaxSize, width: activeDrawerSize, bottomOffset: footerHeight, topOffset: headerHeight, isMobile, onToggle: (isOpen) => {
        if (!isOpen) {
          focusToolsButtons();
          focusDrawersButtons();
          onActiveDrawerChange(null);
        }
      }, isOpen: true, hideOpenButton: true, toggleRefs: drawerRefs, type: "tools", onLoseFocus: loseDrawersFocus, activeDrawer, onResize: (changeDetail) => onActiveDrawerResize(changeDetail), refs: drawerRefs, toolsContent: (_g = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _g === void 0 ? void 0 : _g.content }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content) : !toolsHide && import_react20.default.createElement(Drawer, { contentClassName: styles_css_default5.tools, toggleClassName: styles_css_default5["tools-toggle"], closeClassName: styles_css_default5["tools-close"], ariaLabels: togglesConfig.tools.getLabels(ariaLabels), width: toolsWidth, bottomOffset: footerHeight, topOffset: headerHeight, isMobile, onToggle: onToolsToggle, isOpen: toolsOpen, toggleRefs: toolsRefs, type: "tools", onLoseFocus: loseToolsFocus }, tools),
      hasDrawers && drawers.length > 0 && import_react20.default.createElement(DrawerTriggersBar, { drawerRefs, bottomOffset: footerHeight, topOffset: headerHeight, isMobile, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
        if (activeDrawerId !== newDrawerId) {
          focusToolsButtons();
          focusDrawersButtons();
        }
        onActiveDrawerChange(newDrawerId);
      }, ariaLabels })
    )
  );
});
var classic_default = ClassicAppLayout;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var import_react36 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var import_react24 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.scoped.css";
var styles_css_default10 = {
  "background": "awsui_background_hyvsj_zz5e8_99",
  "scrolling-background": "awsui_scrolling-background_hyvsj_zz5e8_102",
  "sticky-background": "awsui_sticky-background_hyvsj_zz5e8_108",
  "has-sticky-notifications": "awsui_has-sticky-notifications_hyvsj_zz5e8_116",
  "breadcrumbs": "awsui_breadcrumbs_hyvsj_zz5e8_129",
  "has-sticky-background": "awsui_has-sticky-background_hyvsj_zz5e8_139",
  "drawers-container": "awsui_drawers-container_hyvsj_zz5e8_151",
  "has-open-drawer": "awsui_has-open-drawer_hyvsj_zz5e8_162",
  "disable-body-scroll": "awsui_disable-body-scroll_hyvsj_zz5e8_185",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_hyvsj_zz5e8_190",
  "has-multiple-triggers": "awsui_has-multiple-triggers_hyvsj_zz5e8_231",
  "drawers-mobile-triggers-container": "awsui_drawers-mobile-triggers-container_hyvsj_zz5e8_241",
  "drawers-trigger-content": "awsui_drawers-trigger-content_hyvsj_zz5e8_245",
  "drawers-trigger-overflow": "awsui_drawers-trigger-overflow_hyvsj_zz5e8_259",
  "drawers-trigger": "awsui_drawers-trigger_hyvsj_zz5e8_245",
  "drawer": "awsui_drawer_hyvsj_zz5e8_151",
  "drawer-content-container": "awsui_drawer-content-container_hyvsj_zz5e8_290",
  "drawer-close-button": "awsui_drawer-close-button_hyvsj_zz5e8_299",
  "drawer-content": "awsui_drawer-content_hyvsj_zz5e8_290",
  "drawer-content-hidden": "awsui_drawer-content-hidden_hyvsj_zz5e8_307",
  "drawer-slider": "awsui_drawer-slider_hyvsj_zz5e8_310",
  "is-drawer-open": "awsui_is-drawer-open_hyvsj_zz5e8_317",
  "content": "awsui_content_hyvsj_zz5e8_343",
  "layout": "awsui_layout_hyvsj_zz5e8_364",
  "has-max-content-width": "awsui_has-max-content-width_hyvsj_zz5e8_447",
  "content-type-dashboard": "awsui_content-type-dashboard_hyvsj_zz5e8_462",
  "content-type-table": "awsui_content-type-table_hyvsj_zz5e8_476",
  "content-type-cards": "awsui_content-type-cards_hyvsj_zz5e8_476",
  "is-overlap-disabled": "awsui_is-overlap-disabled_hyvsj_zz5e8_482",
  "is-hide-mobile-toolbar": "awsui_is-hide-mobile-toolbar_hyvsj_zz5e8_485",
  "has-content-gap-left": "awsui_has-content-gap-left_hyvsj_zz5e8_517",
  "has-content-gap-right": "awsui_has-content-gap-right_hyvsj_zz5e8_520",
  "content-first-child-notifications": "awsui_content-first-child-notifications_hyvsj_zz5e8_530",
  "has-breadcrumbs": "awsui_has-breadcrumbs_hyvsj_zz5e8_533",
  "content-first-child-header": "awsui_content-first-child-header_hyvsj_zz5e8_536",
  "has-header": "awsui_has-header_hyvsj_zz5e8_536",
  "content-first-child-main": "awsui_content-first-child-main_hyvsj_zz5e8_557",
  "disable-content-paddings": "awsui_disable-content-paddings_hyvsj_zz5e8_557",
  "has-split-panel": "awsui_has-split-panel_hyvsj_zz5e8_600",
  "split-panel-position-bottom": "awsui_split-panel-position-bottom_hyvsj_zz5e8_600",
  "block-body-scroll": "awsui_block-body-scroll_hyvsj_zz5e8_616",
  "unfocusable": "awsui_unfocusable_hyvsj_zz5e8_621",
  "container": "awsui_container_hyvsj_zz5e8_631",
  "is-navigation-open": "awsui_is-navigation-open_hyvsj_zz5e8_657",
  "is-tools-open": "awsui_is-tools-open_hyvsj_zz5e8_660",
  "is-split-panel-open": "awsui_is-split-panel-open_hyvsj_zz5e8_660",
  "split-panel-position-side": "awsui_split-panel-position-side_hyvsj_zz5e8_660",
  "has-active-drawer": "awsui_has-active-drawer_hyvsj_zz5e8_660",
  "mobile-toolbar": "awsui_mobile-toolbar_hyvsj_zz5e8_669",
  "remove-high-contrast-header": "awsui_remove-high-contrast-header_hyvsj_zz5e8_686",
  "mobile-toolbar-nav": "awsui_mobile-toolbar-nav_hyvsj_zz5e8_690",
  "mobile-toolbar-breadcrumbs": "awsui_mobile-toolbar-breadcrumbs_hyvsj_zz5e8_694",
  "mobile-toolbar-tools": "awsui_mobile-toolbar-tools_hyvsj_zz5e8_698",
  "navigation-container": "awsui_navigation-container_hyvsj_zz5e8_707",
  "show-navigation": "awsui_show-navigation_hyvsj_zz5e8_751",
  "animating": "awsui_animating_hyvsj_zz5e8_774",
  "showButtons": "awsui_showButtons_hyvsj_zz5e8_1",
  "navigation": "awsui_navigation_hyvsj_zz5e8_707",
  "openNavigation": "awsui_openNavigation_hyvsj_zz5e8_1",
  "animated-content": "awsui_animated-content_hyvsj_zz5e8_836",
  "hide-navigation": "awsui_hide-navigation_hyvsj_zz5e8_845",
  "notifications": "awsui_notifications_hyvsj_zz5e8_855",
  "sticky-notifications": "awsui_sticky-notifications_hyvsj_zz5e8_861",
  "split-panel-bottom": "awsui_split-panel-bottom_hyvsj_zz5e8_878",
  "position-bottom": "awsui_position-bottom_hyvsj_zz5e8_925",
  "openSplitPanelBottom": "awsui_openSplitPanelBottom_hyvsj_zz5e8_1",
  "split-panel-side": "awsui_split-panel-side_hyvsj_zz5e8_954",
  "position-side": "awsui_position-side_hyvsj_zz5e8_967",
  "tools-container": "awsui_tools-container_hyvsj_zz5e8_989",
  "tools": "awsui_tools_hyvsj_zz5e8_989",
  "openTools": "awsui_openTools_hyvsj_zz5e8_1",
  "has-tools-form-persistence": "awsui_has-tools-form-persistence_hyvsj_zz5e8_1086",
  "hide-tools": "awsui_hide-tools_hyvsj_zz5e8_1096",
  "show-tools": "awsui_show-tools_hyvsj_zz5e8_1108",
  "has-tools-form": "awsui_has-tools-form_hyvsj_zz5e8_1086",
  "trigger-badge-wrapper": "awsui_trigger-badge-wrapper_hyvsj_zz5e8_1191",
  "trigger": "awsui_trigger_hyvsj_zz5e8_1191",
  "selected": "awsui_selected_hyvsj_zz5e8_1265",
  "badge": "awsui_badge_hyvsj_zz5e8_1285",
  "trigger-wrapper": "awsui_trigger-wrapper_hyvsj_zz5e8_1289",
  "dot": "awsui_dot_hyvsj_zz5e8_1300"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
function SplitPanel({ children }) {
  const { footerHeight, handleSplitPanelClick, handleSplitPanelPreferencesChange, handleSplitPanelResize, headerHeight, isSplitPanelForcedPosition, isSplitPanelOpen, setSplitPanelReportedSize, setSplitPanelReportedHeaderHeight, setSplitPanelToggle, splitPanelPosition, splitPanelRefs, splitPanelSize } = useAppLayoutInternals();
  const props = {
    bottomOffset: 0,
    getMaxHeight: () => {
      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    },
    maxWidth: typeof document !== "undefined" ? document.documentElement.clientWidth : Number.POSITIVE_INFINITY,
    isForcedPosition: isSplitPanelForcedPosition,
    isOpen: isSplitPanelOpen,
    leftOffset: 0,
    onPreferencesChange: handleSplitPanelPreferencesChange,
    onResize: handleSplitPanelResize,
    onToggle: handleSplitPanelClick,
    position: splitPanelPosition,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    rightOffset: 0,
    size: splitPanelSize || 0,
    topOffset: 0,
    setSplitPanelToggle,
    refs: splitPanelRefs
  };
  return import_react21.default.createElement(SplitPanelProvider, Object.assign({}, props), children);
}
function SplitPanelBottom() {
  const { disableBodyScroll, hasOpenDrawer, isNavigationOpen, isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelReportedSize, splitPanelReportedHeaderHeight } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react21.default.createElement(Transition, { in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, (state, transitionEventsRef) => import_react21.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default10["split-panel-bottom"], styles_css_default10[`position-${splitPanelPosition}`], {
      [styles_css_default10.animating]: state === "entering",
      [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default10["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default10["is-navigation-open"]]: isNavigationOpen,
      [styles_css_default10["is-split-panel-open"]]: isSplitPanelOpen
    }), ref: transitionEventsRef, style: {
      [custom_css_properties_default.splitPanelReportedSize]: `${splitPanelReportedSize}px`,
      [custom_css_properties_default.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`
    } },
    import_react21.default.createElement(SplitPanel, null),
    splitPanelPosition === "bottom" && splitPanel
  ));
}
function SplitPanelSide() {
  const { isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelMaxWidth, splitPanelMinWidth, splitPanelControlId, isToolsOpen, activeDrawerId } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react21.default.createElement("section", { id: splitPanelControlId, "aria-hidden": !isSplitPanelOpen || splitPanelPosition === "bottom" ? true : false, className: clsx_m_default(styles_css_default10["split-panel-side"], styles_css_default10[`position-${splitPanelPosition}`], {
    [styles_css_default10["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default10["has-open-drawer"]]: !!activeDrawerId || isToolsOpen
  }), style: {
    [custom_css_properties_default.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,
    [custom_css_properties_default.splitPanelMinWidth]: `${splitPanelMinWidth}px`
  } }, splitPanelPosition === "side" && splitPanel);
}
function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {
  let splitPanelPosition = "bottom";
  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === "side") {
    splitPanelPosition = "side";
  }
  return splitPanelPosition;
}
SplitPanel.Bottom = SplitPanelBottom;
SplitPanel.Side = SplitPanelSide;
var split_panel_default = SplitPanel;

// node_modules/@cloudscape-design/components/app-layout/utils/use-resize.js
var import_react22 = __toESM(require_react());
function useResize(drawerRefObject, { activeDrawer, activeDrawerSize, onActiveDrawerResize, drawersRefs, isToolsOpen, drawersMaxWidth }) {
  var _a, _b;
  const toolsWidth = 290;
  const MIN_WIDTH = Math.min((_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _a !== void 0 ? _a : Number.POSITIVE_INFINITY, toolsWidth);
  const [relativeSize, setRelativeSize] = (0, import_react22.useState)(0);
  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;
  (0, import_react22.useEffect)(() => {
    const handle = requestAnimationFrame(() => {
      const maxSize = drawersMaxWidth;
      setRelativeSize((drawerSize - MIN_WIDTH) / (maxSize - MIN_WIDTH) * 100);
    });
    return () => cancelAnimationFrame(handle);
  }, [drawerSize, drawersMaxWidth, MIN_WIDTH]);
  const setSidePanelWidth = (width) => {
    const maxWidth = drawersMaxWidth;
    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (id && maxWidth >= MIN_WIDTH) {
      onActiveDrawerResize({ size, id });
    }
  };
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: drawersRefs.slider,
    onResize: setSidePanelWidth,
    hasTransitions: true
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const onKeyDown = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react22.default.createElement(
    "div",
    { ref: drawersRefs.slider, role: "slider", tabIndex: 0, "aria-label": (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle, "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": relativeSize, className: clsx_m_default(styles_css_default8.slider, styles_css_default8[`slider-side`], styles_css_default5["drawers-slider"]), onKeyDown, onPointerDown: onSliderPointerDown },
    import_react22.default.createElement(resize_handler_default, { className: clsx_m_default(styles_css_default8["slider-icon"], styles_css_default8[`slider-icon-side`]) })
  );
  return { resizeHandle: import_react22.default.createElement("div", { className: styles_css_default10["drawer-slider"] }, resizeHandle), drawerSize };
}
var use_resize_default = useResize;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/use-background-overlap.js
var import_react23 = __toESM(require_react());
function useBackgroundOverlap({ contentHeader, disableContentHeaderOverlap, layoutElement }) {
  const hasContentHeader = !!contentHeader;
  const [hasBackgroundOverlap, setHasBackgroundOverlap] = (0, import_react23.useState)(hasContentHeader);
  const updateBackgroundOverlapHeight = (0, import_react23.useCallback)((height) => {
    const hasOverlap = hasContentHeader || height > 0;
    setHasBackgroundOverlap(hasOverlap);
    const element = typeof layoutElement !== "function" && (layoutElement === null || layoutElement === void 0 ? void 0 : layoutElement.current);
    if (!element) {
      return;
    }
    if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {
      element.style.removeProperty(custom_css_properties_default.overlapHeight);
    } else {
      element.style.setProperty(custom_css_properties_default.overlapHeight, `${height}px`);
    }
  }, [hasContentHeader, layoutElement, disableContentHeaderOverlap]);
  return {
    hasBackgroundOverlap,
    updateBackgroundOverlapHeight
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var AppLayoutInternalsContext = (0, import_react24.createContext)(null);
function useAppLayoutInternals() {
  const ctx = (0, import_react24.useContext)(AppLayoutInternalsContext);
  if (!ctx) {
    throw new Error("Invariant violation: this context is only available inside app layout");
  }
  return ctx;
}
var AppLayoutInternalsProvider = import_react24.default.forwardRef((_a, forwardRef) => {
  var _b, _c, _d, _e, _f, _g;
  var { toolsHide, toolsOpen: controlledToolsOpen, navigationHide, navigationOpen: controlledNavigationOpen, contentType = "default", headerSelector = "#b #h", footerSelector = "#b #h", children, splitPanel } = _a, props = __rest(_a, ["toolsHide", "toolsOpen", "navigationHide", "navigationOpen", "contentType", "headerSelector", "footerSelector", "children", "splitPanel"]);
  const isMobile = useMobile();
  const __embeddedViewMode = Boolean(props.__embeddedViewMode);
  if (isDevelopment) {
    if (controlledToolsOpen && toolsHide) {
      warnOnce("AppLayout", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const [hasStickyBackground, setHasStickyBackground] = (0, import_react24.useState)(false);
  const geckoMaxCssLength = ((1 << 30) - 1) / 60;
  const halfGeckoMaxCssLength = geckoMaxCssLength / 2;
  const maxContentWidth = props.maxContentWidth && props.maxContentWidth > halfGeckoMaxCssLength ? halfGeckoMaxCssLength : (_b = props.maxContentWidth) !== null && _b !== void 0 ? _b : 0;
  const minContentWidth = (_c = props.minContentWidth) !== null && _c !== void 0 ? _c : 280;
  const contentTypeDefaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, true);
  const [isNavigationOpen = false, setIsNavigationOpen] = useControllable(controlledNavigationOpen, props.onNavigationChange, isMobile ? false : contentTypeDefaults.navigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(isNavigationOpen);
  const handleNavigationClick = useStableCallback(function handleNavigationChange(isOpen) {
    setIsNavigationOpen(isOpen);
    focusNavButtons();
    fireNonCancelableEvent(props.onNavigationChange, { open: isOpen });
  });
  (0, import_react24.useEffect)(() => {
    if (isMobile) {
      handleNavigationClick(false);
    }
  }, [isMobile, handleNavigationClick]);
  const toolsWidth = (_d = props.toolsWidth) !== null && _d !== void 0 ? _d : 290;
  const hasDefaultToolsWidth = props.toolsWidth === void 0;
  const [isToolsOpen = false, setIsToolsOpen] = useControllable(controlledToolsOpen, props.onToolsChange, isMobile ? false : contentTypeDefaults.toolsOpen, { componentName: "AppLayout", controlledProp: "toolsOpen", changeHandler: "onToolsChange" });
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(isToolsOpen, true);
  const handleToolsClick = (0, import_react24.useCallback)(function handleToolsChange(isOpen, skipFocusControl) {
    setIsToolsOpen(isOpen);
    !skipFocusControl && focusToolsButtons();
    fireNonCancelableEvent(props.onToolsChange, { open: isOpen });
  }, [props.onToolsChange, setIsToolsOpen, focusToolsButtons]);
  const headerHeight = useObservedElement(headerSelector);
  const footerHeight = useObservedElement(footerSelector);
  const splitPanelMinWidth = 280;
  const [splitPanelMaxWidth, setSplitPanelMaxWidth] = (0, import_react24.useState)(splitPanelMinWidth);
  const [isSplitPanelOpen, setIsSplitPanelOpen] = useControllable(props.splitPanelOpen, props.onSplitPanelToggle, false, { componentName: "AppLayout", controlledProp: "splitPanelOpen", changeHandler: "onSplitPanelToggle" });
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(props.splitPanelPreferences, props.onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    isSplitPanelOpen
  ]);
  const handleSplitPanelClick = (0, import_react24.useCallback)(function handleSplitPanelChange() {
    setIsSplitPanelOpen(!isSplitPanelOpen);
    setSplitPanelLastInteraction({ type: isSplitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(props.onSplitPanelToggle, { open: !isSplitPanelOpen });
  }, [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen, setSplitPanelLastInteraction]);
  const [isSplitPanelForcedPosition, setSplitPanelForcedPosition] = (0, import_react24.useState)(false);
  const splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);
  (0, import_react24.useLayoutEffect)(function handleSplitPanelForcePosition() {
    setSplitPanelForcedPosition(splitPanelMinWidth > splitPanelMaxWidth);
  }, [splitPanelMaxWidth, splitPanelMinWidth]);
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react24.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react24.useState)(0);
  const [splitPanelToggle, setSplitPanelToggle] = (0, import_react24.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanelToggle.displayed || isSplitPanelOpen && !!splitPanel);
  const splitPanelControlId = useUniqueId("split-panel-");
  const toolsControlId = useUniqueId("tools-");
  const [splitPanelSize, setSplitPanelSize] = useControllable(props.splitPanelSize, props.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" });
  const handleSplitPanelResize = (0, import_react24.useCallback)((size) => {
    setSplitPanelSize(size);
    fireNonCancelableEvent(props.onSplitPanelResize, { size });
  }, [props.onSplitPanelResize, setSplitPanelSize]);
  const handleSplitPanelPreferencesChange = (0, import_react24.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);
  }, [props.onSplitPanelPreferencesChange, setSplitPanelPreferences, setSplitPanelLastInteraction]);
  const _h = useDrawers(props, props.ariaLabels, {
    ariaLabels: props.ariaLabels,
    toolsHide,
    toolsOpen: isToolsOpen,
    tools: props.tools,
    toolsWidth,
    onToolsToggle: handleToolsClick
  }), { drawers, activeDrawer, activeDrawerId, minDrawerSize: drawersMinWidth, onActiveDrawerChange, onActiveDrawerResize, activeDrawerSize } = _h, drawersProps = __rest(_h, ["drawers", "activeDrawer", "activeDrawerId", "minDrawerSize", "onActiveDrawerChange", "onActiveDrawerResize", "activeDrawerSize"]);
  const [drawersMaxWidth, setDrawersMaxWidth] = (0, import_react24.useState)(toolsWidth);
  const hasDrawers = !!drawers && drawers.length > 0;
  const { refs: drawersRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const drawerRef = (0, import_react24.useRef)(null);
  const { resizeHandle, drawerSize } = use_resize_default(drawerRef, {
    onActiveDrawerResize,
    activeDrawerSize,
    activeDrawer,
    drawersRefs,
    isToolsOpen,
    drawersMaxWidth
  });
  const handleDrawersClick = (id, skipFocusControl) => {
    const newActiveDrawerId = id !== activeDrawerId ? id : null;
    onActiveDrawerChange(newActiveDrawerId);
    !skipFocusControl && focusDrawersButtons();
  };
  let drawersTriggerCount = drawers ? drawers.length : !toolsHide ? 1 : 0;
  if (splitPanelDisplayed && splitPanelPosition === "side") {
    drawersTriggerCount++;
  }
  const hasOpenDrawer = !!activeDrawerId || !toolsHide && isToolsOpen || splitPanelDisplayed && splitPanelPosition === "side" && isSplitPanelOpen;
  const hasDrawerViewportOverlay = isMobile && (!!activeDrawerId || !navigationHide && isNavigationOpen || !toolsHide && isToolsOpen);
  const [layoutContainerQuery, layoutElement] = useContainerQuery((rect) => rect.contentBoxWidth);
  const layoutWidth = layoutContainerQuery !== null && layoutContainerQuery !== void 0 ? layoutContainerQuery : 0;
  const mainElement = (0, import_react24.useRef)(null);
  const [mainOffsetLeft, setMainOffsetLeft] = (0, import_react24.useState)(0);
  const { hasBackgroundOverlap, updateBackgroundOverlapHeight } = useBackgroundOverlap({
    contentHeader: props.contentHeader,
    disableContentHeaderOverlap: props.disableContentHeaderOverlap,
    layoutElement
  });
  (0, import_react24.useLayoutEffect)(function handleMainOffsetLeft() {
    var _a2, _b2;
    setMainOffsetLeft((_b2 = (_a2 = mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) === null || _a2 === void 0 ? void 0 : _a2.offsetLeft) !== null && _b2 !== void 0 ? _b2 : 0);
  }, [layoutWidth, isNavigationOpen, isToolsOpen, splitPanelReportedSize]);
  (0, import_react24.useEffect)(function handleBodyScroll() {
    if (isMobile && (isNavigationOpen || isToolsOpen || !!activeDrawer)) {
      document.body.classList.add(styles_css_default10["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default10["block-body-scroll"]);
    }
    return function cleanup() {
      document.body.classList.remove(styles_css_default10["block-body-scroll"]);
    };
  }, [isMobile, isNavigationOpen, isToolsOpen, activeDrawer]);
  const [notificationsContainerQuery, notificationsElement] = useContainerQuery((rect) => rect.contentBoxHeight);
  const notificationsHeight = notificationsContainerQuery !== null && notificationsContainerQuery !== void 0 ? notificationsContainerQuery : 0;
  const hasNotificationsContent = notificationsHeight > 0;
  let offsetBottom = footerHeight;
  if (splitPanelDisplayed && splitPanelPosition === "bottom") {
    if (isSplitPanelOpen) {
      offsetBottom += splitPanelReportedSize;
    } else {
      offsetBottom += splitPanelReportedHeaderHeight;
    }
  }
  (0, import_react24.useLayoutEffect)(function handleSplitPanelMaxWidth() {
    const contentGapRight = 50;
    const toolsFormOffsetWidth = 120;
    const getPanelOffsetWidth = () => {
      if (drawers) {
        return activeDrawerId ? drawerSize : 0;
      }
      return isToolsOpen ? toolsWidth : 0;
    };
    setSplitPanelMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth - getPanelOffsetWidth());
    setDrawersMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth);
  }, [
    activeDrawerId,
    drawerSize,
    drawers,
    isNavigationOpen,
    isToolsOpen,
    layoutWidth,
    mainOffsetLeft,
    minContentWidth,
    toolsWidth
  ]);
  (0, import_react24.useImperativeHandle)(forwardRef, function createImperativeHandle() {
    return {
      closeNavigationIfNecessary: function() {
        isMobile && handleNavigationClick(false);
      },
      openTools: function() {
        handleToolsClick(true);
      },
      focusToolsClose: () => {
        if (hasDrawers) {
          focusDrawersButtons(true);
        } else {
          focusToolsButtons(true);
        }
      },
      focusActiveDrawer: () => focusDrawersButtons(true),
      focusSplitPanel: () => {
        var _a2;
        return (_a2 = splitPanelRefs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      }
    };
  }, [
    isMobile,
    handleNavigationClick,
    handleToolsClick,
    focusToolsButtons,
    focusDrawersButtons,
    splitPanelRefs.slider,
    hasDrawers
  ]);
  return import_react24.default.createElement(
    AppLayoutInternalsContext.Provider,
    { value: Object.assign(Object.assign({}, props), {
      activeDrawerId,
      contentType,
      drawers,
      drawersAriaLabel: (_e = drawersProps.ariaLabelsWithDrawers) === null || _e === void 0 ? void 0 : _e.drawers,
      drawersOverflowAriaLabel: (_f = drawersProps.ariaLabelsWithDrawers) === null || _f === void 0 ? void 0 : _f.drawersOverflow,
      drawersOverflowWithBadgeAriaLabel: (_g = drawersProps.ariaLabelsWithDrawers) === null || _g === void 0 ? void 0 : _g.drawersOverflowWithBadge,
      drawersRefs,
      drawersMinWidth,
      drawersMaxWidth,
      drawerSize,
      drawerRef,
      resizeHandle,
      drawersTriggerCount,
      headerHeight,
      footerHeight,
      hasDefaultToolsWidth,
      hasDrawerViewportOverlay,
      handleDrawersClick,
      handleNavigationClick,
      handleSplitPanelClick,
      handleSplitPanelPreferencesChange,
      handleSplitPanelResize,
      handleToolsClick,
      hasBackgroundOverlap,
      hasNotificationsContent,
      hasOpenDrawer,
      hasStickyBackground,
      isBackgroundOverlapDisabled: props.disableContentHeaderOverlap || !hasBackgroundOverlap,
      isMobile,
      isNavigationOpen: isNavigationOpen !== null && isNavigationOpen !== void 0 ? isNavigationOpen : false,
      isSplitPanelForcedPosition,
      isSplitPanelOpen,
      isToolsOpen,
      layoutElement,
      layoutWidth,
      loseToolsFocus,
      loseDrawersFocus,
      mainElement,
      mainOffsetLeft,
      maxContentWidth,
      minContentWidth,
      navigationHide,
      navigationRefs,
      notificationsElement,
      notificationsHeight,
      offsetBottom,
      setHasStickyBackground,
      setSplitPanelReportedSize,
      setSplitPanelReportedHeaderHeight,
      splitPanel,
      splitPanelControlId,
      splitPanelDisplayed,
      splitPanelMaxWidth,
      splitPanelMinWidth,
      splitPanelPosition,
      splitPanelPreferences,
      splitPanelReportedSize,
      splitPanelReportedHeaderHeight,
      splitPanelSize,
      splitPanelToggle,
      setSplitPanelToggle,
      splitPanelRefs,
      toolsControlId,
      toolsHide,
      toolsOpen: isToolsOpen,
      toolsWidth,
      toolsRefs,
      __embeddedViewMode
    }) },
    import_react24.default.createElement(
      AppLayoutContext.Provider,
      { value: {
        stickyOffsetBottom: offsetBottom,
        stickyOffsetTop: 0,
        setHasStickyBackground
      } },
      import_react24.default.createElement(DynamicOverlapContext.Provider, { value: updateBackgroundOverlapHeight }, children)
    )
  );
});

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
var import_react25 = __toESM(require_react());
function Background() {
  const { breadcrumbs, hasBackgroundOverlap, hasNotificationsContent, hasStickyBackground, isMobile, stickyNotifications } = useAppLayoutInternals();
  if (!hasNotificationsContent && (!breadcrumbs || isMobile) && !hasBackgroundOverlap) {
    return null;
  }
  return import_react25.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default10.background, getContentHeaderClassName()) },
    import_react25.default.createElement("div", { className: styles_css_default10["scrolling-background"] }),
    !isMobile && hasStickyBackground && import_react25.default.createElement("div", { className: clsx_m_default(styles_css_default10["sticky-background"], {
      [styles_css_default10["has-sticky-notifications"]]: stickyNotifications
    }) })
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/breadcrumbs.js
var import_react26 = __toESM(require_react());
function Breadcrumbs() {
  const { breadcrumbs, hasStickyBackground, isMobile } = useAppLayoutInternals();
  if (isMobile || !breadcrumbs) {
    return null;
  }
  return import_react26.default.createElement("div", { className: clsx_m_default(styles_css_default10.breadcrumbs, styles_css_default5.breadcrumbs, {
    [styles_css_default10["has-sticky-background"]]: hasStickyBackground
  }, getContentHeaderClassName()) }, breadcrumbs);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
var import_react28 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/trigger-button.js
var import_react27 = __toESM(require_react());
function TriggerButton({ ariaLabel, className, iconName, iconSvg, ariaExpanded, ariaControls, onClick, testId, badge, selected = false }, ref) {
  return import_react27.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default10["trigger-wrapper"], shouldRemoveHighContrastHeader() && styles_css_default10["remove-high-contrast-header"]) },
    import_react27.default.createElement(
      "button",
      { "aria-expanded": ariaExpanded, "aria-controls": ariaControls, "aria-haspopup": true, "aria-label": ariaLabel, className: clsx_m_default(styles_css_default10.trigger, {
        [styles_css_default10.selected]: selected,
        [styles_css_default10.badge]: badge
      }, className), onClick, ref, type: "button", "data-testid": testId },
      import_react27.default.createElement(
        "span",
        { className: clsx_m_default(badge && styles_css_default10["trigger-badge-wrapper"]) },
        import_react27.default.createElement(internal_default, { name: iconName, svg: iconSvg })
      )
    ),
    badge && import_react27.default.createElement("div", { className: clsx_m_default(styles_css_default10.dot) })
  );
}
var trigger_button_default = import_react27.default.forwardRef(TriggerButton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
function Drawers() {
  const { disableBodyScroll, drawers, drawersTriggerCount, hasDrawerViewportOverlay, hasOpenDrawer, isNavigationOpen, navigationHide, isMobile } = useAppLayoutInternals();
  const isUnfocusable = hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;
  if (!drawers || drawersTriggerCount === 0) {
    return null;
  }
  return import_react28.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default10["drawers-container"], {
      [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default10["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default10.unfocusable]: isUnfocusable
    }) },
    import_react28.default.createElement(split_panel_default.Side, null),
    import_react28.default.createElement(ActiveDrawer, null),
    !isMobile && import_react28.default.createElement(DesktopTriggers, null)
  );
}
function ActiveDrawer() {
  var _a, _b, _c, _d;
  const { activeDrawerId, ariaLabels, drawers, drawersRefs, handleDrawersClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isNavigationOpen, navigationHide, loseDrawersFocus, resizeHandle, drawerSize, drawersMinWidth, drawersMaxWidth, drawerRef } = useAppLayoutInternals();
  const activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.find((item) => item.id === activeDrawerId)) !== null && _a !== void 0 ? _a : null;
  const computedAriaLabels = {
    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const isHidden = !activeDrawerId;
  const isUnfocusable = isHidden || hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;
  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;
  const toolsContent = (_d = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _d === void 0 ? void 0 : _d.content;
  const size = getLimitedValue(drawersMinWidth, drawerSize, drawersMaxWidth);
  return import_react28.default.createElement(
    "aside",
    { id: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : void 0, "aria-hidden": isHidden, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default10.drawer, {
      [styles_css_default10["is-drawer-open"]]: activeDrawerId,
      [styles_css_default10.unfocusable]: isUnfocusable,
      [styles_css_default5["active-drawer"]]: activeDrawerId,
      [styles_css_default5.tools]: isToolsDrawer
    }), style: Object.assign({}, !isMobile && drawerSize && { [custom_css_properties_default.drawerSize]: `${size}px` }), ref: drawerRef, onBlur: (e) => {
      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
        loseDrawersFocus();
      }
    } },
    !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && resizeHandle,
    import_react28.default.createElement(
      "div",
      { className: styles_css_default10["drawer-content-container"] },
      import_react28.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default10["drawer-close-button"]) },
        import_react28.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
          [styles_css_default5["active-drawer-close-button"]]: activeDrawerId,
          [styles_css_default5["tools-close"]]: isToolsDrawer
        }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => {
          handleDrawersClick(activeDrawerId);
          handleToolsClick(false);
        }, ref: drawersRefs.close, variant: "icon" })
      ),
      toolsContent && import_react28.default.createElement("div", { className: clsx_m_default(styles_css_default10["drawer-content"], activeDrawerId !== TOOLS_DRAWER_ID && styles_css_default10["drawer-content-hidden"]) }, toolsContent),
      activeDrawerId !== TOOLS_DRAWER_ID && import_react28.default.createElement("div", { className: styles_css_default10["drawer-content"] }, activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))
    )
  );
}
function DesktopTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, drawersTriggerCount, handleDrawersClick, handleSplitPanelClick, hasOpenDrawer, isSplitPanelOpen, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, splitPanelReportedHeaderHeight, splitPanelReportedSize } = useAppLayoutInternals();
  const hasMultipleTriggers = drawersTriggerCount > 1;
  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === "side";
  const previousActiveDrawerId = (0, import_react28.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const splitPanelHeight = isSplitPanelOpen && splitPanelPosition === "bottom" ? splitPanelReportedSize : splitPanelReportedHeaderHeight;
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = 48;
      const overflowSpot = activeDrawerId && isSplitPanelOpen ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5 : (containerHeight - splitPanelHeight) / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      let splitPanelItem = 0;
      if (hasSplitPanel && splitPanelToggle.displayed) {
        splitPanelItem = 1;
      }
      return index - splitPanelItem;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers !== null && drawers !== void 0 ? drawers : void 0, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react28.default.createElement(
    "aside",
    { className: clsx_m_default(styles_css_default10["drawers-desktop-triggers-container"], {
      [styles_css_default10["has-multiple-triggers"]]: hasMultipleTriggers,
      [styles_css_default10["has-open-drawer"]]: hasOpenDrawer
    }), "aria-label": drawersAriaLabel, ref: triggersContainerRef, role: "region" },
    import_react28.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default10["drawers-trigger-content"], {
        [styles_css_default10["has-multiple-triggers"]]: hasMultipleTriggers,
        [styles_css_default10["has-open-drawer"]]: hasOpenDrawer
      }), role: "toolbar", "aria-orientation": "vertical" },
      visibleItems.map((item) => {
        var _a;
        return import_react28.default.createElement(trigger_button_default, { ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: item.id === activeDrawerId, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default5["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default5["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => handleDrawersClick(item.id), ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : void 0, selected: item.id === activeDrawerId, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}` });
      }),
      overflowItems.length > 0 && import_react28.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, customTriggerBuilder: ({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => import_react28.default.createElement(trigger_button_default, { ref: triggerRef, ariaLabel, ariaExpanded, badge: overflowMenuHasBadge, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default5["drawers-trigger"], testUtilsClass), iconName: "ellipsis", onClick }), onItemClick: ({ detail }) => {
        handleDrawersClick(detail.id);
      } }),
      hasSplitPanel && splitPanelToggle.displayed && import_react28.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default8["open-button"]), iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, ref: splitPanelRefs.toggle })
    )
  );
}
function MobileTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, handleDrawersClick, hasDrawerViewportOverlay } = useAppLayoutInternals();
  const previousActiveDrawerId = (0, import_react28.useRef)(activeDrawerId);
  if (!drawers) {
    return null;
  }
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const { visibleItems, overflowItems } = splitItems(drawers, 2, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react28.default.createElement(
    "aside",
    { "aria-hidden": hasDrawerViewportOverlay, className: clsx_m_default({
      [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
    }), "aria-label": drawersAriaLabel, role: "region" },
    import_react28.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default10["drawers-mobile-triggers-container"]), role: "toolbar", "aria-orientation": "horizontal" },
      visibleItems.map((item) => {
        var _a;
        return import_react28.default.createElement(InternalButton, { ariaExpanded: item.id === activeDrawerId, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default5["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default5["tools-toggle"]), disabled: hasDrawerViewportOverlay, ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : void 0, formAction: "none", iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, badge: item.badge, key: item.id, onClick: () => handleDrawersClick(item.id), variant: "icon", __nativeAttributes: { "aria-haspopup": true, "data-testid": `awsui-app-layout-trigger-${item.id}` } });
      }),
      overflowItems.length > 0 && import_react28.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, onItemClick: ({ detail }) => handleDrawersClick(detail.id) })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/header.js
var import_react29 = __toESM(require_react());
function Header() {
  const { breadcrumbs, contentHeader, hasDrawerViewportOverlay, hasNotificationsContent } = useAppLayoutInternals();
  if (!contentHeader) {
    return null;
  }
  return import_react29.default.createElement("header", { className: clsx_m_default(styles_css_default10.content, {
    [styles_css_default10["has-breadcrumbs"]]: breadcrumbs,
    [styles_css_default10["has-notifications-content"]]: hasNotificationsContent,
    [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
  }, getContentHeaderClassName()) }, contentHeader);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/layout.js
var import_react30 = __toESM(require_react());
function Layout({ children }) {
  const { breadcrumbs, contentHeader, contentType, disableBodyScroll, disableContentPaddings, drawersTriggerCount, footerHeight, hasNotificationsContent, hasStickyBackground, hasOpenDrawer, headerHeight, isBackgroundOverlapDisabled, isMobile, isNavigationOpen, layoutElement, layoutWidth, mainOffsetLeft, maxContentWidth, minContentWidth, navigationHide, notificationsHeight, __embeddedViewMode, splitPanelPosition, stickyNotifications, splitPanelDisplayed } = useAppLayoutInternals();
  const contentFirstChild = getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile);
  const hasContentGapLeft = isNavigationOpen || navigationHide;
  const hasContentGapRight = drawersTriggerCount === 0 || hasOpenDrawer;
  return import_react30.default.createElement("main", { className: clsx_m_default(styles_css_default10.layout, styles_css_default10[`content-first-child-${contentFirstChild}`], styles_css_default10[`content-type-${contentType}`], styles_css_default10[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
    [styles_css_default5["disable-body-scroll-root"]]: disableBodyScroll,
    [styles_css_default10["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default10["has-breadcrumbs"]]: breadcrumbs && !isMobile,
    [styles_css_default10["has-content-gap-left"]]: hasContentGapLeft,
    [styles_css_default10["has-content-gap-right"]]: hasContentGapRight,
    [styles_css_default10["has-header"]]: contentHeader,
    [styles_css_default10["has-max-content-width"]]: maxContentWidth && maxContentWidth > 0,
    [styles_css_default10["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default10["has-sticky-background"]]: hasStickyBackground,
    [styles_css_default10["has-sticky-notifications"]]: stickyNotifications && hasNotificationsContent,
    [styles_css_default10["is-overlap-disabled"]]: isBackgroundOverlapDisabled,
    [styles_css_default10["is-hide-mobile-toolbar"]]: __embeddedViewMode
  }, styles_css_default5.root), ref: layoutElement, style: Object.assign(Object.assign(Object.assign({ [custom_css_properties_default.headerHeight]: `${headerHeight}px`, [custom_css_properties_default.footerHeight]: `${footerHeight}px`, [custom_css_properties_default.layoutWidth]: `${layoutWidth}px`, [custom_css_properties_default.mainOffsetLeft]: `${mainOffsetLeft}px` }, maxContentWidth && { [custom_css_properties_default.maxContentWidth]: `${maxContentWidth}px` }), minContentWidth && { [custom_css_properties_default.minContentWidth]: `${minContentWidth}px` }), { [custom_css_properties_default.notificationsHeight]: `${notificationsHeight}px` }) }, children);
}
function getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile) {
  let contentFirstChild = "main";
  if (hasNotificationsContent) {
    contentFirstChild = "notifications";
  } else if (breadcrumbs && !isMobile) {
    contentFirstChild = "breadcrumbs";
  } else if (contentHeader) {
    contentFirstChild = "header";
  }
  return contentFirstChild;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/main.js
var import_react31 = __toESM(require_react());
function Main() {
  const { content, disableContentPaddings, footerHeight, hasDrawerViewportOverlay, isNavigationOpen, isSplitPanelOpen, isToolsOpen, mainElement, offsetBottom, splitPanelDisplayed, splitPanelPosition, activeDrawerId } = useAppLayoutInternals();
  const splitPanelHeight = offsetBottom - footerHeight;
  return import_react31.default.createElement("div", { className: clsx_m_default(styles_css_default10.container, styles_css_default10[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default10["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default10["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default10["is-navigation-open"]]: isNavigationOpen,
    [styles_css_default10["is-tools-open"]]: isToolsOpen,
    [styles_css_default10["has-active-drawer"]]: !!activeDrawerId,
    [styles_css_default10["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
  }, styles_css_default5.content), ref: mainElement, style: {
    [custom_css_properties_default.splitPanelHeight]: `${splitPanelHeight}px`
  } }, content);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/mobile-toolbar.js
var import_react32 = __toESM(require_react());
function MobileToolbar2() {
  var _a, _b, _c;
  const { ariaLabels, breadcrumbs, drawers, handleNavigationClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isNavigationOpen, __embeddedViewMode, isToolsOpen, navigationHide, navigationRefs, toolsHide, toolsRefs } = useAppLayoutInternals();
  if (!isMobile || __embeddedViewMode || navigationHide && !breadcrumbs && toolsHide && (!drawers || drawers.length === 0)) {
    return null;
  }
  return import_react32.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default10["mobile-toolbar"], [styles_css_default5["mobile-bar"]], {
      [styles_css_default10["has-breadcrumbs"]]: breadcrumbs,
      [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
    }, styles_css_default5["mobile-bar"], getContentHeaderClassName(), shouldRemoveHighContrastHeader() && styles_css_default10["remove-high-contrast-header"]) },
    !navigationHide && import_react32.default.createElement(
      "nav",
      { "aria-hidden": isNavigationOpen, className: clsx_m_default(styles_css_default10["mobile-toolbar-nav"], { [styles_css_default5["drawer-closed"]]: !isNavigationOpen }) },
      import_react32.default.createElement(InternalButton, { ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a !== void 0 ? _a : void 0, ariaExpanded: isNavigationOpen ? void 0 : false, iconName: "menu", formAction: "none", onClick: () => handleNavigationClick(true), variant: "icon", className: styles_css_default5["navigation-toggle"], ref: navigationRefs.toggle, disabled: hasDrawerViewportOverlay, __nativeAttributes: { "aria-haspopup": isNavigationOpen ? void 0 : true } })
    ),
    breadcrumbs && import_react32.default.createElement("div", { className: clsx_m_default(styles_css_default10["mobile-toolbar-breadcrumbs"], styles_css_default5.breadcrumbs) }, breadcrumbs),
    drawers ? import_react32.default.createElement(MobileTriggers, null) : !toolsHide && import_react32.default.createElement(
      "aside",
      { "aria-hidden": isToolsOpen, "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default10["mobile-toolbar-tools"], { [styles_css_default5["drawer-closed"]]: !isToolsOpen }) },
      import_react32.default.createElement(InternalButton, { className: styles_css_default5["tools-toggle"], ariaExpanded: isToolsOpen, disabled: hasDrawerViewportOverlay, ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _c !== void 0 ? _c : void 0, iconName: "status-info", formAction: "none", onClick: () => handleToolsClick(true), variant: "icon", ref: toolsRefs.toggle, __nativeAttributes: { "aria-haspopup": true } })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/navigation.js
var import_react33 = __toESM(require_react());
function Navigation() {
  const { ariaLabels, disableBodyScroll, handleNavigationClick, hasDrawerViewportOverlay, isMobile, isNavigationOpen, isToolsOpen, navigation, navigationHide, navigationRefs, navigationWidth, toolsHide } = useAppLayoutInternals();
  if (navigationHide) {
    return null;
  }
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink && isMobile) {
      handleNavigationClick(false);
    }
  };
  const isUnfocusable = hasDrawerViewportOverlay && (!isNavigationOpen || isToolsOpen && !toolsHide);
  return import_react33.default.createElement(Transition, { in: isNavigationOpen }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react33.default.createElement(
      "div",
      {
        className: clsx_m_default(styles_css_default10["navigation-container"], {
          [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
          [styles_css_default10.unfocusable]: isUnfocusable,
          [styles_css_default5["drawer-closed"]]: !isNavigationOpen
        }),
        // Overwrite the default nav width (depends on breakpoints) only when the `navigationWidth` property is set.
        style: Object.assign({}, navigationWidth && { [custom_css_properties_default.navigationWidth]: `${navigationWidth}px` })
      },
      !isMobile && import_react33.default.createElement(
        "nav",
        { "aria-hidden": isMobile || isNavigationOpen ? true : false, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default10["show-navigation"], {
          [styles_css_default10.animating]: state === "exiting",
          [styles_css_default10["is-navigation-open"]]: isNavigationOpen
        }), ref: state === "exiting" ? transitionEventsRef : void 0 },
        import_react33.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle, ariaExpanded: isNavigationOpen ? void 0 : false, iconName: "menu", className: styles_css_default5["navigation-toggle"], onClick: () => handleNavigationClick(true), ref: navigationRefs.toggle })
      ),
      import_react33.default.createElement(
        "nav",
        { "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default10.navigation, {
          [styles_css_default10.animating]: state === "entering",
          [styles_css_default10["is-navigation-open"]]: isNavigationOpen
        }, styles_css_default5.navigation), ref: state !== "exiting" ? transitionEventsRef : void 0, "aria-hidden": !isNavigationOpen, onClick: (event) => {
          onNavigationClick && onNavigationClick(event);
        } },
        import_react33.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default10["animated-content"]) },
          import_react33.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default10["hide-navigation"]) },
            import_react33.default.createElement(InternalButton, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _c !== void 0 ? _c : void 0, iconName: isMobile ? "close" : "angle-left", onClick: () => handleNavigationClick(false), variant: "icon", formAction: "none", className: styles_css_default5["navigation-close"], ref: navigationRefs.close })
          ),
          navigation
        )
      )
    );
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/notifications.js
var import_react34 = __toESM(require_react());
function Notifications2() {
  var _a;
  const { ariaLabels, hasDrawerViewportOverlay, notifications, notificationsElement, stickyNotifications } = useAppLayoutInternals();
  if (!notifications) {
    return null;
  }
  return import_react34.default.createElement(
    "div",
    { role: "region", "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default10.notifications, {
      [styles_css_default10["sticky-notifications"]]: stickyNotifications,
      [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
    }, styles_css_default5.notifications, getContentHeaderClassName()) },
    import_react34.default.createElement("div", { ref: notificationsElement }, notifications)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/tools.js
var import_react35 = __toESM(require_react());
function Tools({ children }) {
  const { ariaLabels, disableBodyScroll, drawers, handleSplitPanelClick, handleToolsClick, hasDefaultToolsWidth, hasDrawerViewportOverlay, isMobile, isSplitPanelOpen, isToolsOpen, loseToolsFocus, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, tools, toolsControlId, toolsHide, toolsRefs, toolsWidth } = useAppLayoutInternals();
  const hasSplitPanel = !!splitPanel && getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition);
  const hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);
  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);
  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;
  if (toolsHide && !hasSplitPanel || drawers) {
    return null;
  }
  return import_react35.default.createElement(Transition, { in: isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react35.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default10["tools-container"], {
        [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default10.unfocusable]: isUnfocusable,
        [styles_css_default5["drawer-closed"]]: !isToolsOpen
      }), style: {
        [custom_css_properties_default.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,
        // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.
        [custom_css_properties_default.toolsWidth]: hasDefaultToolsWidth ? "" : `${toolsWidth}px`
      }, onBlur: (e) => {
        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
          loseToolsFocus();
        }
      } },
      children,
      !toolsHide && import_react35.default.createElement(
        "aside",
        { id: toolsControlId, "aria-hidden": !isToolsOpen ? true : false, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default10.tools, {
          [styles_css_default10.animating]: state === "entering",
          [styles_css_default10["has-tools-form-persistence"]]: hasToolsFormPersistence,
          [styles_css_default10["is-tools-open"]]: isToolsOpen
        }, styles_css_default5.tools), ref: state !== "exiting" ? transitionEventsRef : void 0 },
        import_react35.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default10["animated-content"]) },
          import_react35.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default10["hide-tools"]) },
            import_react35.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _b !== void 0 ? _b : void 0, iconName: isMobile ? "close" : "angle-right", onClick: () => handleToolsClick(false), variant: "icon", formAction: "none", className: styles_css_default5["tools-close"], ref: toolsRefs.close })
          ),
          tools
        )
      ),
      !isMobile && import_react35.default.createElement(
        "aside",
        { "aria-hidden": !hasToolsForm ? true : false, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : void 0, className: clsx_m_default(styles_css_default10["show-tools"], {
          [styles_css_default10.animating]: state === "exiting",
          [styles_css_default10["has-tools-form"]]: hasToolsForm,
          [styles_css_default10["has-tools-form-persistence"]]: hasToolsFormPersistence
        }), ref: state === "exiting" ? transitionEventsRef : void 0, "data-testid": "side-split-panel-drawer" },
        !toolsHide && import_react35.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, ariaControls: toolsControlId, ariaExpanded: isToolsOpen, iconName: "status-info", onClick: () => handleToolsClick(!isToolsOpen), selected: hasSplitPanel && isToolsOpen, className: styles_css_default5["tools-toggle"], ref: toolsRefs.toggle }),
        hasSplitPanel && splitPanelToggle.displayed && import_react35.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, className: styles_css_default8["open-button"], ref: splitPanelRefs.toggle })
      )
    );
  });
}
function getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition) {
  return splitPanelDisplayed && splitPanelPosition === "side" ? true : false;
}
function getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsForm = false;
  if (!isMobile) {
    if (hasSplitPanel && !toolsHide) {
      hasToolsForm = true;
    }
    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {
      hasToolsForm = true;
    }
    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {
      hasToolsForm = true;
    }
  }
  return hasToolsForm;
}
function getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsFormPersistence = false;
  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {
    hasToolsFormPersistence = true;
  }
  return hasToolsFormPersistence;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var AppLayoutWithRef = import_react36.default.forwardRef(function AppLayout(props, ref) {
  return import_react36.default.createElement(
    AppLayoutInternalsProvider,
    Object.assign({}, props, { ref }),
    import_react36.default.createElement(
      split_panel_default,
      null,
      import_react36.default.createElement(
        Layout,
        null,
        import_react36.default.createElement(Background, null),
        import_react36.default.createElement(Navigation, null),
        import_react36.default.createElement(MobileToolbar2, null),
        import_react36.default.createElement(Notifications2, null),
        import_react36.default.createElement(Breadcrumbs, null),
        import_react36.default.createElement(Header, null),
        import_react36.default.createElement(Main, null),
        import_react36.default.createElement(split_panel_default.Bottom, null),
        import_react36.default.createElement(
          Tools,
          null,
          import_react36.default.createElement(split_panel_default.Side, null)
        ),
        import_react36.default.createElement(Drawers, null)
      )
    )
  );
});
var visual_refresh_default = AppLayoutWithRef;

// node_modules/@cloudscape-design/components/app-layout/implementation.js
var AppLayoutImplementation = import_react37.default.forwardRef((props, ref) => {
  const isRefresh = useVisualRefresh();
  return isRefresh ? import_react37.default.createElement(visual_refresh_default, Object.assign({ ref }, props)) : import_react37.default.createElement(classic_default, Object.assign({ ref }, props));
});

// node_modules/@cloudscape-design/components/app-layout/widget.js
function createWidgetizedAppLayout(AppLayoutLoader) {
  return import_react38.default.forwardRef((props, ref) => {
    const isRefresh = useVisualRefresh();
    if (isRefresh && getGlobalFlag("appLayoutWidget") && AppLayoutLoader) {
      return import_react38.default.createElement(AppLayoutLoader, Object.assign({ ref }, props));
    }
    return import_react38.default.createElement(AppLayoutImplementation, Object.assign({ ref }, props));
  });
}

// node_modules/@cloudscape-design/components/app-layout/internal.js
var AppLayoutInternal = createWidgetizedAppLayout();

// node_modules/@cloudscape-design/components/app-layout/index.js
var AppLayout2 = import_react39.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
  var { contentType = "default", headerSelector = "#b #h", footerSelector = "#b #f" } = _a, rest = __rest(_a, ["contentType", "headerSelector", "footerSelector"]);
  const { __internalRootRef } = useBaseComponent("AppLayout", {
    props: {
      contentType,
      disableContentPaddings: rest.disableContentPaddings,
      disableBodyScroll: rest.disableBodyScroll,
      navigationWidth: rest.navigationWidth,
      navigationHide: rest.navigationHide,
      toolsHide: rest.toolsHide,
      toolsWidth: rest.toolsWidth,
      maxContentWidth: rest.maxContentWidth,
      minContentWidth: rest.minContentWidth,
      stickyNotifications: rest.stickyNotifications,
      disableContentHeaderOverlap: rest.disableContentHeaderOverlap
    }
  });
  const i18n = useInternalI18n("app-layout");
  const ariaLabels = {
    navigation: i18n("ariaLabels.navigation", (_b = rest.ariaLabels) === null || _b === void 0 ? void 0 : _b.navigation),
    navigationClose: i18n("ariaLabels.navigationClose", (_c = rest.ariaLabels) === null || _c === void 0 ? void 0 : _c.navigationClose),
    navigationToggle: i18n("ariaLabels.navigationToggle", (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigationToggle),
    notifications: i18n("ariaLabels.notifications", (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.notifications),
    tools: i18n("ariaLabels.tools", (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.tools),
    toolsClose: i18n("ariaLabels.toolsClose", (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.toolsClose),
    toolsToggle: i18n("ariaLabels.toolsToggle", (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.toolsToggle),
    drawers: i18n("ariaLabels.drawers", (_j = rest.ariaLabels) === null || _j === void 0 ? void 0 : _j.drawers),
    drawersOverflow: i18n("ariaLabels.drawersOverflow", (_k = rest.ariaLabels) === null || _k === void 0 ? void 0 : _k.drawersOverflow),
    drawersOverflowWithBadge: i18n("ariaLabels.drawersOverflowWithBadge", (_l = rest.ariaLabels) === null || _l === void 0 ? void 0 : _l.drawersOverflowWithBadge)
  };
  const props = Object.assign(Object.assign({ contentType, headerSelector, footerSelector }, rest), { ariaLabels });
  const baseProps = getBaseProps(rest);
  return import_react39.default.createElement(
    "div",
    Object.assign({ ref: __internalRootRef }, baseProps),
    import_react39.default.createElement(AppLayoutInternal, Object.assign({ ref }, props))
  );
});
applyDisplayName(AppLayout2, "AppLayout");
var app_layout_default = AppLayout2;

export {
  usePointerEvents,
  useKeyboardEvents,
  resize_handler_default,
  styles_css_default8 as styles_css_default,
  useSplitPanelContext,
  app_layout_default
};
//# sourceMappingURL=chunk-EJGSRKRH.js.map

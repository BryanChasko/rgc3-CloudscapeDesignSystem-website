import {
  arrow_default,
  useHiddenDescription
} from "./chunk-RO2Y45RE.js";
import {
  PopoverBody,
  PopoverContainer
} from "./chunk-7XRAASIL.js";
import {
  dropdown_default,
  options_list_default,
  useDropdownContext,
  useOpenState
} from "./chunk-SJ7LIZY2.js";
import {
  usePortalModeClasses
} from "./chunk-EYMPTN4Q.js";
import {
  Portal
} from "./chunk-TT4W3QW4.js";
import {
  useMobile
} from "./chunk-4K34KLGB.js";
import {
  InternalBox
} from "./chunk-7DUUH5PQ.js";
import {
  InternalButton
} from "./chunk-DPGYCRGF.js";
import {
  checkSafeUrl
} from "./chunk-VBS6KN2M.js";
import {
  useForwardFocus
} from "./chunk-YTRJQH4M.js";
import {
  fireCancelableEvent,
  isPlainLeftClick
} from "./chunk-T3BYYNEM.js";
import {
  useFunnel
} from "./chunk-GC32QG33.js";
import {
  useUniqueId
} from "./chunk-3TE4OIE4.js";
import {
  isDevelopment
} from "./chunk-TIE5RIC4.js";
import {
  internal_default
} from "./chunk-NUCDU4ZC.js";
import {
  KeyCode,
  __rest,
  clsx_m_default,
  getBaseProps,
  useReducedMotion,
  useVisualRefresh,
  warnOnce
} from "./chunk-CHBULPAM.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/button-dropdown/styles.scoped.css";
var styles_css_default = {
  "button-dropdown": "awsui_button-dropdown_sne0l_17rq9_99",
  "items-list-container": "awsui_items-list-container_sne0l_17rq9_103",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_sne0l_17rq9_1",
  "rotate-up": "awsui_rotate-up_sne0l_17rq9_122",
  "rotate-down": "awsui_rotate-down_sne0l_17rq9_137",
  "header": "awsui_header_sne0l_17rq9_152",
  "title": "awsui_title_sne0l_17rq9_163",
  "description": "awsui_description_sne0l_17rq9_164",
  "split-trigger-wrapper": "awsui_split-trigger-wrapper_sne0l_17rq9_168",
  "trigger-item": "awsui_trigger-item_sne0l_17rq9_171",
  "trigger-button": "awsui_trigger-button_sne0l_17rq9_174",
  "visual-refresh": "awsui_visual-refresh_sne0l_17rq9_185",
  "split-trigger": "awsui_split-trigger_sne0l_17rq9_168",
  "dropdown-trigger": "awsui_dropdown-trigger_sne0l_17rq9_193",
  "test-utils-button-trigger": "awsui_test-utils-button-trigger_sne0l_17rq9_197"
};

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/utils.js
var isItemGroup = (item) => item && item.items !== void 0;
var isLinkItem = (item) => item && item.href !== void 0;
var getItemTarget = (item) => item.external ? "_blank" : void 0;
function indexIncludes(source, target) {
  for (let index = 0; index < source.length; index++) {
    if (source[index] !== target[index]) {
      return false;
    }
  }
  return true;
}
function indexEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }
  for (let index = 0; index < left.length; index++) {
    if (left[index] !== right[index]) {
      return false;
    }
  }
  return true;
}

// node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.scoped.css";
var styles_css_default2 = {
  "item-element": "awsui_item-element_93a1u_3lrfz_99",
  "disabled": "awsui_disabled_93a1u_3lrfz_111",
  "show-divider": "awsui_show-divider_93a1u_3lrfz_118",
  "highlighted": "awsui_highlighted_93a1u_3lrfz_121",
  "variant-icon": "awsui_variant-icon_93a1u_3lrfz_125",
  "variant-inline-icon": "awsui_variant-inline-icon_93a1u_3lrfz_125",
  "variant-normal": "awsui_variant-normal_93a1u_3lrfz_125",
  "variant-primary": "awsui_variant-primary_93a1u_3lrfz_125",
  "is-focused": "awsui_is-focused_93a1u_3lrfz_138",
  "variant-navigation": "awsui_variant-navigation_93a1u_3lrfz_142",
  "first": "awsui_first_93a1u_3lrfz_145",
  "has-category-header": "awsui_has-category-header_93a1u_3lrfz_145",
  "last": "awsui_last_93a1u_3lrfz_148",
  "menu-item": "awsui_menu-item_93a1u_3lrfz_158",
  "icon": "awsui_icon_93a1u_3lrfz_176",
  "external-icon": "awsui_external-icon_93a1u_3lrfz_181"
};

// node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var import_react = __toESM(require_react());
var DEFAULT_OPEN_TIMEOUT_IN_MS = 120;
function Tooltip({ children, content, position = "right" }) {
  const ref = (0, import_react.useRef)(null);
  const isReducedMotion = useReducedMotion(ref);
  const { open, triggerProps } = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS);
  const portalClasses = usePortalModeClasses(ref);
  return import_react.default.createElement(
    "span",
    Object.assign({ ref }, triggerProps),
    children,
    open && import_react.default.createElement(
      Portal,
      null,
      import_react.default.createElement(
        "span",
        { className: portalClasses },
        import_react.default.createElement(
          PopoverContainer,
          { size: "small", fixedWidth: false, position, trackRef: ref, arrow: (position2) => import_react.default.createElement(arrow_default, { position: position2 }), renderWithPortal: true, zIndex: 7e3 },
          import_react.default.createElement(
            PopoverBody,
            { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
            }, overflowVisible: "both" },
            import_react.default.createElement("span", { "data-testid": "button-dropdown-disabled-reason", role: "tooltip" }, content)
          )
        )
      )
    )
  );
}
function useTooltipOpen(timeout) {
  const handle = (0, import_react.useRef)();
  const [isOpen, setIsOpen] = (0, import_react.useState)(false);
  const close = () => {
    clearTimeout(handle.current);
    setIsOpen(false);
  };
  const open = () => setIsOpen(true);
  const openDelayed = () => {
    handle.current = setTimeout(open, timeout);
  };
  const onKeyDown = (e) => {
    if (isOpen && isEscape(e.key)) {
      e.preventDefault();
      e.stopPropagation();
      close();
    }
  };
  const onFocus = openDelayed;
  const onBlur = close;
  return {
    open: isOpen,
    triggerProps: {
      onBlur,
      onFocus,
      onKeyDown
    }
  };
}
var isEscape = (key) => key === "Escape" || key === "Esc";

// node_modules/@cloudscape-design/components/button-dropdown/utils/menu-item.js
var getMenuItemProps = ({ disabled, parent, expanded }) => ({
  role: "menuitem",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-haspopup": parent ? "true" : void 0,
  "aria-expanded": expanded ? "true" : parent ? "false" : void 0
});

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var ItemElement = ({ item, disabled, onItemActivate, highlighted, highlightItem, first = false, lastInSection, showDivider, hasCategoryHeader, isKeyboardHighlighted = false, variant = "normal" }) => {
  const isLink = isLinkItem(item);
  const onClick = (event) => {
    event.stopPropagation();
    if (!isLink) {
      event.preventDefault();
    }
    if (!disabled) {
      onItemActivate(item, event);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  return import_react2.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default2["item-element"], styles_css_default2[`variant-${variant}`], {
      [styles_css_default2.highlighted]: highlighted,
      [styles_css_default2.disabled]: disabled,
      [styles_css_default2.first]: first,
      [styles_css_default2.last]: lastInSection,
      [styles_css_default2["has-category-header"]]: hasCategoryHeader,
      [styles_css_default2["show-divider"]]: showDivider,
      [styles_css_default2["is-focused"]]: isKeyboardHighlighted
    }), role: "presentation", "data-testid": item.id, "data-description": item.description, onClick, onMouseEnter: onHover, onTouchStart: onHover },
    import_react2.default.createElement(MenuItem, { item, disabled, highlighted })
  );
};
function MenuItem({ item, disabled, highlighted }) {
  const menuItemRef = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (highlighted && menuItemRef.current) {
      menuItemRef.current.focus();
    }
  }, [highlighted]);
  const isDisabledWithReason = disabled && item.disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const menuItemProps = Object.assign(Object.assign({
    className: styles_css_default2["menu-item"],
    lang: item.lang,
    ref: menuItemRef,
    // We are using the roving tabindex technique to manage the focus state of the dropdown.
    // The current element will always have tabindex=0 which means that it can be tabbed to,
    // while all other items have tabindex=-1 so we can focus them when necessary.
    tabIndex: highlighted ? 0 : -1
  }, getMenuItemProps({ disabled })), isDisabledWithReason ? targetProps : {});
  const menuItem = isLinkItem(item) ? import_react2.default.createElement(
    "a",
    Object.assign({}, menuItemProps, { href: !disabled ? item.href : void 0, target: getItemTarget(item), rel: item.external ? "noopener noreferrer" : void 0 }),
    import_react2.default.createElement(MenuItemContent, { item, disabled })
  ) : import_react2.default.createElement(
    "span",
    Object.assign({}, menuItemProps),
    import_react2.default.createElement(MenuItemContent, { item, disabled })
  );
  const { position } = useDropdownContext();
  const tooltipPosition = position === "bottom-left" || position === "top-left" ? "left" : "right";
  return isDisabledWithReason ? import_react2.default.createElement(
    Tooltip,
    { content: item.disabledReason, position: tooltipPosition },
    menuItem,
    descriptionEl
  ) : menuItem;
}
var MenuItemContent = ({ item, disabled }) => {
  const hasIcon = !!(item.iconName || item.iconUrl || item.iconSvg);
  const hasExternal = isLinkItem(item) && item.external;
  return import_react2.default.createElement(
    import_react2.default.Fragment,
    null,
    hasIcon && import_react2.default.createElement(MenuItemIcon, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt, badge: item.badge }),
    " ",
    item.text,
    " ",
    hasExternal && import_react2.default.createElement(ExternalIcon, { disabled, ariaLabel: item.externalIconAriaLabel })
  );
};
var MenuItemIcon = (props) => import_react2.default.createElement(
  "span",
  { className: styles_css_default2.icon },
  import_react2.default.createElement(internal_default, Object.assign({}, props))
);
var ExternalIcon = ({ disabled, ariaLabel }) => {
  const icon = import_react2.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "external" });
  return import_react2.default.createElement("span", { className: styles_css_default2["external-icon"], role: ariaLabel ? "img" : void 0, "aria-label": ariaLabel }, icon);
};
var item_element_default = ItemElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.scoped.css";
var styles_css_default3 = {
  "header": "awsui_header_16mm3_186aw_99",
  "disabled": "awsui_disabled_16mm3_186aw_116",
  "expandable-header": "awsui_expandable-header_16mm3_186aw_120",
  "rolled-down": "awsui_rolled-down_16mm3_186aw_131",
  "highlighted": "awsui_highlighted_16mm3_186aw_134",
  "is-focused": "awsui_is-focused_16mm3_186aw_152",
  "variant-navigation": "awsui_variant-navigation_16mm3_186aw_156",
  "category": "awsui_category_16mm3_186aw_168",
  "expandable": "awsui_expandable_16mm3_186aw_120",
  "expand-icon": "awsui_expand-icon_16mm3_186aw_190",
  "expand-icon-up": "awsui_expand-icon-up_16mm3_186aw_197",
  "expand-icon-right": "awsui_expand-icon-right_16mm3_186aw_200",
  "items-list-container": "awsui_items-list-container_16mm3_186aw_214",
  "in-dropdown": "awsui_in-dropdown_16mm3_186aw_223"
};

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var ExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, expandToViewport, variant }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react3.default.useRef(null);
  const ref = (0, import_react3.useRef)(null);
  (0, import_react3.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (event) => {
    var _a;
    if (!disabled) {
      event.preventDefault();
      onGroupToggle(item, event);
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react3.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default3.header, styles_css_default3["expandable-header"], styles_css_default3[`variant-${variant}`], {
        [styles_css_default3.disabled]: disabled,
        [styles_css_default3.highlighted]: highlighted,
        [styles_css_default3["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, expanded, disabled }), isDisabledWithReason ? targetProps : {}),
    item.text,
    import_react3.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default3["expand-icon"], styles_css_default3["expand-icon-right"]) },
      import_react3.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react3.default.createElement(
      Tooltip,
      { content: item.disabledReason },
      trigger,
      descriptionEl
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react3.default.createElement(dropdown_default, { open: expanded, stretchWidth: false, interior: true, expandToViewport, trigger }, item.items && expanded && import_react3.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default3["items-list-container"], styles_css_default3["in-dropdown"]) },
      import_react3.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, variant })
    ));
  }
  return import_react3.default.createElement("li", { className: clsx_m_default(styles_css_default3.category, styles_css_default3[`variant-${variant}`], styles_css_default3.expandable, {
    [styles_css_default3.expanded]: expanded,
    [styles_css_default3.disabled]: disabled,
    [styles_css_default3.highlighted]: highlighted
  }), role: "presentation", "data-testid": item.id, ref, onClick, onMouseEnter: onHover, onTouchStart: onHover }, content);
};
var expandable_category_element_default = ExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var import_react4 = __toESM(require_react());
var CategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant }) => {
  return import_react4.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default3.category, styles_css_default3[`variant-${variant}`], disabled && styles_css_default3.disabled), role: "presentation", "aria-disabled": disabled ? "true" : void 0 },
    item.text && import_react4.default.createElement("p", { className: clsx_m_default(styles_css_default3.header, { [styles_css_default3.disabled]: disabled }), "aria-hidden": "true" }, item.text),
    import_react4.default.createElement("ul", { className: clsx_m_default(styles_css_default3["items-list-container"]), role: "group", "aria-label": item.text }, item.items && import_react4.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled: disabled, hasCategoryHeader: !!item.text, variant }))
  );
};
var category_element_default = CategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.scoped.css";
var styles_css_default4 = {
  "root": "awsui_root_14cnr_1ev1z_99",
  "trigger": "awsui_trigger_14cnr_1ev1z_136",
  "dropdown": "awsui_dropdown_14cnr_1ev1z_139",
  "nowrap": "awsui_nowrap_14cnr_1ev1z_150",
  "open": "awsui_open_14cnr_1ev1z_153"
};

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var MobileExpandableGroup = ({ children, trigger, open }) => {
  return import_react5.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default4.root) },
    import_react5.default.createElement("div", { className: styles_css_default4.trigger }, trigger),
    import_react5.default.createElement("div", { className: clsx_m_default(styles_css_default4.dropdown, { [styles_css_default4.open]: open }), "data-open": open }, children)
  );
};
var mobile_expandable_group_default = MobileExpandableGroup;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var MobileExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react6.default.useRef(null);
  (0, import_react6.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (e) => {
    if (!disabled) {
      e.preventDefault();
      onGroupToggle(item, e);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react6.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default3.header, styles_css_default3["expandable-header"], styles_css_default3[`variant-${variant}`], {
        [styles_css_default3.highlighted]: highlighted,
        [styles_css_default3["rolled-down"]]: expanded,
        [styles_css_default3.disabled]: disabled,
        [styles_css_default3["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, disabled, expanded }), isDisabledWithReason ? targetProps : {}),
    item.text,
    import_react6.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default3["expand-icon"], {
        [styles_css_default3["expand-icon-up"]]: expanded
      }) },
      import_react6.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react6.default.createElement(
      import_react6.default.Fragment,
      null,
      descriptionEl,
      import_react6.default.createElement(Tooltip, { content: item.disabledReason }, trigger)
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react6.default.createElement(mobile_expandable_group_default, { open: expanded, trigger }, item.items && expanded && import_react6.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default3["items-list-container"]) },
      import_react6.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, hasCategoryHeader: true, variant })
    ));
  }
  return import_react6.default.createElement("li", { className: clsx_m_default(styles_css_default3.category, styles_css_default3[`variant-${variant}`], styles_css_default3.expandable, {
    [styles_css_default3.expanded]: expanded,
    [styles_css_default3.disabled]: disabled,
    [styles_css_default3.highlighted]: highlighted || expanded,
    [styles_css_default3.expandable]: true
  }), role: "presentation", onClick, onMouseEnter: onHover, onTouchStart: onHover, "data-testid": item.id }, content);
};
var mobile_expandable_category_element_default = MobileExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
function ItemsList({ items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled = false, hasExpandableGroups = false, hasCategoryHeader = false, expandToViewport = false, variant = "normal" }) {
  const isMobile = useMobile();
  const elements = items.map((item, index) => {
    var _a, _b, _c, _d;
    if (!isItemGroup(item)) {
      const lastInSection = index === items.length - 1 || isItemGroup(items[index + 1]);
      const showDivider = index === items.length - 1 && !lastInDropdown || isItemGroup(items[index + 1]);
      return import_react7.default.createElement(item_element_default, { key: index, item, onItemActivate, disabled: (_a = item.disabled) !== null && _a !== void 0 ? _a : categoryDisabled, highlighted: isHighlighted(item), isKeyboardHighlighted: isKeyboardHighlight(item), highlightItem, first: index === 0 || isItemGroup(items[index - 1]), lastInSection, showDivider, hasCategoryHeader, variant });
    }
    if (hasExpandableGroups) {
      return item.text ? isMobile ? import_react7.default.createElement(mobile_expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_b = item.disabled) !== null && _b !== void 0 ? _b : false, variant }) : import_react7.default.createElement(expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, disabled: (_c = item.disabled) !== null && _c !== void 0 ? _c : false, expandToViewport, variant }) : null;
    }
    return import_react7.default.createElement(category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_d = item.disabled) !== null && _d !== void 0 ? _d : false, variant });
  });
  return import_react7.default.createElement(import_react7.default.Fragment, null, elements);
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/create-items-tree.js
function createItemsTree(items) {
  const itemToIndex = /* @__PURE__ */ new Map();
  const indexToItem = /* @__PURE__ */ new Map();
  const flatIndices = [];
  traverseItems(items, (item, index) => {
    const indexKey = stringifyIndex(index);
    itemToIndex.set(item, indexKey);
    indexToItem.set(indexKey, item);
    flatIndices.push(indexKey);
  });
  return {
    getItem: (index) => {
      const indexKey = stringifyIndex(index);
      return indexToItem.get(indexKey) || null;
    },
    getItemIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      return parseIndex(indexKey);
    },
    getSequentialIndex: (index, direction) => {
      const indexKey = stringifyIndex(index);
      const position = flatIndices.indexOf(indexKey);
      const nextIndexKey = flatIndices[position + direction];
      if (!nextIndexKey) {
        return null;
      }
      return parseIndex(nextIndexKey);
    },
    getParentIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      const index = parseIndex(indexKey);
      if (index.length === 1) {
        return null;
      }
      return index.slice(0, index.length - 1);
    }
  };
}
function traverseItems(items, act, parentIndex = []) {
  items.forEach((item, index) => {
    const itemIndex = [...parentIndex, index];
    act(item, itemIndex);
    if (isItemGroup(item)) {
      traverseItems(item.items, act, itemIndex);
    }
  });
}
function stringifyIndex(index) {
  return index.join("-");
}
function parseIndex(index) {
  return index.split("-").map((it) => parseInt(it));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/move-highlight.js
function moveHighlight({ startIndex, expandedIndex, getNext, hasExpandableGroups, isInRestrictedView }) {
  const tryMove = (currentIndex) => {
    var _a;
    const next = getNext(currentIndex);
    if (!next) {
      return null;
    }
    if (((_a = next.parent) === null || _a === void 0 ? void 0 : _a.disabled) && hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (isItemGroup(next.item) && !hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && !isInRestrictedView && !isSameParent(startIndex, next.index)) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && isInRestrictedView && !isSameLevel(next.index, expandedIndex) && !isIncluded(expandedIndex, next.index)) {
      return tryMove(next.index);
    }
    return next.index;
  };
  return tryMove(startIndex);
}
function isSameParent(left, right) {
  return indexEquals(left.slice(0, -1), right.slice(0, -1));
}
function isSameLevel(left, right) {
  return left.length === right.length;
}
function isIncluded(parent, child) {
  return indexEquals(parent, child.slice(0, -1));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
function useHighlightedMenu({ items, hasExpandableGroups, isInRestrictedView = false }) {
  const [targetIndex, setTargetIndex] = (0, import_react8.useState)([]);
  const [expandedIndex, setExpandedIndex] = (0, import_react8.useState)([]);
  const [isUsingMouse, setIsUsingMouse] = (0, import_react8.useState)(true);
  const { getItem, getItemIndex, getSequentialIndex, getParentIndex } = (0, import_react8.useMemo)(() => createItemsTree(items), [items]);
  const targetItem = (0, import_react8.useMemo)(() => getItem(targetIndex), [targetIndex, getItem]);
  const isHighlighted = (0, import_react8.useCallback)((item) => {
    const index = getItemIndex(item);
    return indexIncludes(index, targetIndex);
  }, [targetIndex, getItemIndex]);
  const isKeyboardHighlight = (0, import_react8.useCallback)((item) => {
    const index = getItemIndex(item);
    return !isUsingMouse && indexEquals(index, targetIndex);
  }, [targetIndex, getItemIndex, isUsingMouse]);
  const isExpanded = (0, import_react8.useCallback)((group) => {
    const index = getItemIndex(group);
    return indexIncludes(index, expandedIndex);
  }, [expandedIndex, getItemIndex]);
  const moveHighlight2 = (0, import_react8.useCallback)((direction) => {
    const getNext = (index) => {
      const nextIndex2 = getSequentialIndex(index, direction);
      const item = getItem(nextIndex2 || [-1]);
      if (!nextIndex2 || !item) {
        return null;
      }
      const parentIndex = getParentIndex(item);
      const parentItem = parentIndex && getItem(parentIndex);
      return { index: nextIndex2, item, parent: parentItem || void 0 };
    };
    const nextIndex = moveHighlight({
      startIndex: targetIndex,
      expandedIndex,
      getNext,
      hasExpandableGroups,
      isInRestrictedView
    });
    if (nextIndex) {
      setTargetIndex(nextIndex);
    }
  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);
  const highlightItem = (0, import_react8.useCallback)((item) => {
    setTargetIndex(getItemIndex(item));
  }, [getItemIndex]);
  const expandGroup = (0, import_react8.useCallback)((group) => {
    const groupIndex = group ? getItemIndex(group) : targetIndex;
    const firstChildIndex = [...groupIndex, 0];
    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);
    setExpandedIndex(groupIndex);
  }, [targetIndex, getItemIndex, isInRestrictedView]);
  const collapseGroup = (0, import_react8.useCallback)(() => {
    if (expandedIndex.length > 0) {
      setTargetIndex(expandedIndex);
      setExpandedIndex(expandedIndex.slice(0, -1));
    }
  }, [expandedIndex]);
  const reset = (0, import_react8.useCallback)(() => {
    setTargetIndex([]);
    setExpandedIndex([]);
  }, []);
  return {
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    moveHighlight: moveHighlight2,
    highlightItem,
    expandGroup,
    collapseGroup,
    reset,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-button-dropdown.js
function useButtonDropdown({ items, onItemClick, onItemFollow, onReturnFocus, hasExpandableGroups, isInRestrictedView = false, expandToViewport = false }) {
  const { targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, moveHighlight: moveHighlight2, expandGroup, collapseGroup, reset, setIsUsingMouse } = useHighlightedMenu({
    items,
    hasExpandableGroups,
    isInRestrictedView
  });
  const _a = useOpenState({ onClose: reset }), { isOpen, closeDropdown } = _a, openStateProps = __rest(_a, ["isOpen", "closeDropdown"]);
  const toggleDropdown = (options = {}) => {
    var _a2;
    const moveHighlightOnOpen = (_a2 = options.moveHighlightOnOpen) !== null && _a2 !== void 0 ? _a2 : true;
    if (!isOpen && moveHighlightOnOpen) {
      moveHighlight2(1);
    }
    openStateProps.toggleDropdown();
  };
  const onGroupToggle = (item) => !isExpanded(item) ? expandGroup(item) : collapseGroup();
  const onItemActivate = (item, event) => {
    const details = {
      id: item.id || "undefined",
      href: item.href,
      external: item.external,
      target: getItemTarget(item)
    };
    if (onItemFollow && item.href && isPlainLeftClick(event)) {
      fireCancelableEvent(onItemFollow, details, event);
    }
    if (onItemClick) {
      fireCancelableEvent(onItemClick, details, event);
    }
    onReturnFocus();
    closeDropdown();
  };
  const doVerticalNavigation = (direction) => {
    if (isOpen) {
      moveHighlight2(direction);
    }
  };
  const openAndSelectFirst = (event) => {
    toggleDropdown();
    event.preventDefault();
  };
  const actOnParentDropdown = (event) => {
    if (!targetItem) {
      if (isOpen && !isInRestrictedView) {
        toggleDropdown();
      } else {
        openAndSelectFirst(event);
      }
    } else {
      if (isItemGroup(targetItem)) {
        onGroupToggle(targetItem, event);
      } else {
        onItemActivate(targetItem, event);
      }
    }
  };
  const activate = (event, isEnter) => {
    setIsUsingMouse(false);
    if (targetItem && isLinkItem(targetItem) && isEnter) {
      return;
    }
    event.preventDefault();
    actOnParentDropdown(event);
  };
  const onKeyDown = (event) => {
    setIsUsingMouse(false);
    switch (event.keyCode) {
      case KeyCode.down: {
        doVerticalNavigation(1);
        event.preventDefault();
        break;
      }
      case KeyCode.up: {
        doVerticalNavigation(-1);
        event.preventDefault();
        break;
      }
      case KeyCode.space: {
        event.preventDefault();
        break;
      }
      case KeyCode.enter: {
        if (!(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
          activate(event, true);
        }
        break;
      }
      case KeyCode.left:
      case KeyCode.right: {
        if (targetItem && !targetItem.disabled && isItemGroup(targetItem) && !isExpanded(targetItem)) {
          expandGroup();
        } else if (hasExpandableGroups) {
          collapseGroup();
        }
        event.preventDefault();
        break;
      }
      case KeyCode.escape: {
        onReturnFocus();
        closeDropdown();
        event.preventDefault();
        if (isOpen) {
          event.stopPropagation();
        }
        break;
      }
      case KeyCode.tab: {
        if (expandToViewport) {
          onReturnFocus();
        }
        closeDropdown();
        break;
      }
    }
  };
  const onKeyUp = (event) => {
    if (event.keyCode === KeyCode.space && !(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
      activate(event);
    }
  };
  return {
    isOpen,
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    highlightItem,
    onKeyDown,
    onKeyUp,
    onItemActivate,
    onGroupToggle,
    toggleDropdown,
    closeDropdown,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var InternalButtonDropdown = import_react9.default.forwardRef((_a, ref) => {
  var _b;
  var { items, variant = "normal", loading = false, loadingText, disabled = false, expandableGroups = false, children, onItemClick, onItemFollow, customTriggerBuilder, expandToViewport, ariaLabel, title, description, preferCenter, mainAction, __internalRootRef } = _a, props = __rest(_a, ["items", "variant", "loading", "loadingText", "disabled", "expandableGroups", "children", "onItemClick", "onItemFollow", "customTriggerBuilder", "expandToViewport", "ariaLabel", "title", "description", "preferCenter", "mainAction", "__internalRootRef"]);
  const isInRestrictedView = useMobile();
  const dropdownId = useUniqueId("dropdown");
  for (const item of items) {
    checkSafeUrl("ButtonDropdown", item.href);
  }
  if (mainAction) {
    checkSafeUrl("ButtonDropdown", mainAction.href);
  }
  if (isDevelopment) {
    if (mainAction && variant !== "primary" && variant !== "normal") {
      warnOnce("ButtonDropdown", 'Main action is only supported for "primary" and "normal" component variant.');
    }
  }
  const isMainAction = mainAction && (variant === "primary" || variant === "normal");
  const isVisualRefresh = useVisualRefresh();
  const { isOpen, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, onKeyDown, onKeyUp, onItemActivate, onGroupToggle, toggleDropdown, closeDropdown, setIsUsingMouse } = useButtonDropdown({
    items,
    onItemClick,
    onItemFollow,
    onReturnFocus: () => {
      var _a2;
      return (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    expandToViewport,
    hasExpandableGroups: expandableGroups,
    isInRestrictedView
  });
  const handleMouseEvent = () => {
    setIsUsingMouse(true);
  };
  const baseProps = getBaseProps(props);
  const mainActionRef = (0, import_react9.useRef)(null);
  const triggerRef = (0, import_react9.useRef)(null);
  useForwardFocus(ref, isMainAction ? mainActionRef : triggerRef);
  const clickHandler = () => {
    if (!loading && !disabled) {
      toggleDropdown({ moveHighlightOnOpen: !isInRestrictedView });
    }
  };
  const canBeOpened = !loading && !disabled;
  const triggerVariant = variant === "navigation" ? void 0 : variant === "inline-icon" ? "inline-icon" : variant;
  const iconProps = variant === "icon" || variant === "inline-icon" ? {
    iconName: "ellipsis"
  } : {
    iconName: "caret-down-filled",
    iconAlign: "right",
    __iconClass: canBeOpened && isOpen ? styles_css_default["rotate-up"] : styles_css_default["rotate-down"]
  };
  const baseTriggerProps = Object.assign(Object.assign({ className: clsx_m_default(styles_css_default["trigger-button"], styles_css_default["test-utils-button-trigger"]) }, iconProps), {
    variant: triggerVariant,
    loading,
    loadingText,
    disabled,
    onClick: (event) => {
      event.preventDefault();
      clickHandler();
    },
    ariaLabel,
    ariaExpanded: canBeOpened && isOpen,
    formAction: "none",
    __nativeAttributes: {
      "aria-haspopup": true
    }
  });
  const triggerId = useUniqueId("awsui-button-dropdown__trigger");
  const triggerHasBadge = () => {
    const flatItems = items.flatMap((item) => {
      if ("items" in item) {
        return item.items;
      }
      return item;
    });
    return variant === "icon" && !!(flatItems === null || flatItems === void 0 ? void 0 : flatItems.find((item) => {
      if ("badge" in item) {
        return item.badge;
      }
    }));
  };
  let trigger = null;
  if (customTriggerBuilder) {
    trigger = import_react9.default.createElement("div", { className: styles_css_default["dropdown-trigger"] }, customTriggerBuilder({
      testUtilsClass: styles_css_default["test-utils-button-trigger"],
      ariaExpanded: canBeOpened && isOpen,
      onClick: clickHandler,
      triggerRef,
      ariaLabel,
      disabled,
      isOpen
    }));
  } else if (isMainAction) {
    const { text, iconName, iconAlt, iconSvg, iconUrl, external, externalIconAriaLabel } = mainAction, mainActionProps = __rest(mainAction, ["text", "iconName", "iconAlt", "iconSvg", "iconUrl", "external", "externalIconAriaLabel"]);
    const mainActionIconProps = external ? { iconName: "external", iconAlign: "right" } : { iconName, iconAlt, iconSvg, iconUrl };
    const mainActionAriaLabel = externalIconAriaLabel ? `${(_b = mainAction.ariaLabel) !== null && _b !== void 0 ? _b : mainAction.text} ${mainAction.externalIconAriaLabel}` : void 0;
    trigger = import_react9.default.createElement(
      "div",
      { role: "group", "aria-label": ariaLabel, className: styles_css_default["split-trigger-wrapper"] },
      import_react9.default.createElement(
        "div",
        {
          className: clsx_m_default(styles_css_default["trigger-item"], styles_css_default["split-trigger"]),
          // Close dropdown upon main action click unless event is cancelled.
          onClick: closeDropdown,
          // Prevent keyboard events from propagation to the button dropdown handler.
          onKeyDown: (e) => e.stopPropagation(),
          onKeyUp: (e) => e.stopPropagation()
        },
        import_react9.default.createElement(InternalButton, Object.assign({ ref: mainActionRef }, mainActionProps, mainActionIconProps, { className: styles_css_default["trigger-button"], variant, ariaLabel: mainActionAriaLabel, formAction: "none" }), text)
      ),
      import_react9.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default["trigger-item"], styles_css_default["dropdown-trigger"], isVisualRefresh && styles_css_default["visual-refresh"]) },
        import_react9.default.createElement(InternalButton, Object.assign({ ref: triggerRef }, baseTriggerProps))
      )
    );
  } else {
    trigger = import_react9.default.createElement(
      "div",
      { className: styles_css_default["dropdown-trigger"] },
      import_react9.default.createElement(InternalButton, Object.assign({ ref: triggerRef, id: triggerId }, baseTriggerProps, { badge: triggerHasBadge() }), children)
    );
  }
  const hasHeader = title || description;
  const headerId = useUniqueId("awsui-button-dropdown__header");
  const shouldLabelWithTrigger = !ariaLabel && !mainAction && variant !== "icon" && variant !== "inline-icon";
  const { loadingButtonCount } = useFunnel();
  (0, import_react9.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  return import_react9.default.createElement(
    "div",
    Object.assign({}, baseProps, { onKeyDown, onKeyUp, onMouseDown: handleMouseEvent, onMouseMove: handleMouseEvent, className: clsx_m_default(styles_css_default["button-dropdown"], styles_css_default[`variant-${variant}`], baseProps.className), "aria-owns": expandToViewport && isOpen ? dropdownId : void 0, ref: __internalRootRef }),
    import_react9.default.createElement(
      dropdown_default,
      { open: canBeOpened && isOpen, stretchWidth: false, stretchTriggerHeight: variant === "navigation", expandToViewport, preferCenter, onDropdownClose: () => toggleDropdown(), trigger, dropdownId },
      hasHeader && import_react9.default.createElement(
        "div",
        { className: styles_css_default.header, id: headerId },
        title && import_react9.default.createElement(
          "div",
          { className: styles_css_default.title },
          import_react9.default.createElement(InternalBox, { fontSize: "heading-s", fontWeight: "bold", color: "inherit", tagOverride: "h2", margin: { vertical: "n", horizontal: "n" } }, title)
        ),
        description && import_react9.default.createElement(
          InternalBox,
          { fontSize: "body-s" },
          import_react9.default.createElement("span", { className: styles_css_default.description }, description)
        )
      ),
      import_react9.default.createElement(
        options_list_default,
        { open: canBeOpened && isOpen, position: "static", role: "menu", decreaseBlockMargin: true, ariaLabel, ariaLabelledby: hasHeader ? headerId : shouldLabelWithTrigger ? triggerId : void 0, statusType: "finished" },
        import_react9.default.createElement(ItemsList, { items, onItemActivate, onGroupToggle, hasExpandableGroups: expandableGroups, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, expandToViewport, variant })
      )
    )
  );
});
var internal_default2 = InternalButtonDropdown;

export {
  styles_css_default,
  internal_default2 as internal_default
};
//# sourceMappingURL=chunk-6UFT4YRR.js.map

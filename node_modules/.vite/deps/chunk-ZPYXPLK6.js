import {
  debounce
} from "./chunk-QBOFGJFI.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-action.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/plugins/helpers/runtime-content-wrapper.js
var import_react = __toESM(require_react());
function RuntimeContentWrapper({ mountContent, unmountContent }) {
  const ref = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    const container = ref.current;
    mountContent(container);
    return () => unmountContent(container);
  }, []);
  return import_react.default.createElement("div", { ref });
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-action.js
function convertRuntimeAction(action, context) {
  if (!action) {
    return null;
  }
  return import_react2.default.createElement(RuntimeContentWrapper, { key: action.id + "-" + context.type, mountContent: (container) => action.mountContent(container, context), unmountContent: (container) => action.unmountContent(container) });
}
function createUseDiscoveredAction(onActionRegistered) {
  return function useDiscoveredAction(type) {
    const [discoveredActions, setDiscoveredActions] = (0, import_react2.useState)([]);
    const headerRef = (0, import_react2.useRef)(null);
    const contentRef = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      return onActionRegistered((actions) => {
        setDiscoveredActions(actions.map((action) => convertRuntimeAction(action, { type, headerRef, contentRef })));
      });
    }, [type]);
    return { discoveredActions, headerRef, contentRef };
  };
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/drawers.js
var DrawersController = class {
  constructor() {
    this.drawers = [];
    this.drawersRegistrationListener = null;
    this.scheduleUpdate = debounce(() => {
      var _a;
      (_a = this.drawersRegistrationListener) === null || _a === void 0 ? void 0 : _a.call(this, this.drawers);
    }, 0);
    this.registerDrawer = (config) => {
      this.drawers = this.drawers.concat(config);
      this.scheduleUpdate();
    };
    this.onDrawersRegistered = (listener) => {
      if (this.drawersRegistrationListener !== null) {
        console.warn("[AwsUi] [runtime drawers] multiple app layout instances detected");
      }
      this.drawersRegistrationListener = listener;
      this.scheduleUpdate();
      return () => {
        this.drawersRegistrationListener = null;
      };
    };
    this.clearRegisteredDrawers = () => {
      this.drawers = [];
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerDrawer) !== null && _a !== void 0 ? _a : api.registerDrawer = this.registerDrawer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b;
    (_a = internalApi.clearRegisteredDrawers) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredDrawers = this.clearRegisteredDrawers;
    (_b = internalApi.onDrawersRegistered) !== null && _b !== void 0 ? _b : internalApi.onDrawersRegistered = this.onDrawersRegistered;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/helpers/utils.js
function sortByPriority(items) {
  return items.slice().sort((a, b) => {
    var _a, _b;
    if (b.orderPriority !== a.orderPriority) {
      return Math.sign(((_a = b.orderPriority) !== null && _a !== void 0 ? _a : 0) - ((_b = a.orderPriority) !== null && _b !== void 0 ? _b : 0));
    }
    return b.id < a.id ? 1 : -1;
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/action-buttons.js
var ActionButtonsController = class {
  constructor() {
    this.listeners = [];
    this.actions = [];
    this.scheduleUpdate = debounce(() => {
      this.listeners.forEach((listener) => listener(this.actions));
    }, 0);
    this.registerAction = (action) => {
      this.actions.push(action);
      this.actions = sortByPriority(this.actions);
      this.scheduleUpdate();
    };
    this.clearRegisteredActions = () => {
      this.actions = [];
    };
    this.onActionRegistered = (listener) => {
      this.listeners.push(listener);
      this.scheduleUpdate();
      return () => {
        this.listeners = this.listeners.filter((item) => item !== listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerAction) !== null && _a !== void 0 ? _a : api.registerAction = this.registerAction;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b;
    (_a = internalApi.clearRegisteredActions) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredActions = this.clearRegisteredActions;
    (_b = internalApi.onActionRegistered) !== null && _b !== void 0 ? _b : internalApi.onActionRegistered = this.onActionRegistered;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/api.js
var storageKey = Symbol.for("awsui-plugin-api");
function findUpApi(currentWindow) {
  try {
    if (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[storageKey]) {
      return currentWindow[storageKey];
    }
    if (!currentWindow || currentWindow.parent === currentWindow) {
      return void 0;
    }
    return findUpApi(currentWindow.parent);
  } catch (ex) {
    return void 0;
  }
}
function loadApi() {
  if (typeof window === "undefined") {
    return installApi({});
  }
  const win = window;
  const existingApi = findUpApi(win);
  win[storageKey] = installApi(existingApi !== null && existingApi !== void 0 ? existingApi : {});
  return win[storageKey];
}
var { awsuiPlugins, awsuiPluginsInternal } = loadApi();
function installApi(api) {
  var _a, _b;
  (_a = api.awsuiPlugins) !== null && _a !== void 0 ? _a : api.awsuiPlugins = {};
  (_b = api.awsuiPluginsInternal) !== null && _b !== void 0 ? _b : api.awsuiPluginsInternal = {};
  const appLayoutDrawers = new DrawersController();
  api.awsuiPlugins.appLayout = appLayoutDrawers.installPublic(api.awsuiPlugins.appLayout);
  api.awsuiPluginsInternal.appLayout = appLayoutDrawers.installInternal(api.awsuiPluginsInternal.appLayout);
  const alertActions = new ActionButtonsController();
  api.awsuiPlugins.alert = alertActions.installPublic(api.awsuiPlugins.alert);
  api.awsuiPluginsInternal.alert = alertActions.installInternal(api.awsuiPluginsInternal.alert);
  const flashbarActions = new ActionButtonsController();
  api.awsuiPlugins.flashbar = flashbarActions.installPublic(api.awsuiPlugins.flashbar);
  api.awsuiPluginsInternal.flashbar = flashbarActions.installInternal(api.awsuiPluginsInternal.flashbar);
  return api;
}

export {
  RuntimeContentWrapper,
  createUseDiscoveredAction,
  sortByPriority,
  awsuiPluginsInternal
};
//# sourceMappingURL=chunk-ZPYXPLK6.js.map

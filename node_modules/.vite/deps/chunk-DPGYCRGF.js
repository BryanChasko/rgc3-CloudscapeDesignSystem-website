import {
  live_region_default
} from "./chunk-ESFEWRKR.js";
import {
  InternalSpinner
} from "./chunk-AZQA5SQ2.js";
import {
  checkSafeUrl
} from "./chunk-VBS6KN2M.js";
import {
  useForwardFocus
} from "./chunk-YTRJQH4M.js";
import {
  useSingleTabStopNavigation
} from "./chunk-KYLY6TIG.js";
import {
  fireCancelableEvent,
  isPlainLeftClick
} from "./chunk-T3BYYNEM.js";
import {
  FunnelMetrics,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep
} from "./chunk-GC32QG33.js";
import {
  DATA_ATTR_FUNNEL_VALUE,
  getFunnelValueSelector,
  getNameFromSelector,
  getSubStepAllSelector
} from "./chunk-37SB7DJX.js";
import {
  useUniqueId
} from "./chunk-3TE4OIE4.js";
import {
  internal_default
} from "./chunk-NUCDU4ZC.js";
import {
  useMergeRefs
} from "./chunk-NYW4WZSZ.js";
import {
  __rest,
  clsx_m_default
} from "./chunk-CHBULPAM.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/internal/context/button-context.js
var import_react = __toESM(require_react());
var ButtonContext = (0, import_react.createContext)({
  onClick: () => {
  }
});
function useButtonContext() {
  return (0, import_react.useContext)(ButtonContext);
}

// node_modules/@cloudscape-design/components/button/internal.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/button/styles.scoped.css";
var styles_css_default = {
  "content": "awsui_content_vjswe_12tek_103",
  "button": "awsui_button_vjswe_12tek_107",
  "variant-normal": "awsui_variant-normal_vjswe_12tek_158",
  "variant-icon": "awsui_variant-icon_vjswe_12tek_201",
  "variant-modal-dismiss": "awsui_variant-modal-dismiss_vjswe_12tek_201",
  "variant-flashbar-icon": "awsui_variant-flashbar-icon_vjswe_12tek_201",
  "variant-inline-icon": "awsui_variant-inline-icon_vjswe_12tek_222",
  "disabled": "awsui_disabled_vjswe_12tek_243",
  "variant-primary": "awsui_variant-primary_vjswe_12tek_251",
  "variant-link": "awsui_variant-link_vjswe_12tek_344",
  "variant-inline-link": "awsui_variant-inline-link_vjswe_12tek_623",
  "variant-breadcrumb-group": "awsui_variant-breadcrumb-group_vjswe_12tek_906",
  "variant-menu-trigger": "awsui_variant-menu-trigger_vjswe_12tek_1004",
  "button-no-text": "awsui_button-no-text_vjswe_12tek_1097",
  "button-no-wrap": "awsui_button-no-wrap_vjswe_12tek_1101",
  "full-width": "awsui_full-width_vjswe_12tek_1104",
  "icon-left": "awsui_icon-left_vjswe_12tek_1123",
  "icon-right": "awsui_icon-right_vjswe_12tek_1128",
  "icon": "awsui_icon_vjswe_12tek_1123"
};

// node_modules/@cloudscape-design/components/button/icon-helper.js
var React = __toESM(require_react());
function getIconAlign(props) {
  const standalone = props.variant === "icon" || props.variant === "inline-icon";
  return standalone ? "left" : props.iconAlign;
}
function IconWrapper(_a) {
  var { iconName, iconUrl, iconAlt, iconSvg, iconSize, badge } = _a, props = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "iconSize", "badge"]);
  if (!iconName && !iconUrl && !iconSvg) {
    return null;
  }
  return React.createElement(internal_default, { className: clsx_m_default(styles_css_default.icon, styles_css_default[`icon-${getIconAlign(props)}`], props.iconClass), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, size: iconSize, badge });
}
function LeftIcon(props) {
  if (props.loading) {
    return React.createElement(InternalSpinner, { className: clsx_m_default(styles_css_default.icon, styles_css_default["icon-left"]) });
  } else if (getIconAlign(props) === "left") {
    return React.createElement(IconWrapper, Object.assign({}, props));
  }
  return null;
}
function RightIcon(props) {
  if (getIconAlign(props) === "right") {
    return React.createElement(IconWrapper, Object.assign({}, props));
  }
  return null;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-effect-on-update.js
var import_react2 = __toESM(require_react());
function useEffectOnUpdate(callback, deps) {
  const isFirstRender = (0, import_react2.useRef)(true);
  (0, import_react2.useEffect)(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      return callback();
    }
  }, deps);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks.js
function usePerformanceMarks(name, enabled, elementRef, getDetails, dependencies) {
  const id = useUniqueId();
  (0, import_react3.useEffect)(() => {
    if (!enabled || !elementRef.current) {
      return;
    }
    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== "hidden";
    if (!elementVisible) {
      return;
    }
    const renderedMarkName = `${name}Rendered`;
    performance.mark(renderedMarkName, {
      detail: Object.assign({ source: "awsui", instanceId: id }, getDetails())
    });
  }, []);
  useEffectOnUpdate(() => {
    if (!enabled || !elementRef.current) {
      return;
    }
    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== "hidden";
    if (!elementVisible) {
      return;
    }
    const updatedMarkName = `${name}Updated`;
    performance.mark(updatedMarkName, {
      detail: Object.assign({ source: "awsui", instanceId: id }, getDetails())
    });
  }, dependencies);
}

// node_modules/@cloudscape-design/components/button/internal.js
var InternalButton = import_react4.default.forwardRef((_a, ref) => {
  var { children, iconName, __iconClass, onClick, onFollow, iconAlign = "left", iconUrl, iconSvg, iconAlt, variant = "normal", loading = false, loadingText, disabled = false, wrapText = true, href, target, rel, download, formAction = "submit", ariaLabel, ariaDescribedby, ariaExpanded, ariaControls, fullWidth, badge, __nativeAttributes, __internalRootRef = null, __focusable = false } = _a, props = __rest(_a, ["children", "iconName", "__iconClass", "onClick", "onFollow", "iconAlign", "iconUrl", "iconSvg", "iconAlt", "variant", "loading", "loadingText", "disabled", "wrapText", "href", "target", "rel", "download", "formAction", "ariaLabel", "ariaDescribedby", "ariaExpanded", "ariaControls", "fullWidth", "badge", "__nativeAttributes", "__internalRootRef", "__focusable"]);
  checkSafeUrl("Button", href);
  const isAnchor = Boolean(href);
  const isNotInteractive = loading || disabled;
  const hasAriaDisabled = loading && !disabled || disabled && __focusable;
  const shouldHaveContent = children && ["icon", "inline-icon", "flashbar-icon", "modal-dismiss"].indexOf(variant) === -1;
  const buttonRef = (0, import_react4.useRef)(null);
  useForwardFocus(ref, buttonRef);
  const buttonContext = useButtonContext();
  const uniqueId = useUniqueId("button");
  const { funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepSelector, subStepNameSelector } = useFunnelSubStep();
  usePerformanceMarks("primaryButton", variant === "primary", buttonRef, () => {
    var _a2;
    return {
      loading,
      disabled,
      text: (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.innerText
    };
  }, [loading, disabled]);
  const handleClick = (event) => {
    if (isNotInteractive) {
      return event.preventDefault();
    }
    if (isAnchor && isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, { href, target }, event);
      if ((iconName === "external" || target === "_blank") && funnelInteractionId) {
        const stepName = getNameFromSelector(stepNameSelector);
        const subStepName = getNameFromSelector(subStepNameSelector);
        FunnelMetrics.externalLinkInteracted({
          funnelInteractionId,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepSelector,
          subStepName,
          subStepNameSelector,
          elementSelector: getFunnelValueSelector(uniqueId),
          subStepAllSelector: getSubStepAllSelector()
        });
      }
    }
    const { altKey, button, ctrlKey, metaKey, shiftKey } = event;
    fireCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey }, event);
    buttonContext.onClick({ variant });
  };
  const buttonClass = clsx_m_default(props.className, styles_css_default.button, styles_css_default[`variant-${variant}`], {
    [styles_css_default.disabled]: isNotInteractive,
    [styles_css_default["button-no-wrap"]]: !wrapText,
    [styles_css_default["button-no-text"]]: !shouldHaveContent,
    [styles_css_default["full-width"]]: shouldHaveContent && fullWidth
  });
  const explicitTabIndex = __nativeAttributes && "tabIndex" in __nativeAttributes ? __nativeAttributes.tabIndex : void 0;
  const { tabIndex } = useSingleTabStopNavigation(buttonRef, {
    tabIndex: isAnchor && isNotInteractive ? -1 : explicitTabIndex
  });
  const buttonProps = Object.assign(Object.assign(Object.assign({}, props), __nativeAttributes), {
    tabIndex,
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: useMergeRefs(buttonRef, __internalRootRef),
    "aria-label": ariaLabel,
    "aria-describedby": ariaDescribedby,
    "aria-expanded": ariaExpanded,
    "aria-controls": ariaControls,
    // add ariaLabel as `title` as visible hint text
    title: ariaLabel,
    className: buttonClass,
    onClick: handleClick,
    [DATA_ATTR_FUNNEL_VALUE]: uniqueId
  });
  const iconProps = {
    loading,
    iconName,
    iconAlign,
    iconUrl,
    iconSvg,
    iconAlt,
    variant,
    badge,
    iconClass: __iconClass,
    iconSize: variant === "modal-dismiss" ? "medium" : "normal"
  };
  const buttonContent = import_react4.default.createElement(
    import_react4.default.Fragment,
    null,
    import_react4.default.createElement(LeftIcon, Object.assign({}, iconProps)),
    shouldHaveContent && import_react4.default.createElement("span", { className: styles_css_default.content }, children),
    import_react4.default.createElement(RightIcon, Object.assign({}, iconProps))
  );
  const { loadingButtonCount } = useFunnel();
  (0, import_react4.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  if (isAnchor) {
    return (
      // https://github.com/yannickcr/eslint-plugin-react/issues/2962
      // eslint-disable-next-line react/jsx-no-target-blank
      import_react4.default.createElement(
        import_react4.default.Fragment,
        null,
        import_react4.default.createElement("a", Object.assign({}, buttonProps, {
          href,
          target,
          // security recommendation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target
          rel: rel !== null && rel !== void 0 ? rel : target === "_blank" ? "noopener noreferrer" : void 0,
          "aria-disabled": isNotInteractive ? true : void 0,
          download
        }), buttonContent),
        loading && loadingText && import_react4.default.createElement(live_region_default, null, loadingText)
      )
    );
  }
  return import_react4.default.createElement(
    import_react4.default.Fragment,
    null,
    import_react4.default.createElement("button", Object.assign({}, buttonProps, { type: formAction === "none" ? "button" : "submit", disabled: disabled && !__focusable, "aria-disabled": hasAriaDisabled ? true : void 0 }), buttonContent),
    loading && loadingText && import_react4.default.createElement(live_region_default, null, loadingText)
  );
});
var internal_default2 = InternalButton;

export {
  ButtonContext,
  useEffectOnUpdate,
  usePerformanceMarks,
  InternalButton,
  internal_default2 as internal_default
};
//# sourceMappingURL=chunk-DPGYCRGF.js.map

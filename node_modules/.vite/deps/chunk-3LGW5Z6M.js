import {
  convertAutoComplete,
  useSearchProps
} from "./chunk-3WE6CZLV.js";
import {
  useFormFieldContext
} from "./chunk-RGNJKKON.js";
import {
  useDebounceCallback
} from "./chunk-Y3T7CXFH.js";
import {
  useInternalI18n
} from "./chunk-VCW6C342.js";
import {
  internal_default as internal_default2
} from "./chunk-DPGYCRGF.js";
import {
  fireKeyboardEvent,
  fireNonCancelableEvent
} from "./chunk-T3BYYNEM.js";
import {
  internal_default
} from "./chunk-NUCDU4ZC.js";
import {
  useMergeRefs
} from "./chunk-NYW4WZSZ.js";
import {
  __rest,
  clsx_m_default,
  getBaseProps
} from "./chunk-CHBULPAM.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/input/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/input/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_2rhyz_15wpl_99",
  "input": "awsui_input_2rhyz_15wpl_103",
  "input-readonly": "awsui_input-readonly_2rhyz_15wpl_153",
  "input-invalid": "awsui_input-invalid_2rhyz_15wpl_220",
  "input-has-icon-left": "awsui_input-has-icon-left_2rhyz_15wpl_231",
  "input-type-search": "awsui_input-type-search_2rhyz_15wpl_236",
  "input-has-icon-right": "awsui_input-has-icon-right_2rhyz_15wpl_252",
  "input-has-no-border-radius": "awsui_input-has-no-border-radius_2rhyz_15wpl_255",
  "input-container": "awsui_input-container_2rhyz_15wpl_262",
  "input-icon-left": "awsui_input-icon-left_2rhyz_15wpl_267",
  "input-icon-right": "awsui_input-icon-right_2rhyz_15wpl_274",
  "input-button-right": "awsui_input-button-right_2rhyz_15wpl_280"
};

// node_modules/@cloudscape-design/components/input/internal.js
var import_react = __toESM(require_react());
function InternalInput(_a, ref) {
  var { type = "text", step, inputMode, autoComplete = true, ariaLabel, clearAriaLabel: clearAriaLabelOverride, name, value, placeholder, autoFocus, disabled, readOnly, disableBrowserAutocorrect, spellcheck, __noBorderRadius, __leftIcon, __leftIconVariant = "subtle", __onLeftIconClick, ariaRequired, __rightIcon, __onRightIconClick, onKeyDown, onKeyUp, onChange, __onDelayedInput, __onBlurWithDetail, onBlur, onFocus, __nativeAttributes, __internalRootRef, __inheritFormFieldProps } = _a, rest = __rest(_a, ["type", "step", "inputMode", "autoComplete", "ariaLabel", "clearAriaLabel", "name", "value", "placeholder", "autoFocus", "disabled", "readOnly", "disableBrowserAutocorrect", "spellcheck", "__noBorderRadius", "__leftIcon", "__leftIconVariant", "__onLeftIconClick", "ariaRequired", "__rightIcon", "__onRightIconClick", "onKeyDown", "onKeyUp", "onChange", "__onDelayedInput", "__onBlurWithDetail", "onBlur", "onFocus", "__nativeAttributes", "__internalRootRef", "__inheritFormFieldProps"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("input");
  const fireDelayedInput = useDebounceCallback((value2) => fireNonCancelableEvent(__onDelayedInput, { value: value2 }));
  const handleChange = (value2) => {
    fireDelayedInput(value2);
    fireNonCancelableEvent(onChange, { value: value2 });
  };
  const inputRef = (0, import_react.useRef)(null);
  const searchProps = useSearchProps(type, disabled, readOnly, value, inputRef, handleChange);
  __leftIcon = __leftIcon !== null && __leftIcon !== void 0 ? __leftIcon : searchProps.__leftIcon;
  __rightIcon = __rightIcon !== null && __rightIcon !== void 0 ? __rightIcon : searchProps.__rightIcon;
  __onRightIconClick = __onRightIconClick !== null && __onRightIconClick !== void 0 ? __onRightIconClick : searchProps.__onRightIconClick;
  const formFieldContext = useFormFieldContext(rest);
  const { ariaLabelledby, ariaDescribedby, controlId, invalid } = __inheritFormFieldProps ? formFieldContext : rest;
  const attributes = Object.assign({
    "aria-label": ariaLabel,
    // aria-labelledby has precedence over aria-label in accessible name calculation.
    // When aria-label is provided for Input, it should override aria-labelledBy from form-field context.
    // If both aria-label and aria-labelledby come from Input props, aria-labelledby will be used in accessible name
    "aria-labelledby": ariaLabel && !rest.ariaLabelledby ? void 0 : ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    name,
    placeholder,
    autoFocus,
    id: controlId,
    className: clsx_m_default(styles_css_default.input, type && styles_css_default[`input-type-${type}`], __rightIcon && styles_css_default["input-has-icon-right"], __leftIcon && styles_css_default["input-has-icon-left"], __noBorderRadius && styles_css_default["input-has-no-border-radius"], {
      [styles_css_default["input-readonly"]]: readOnly,
      [styles_css_default["input-invalid"]]: invalid
    }),
    autoComplete: convertAutoComplete(autoComplete),
    disabled,
    readOnly,
    type,
    step,
    inputMode,
    spellCheck: spellcheck,
    onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)),
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value !== null && value !== void 0 ? value : "",
    onChange: onChange && ((event) => handleChange(event.target.value)),
    onBlur: (e) => {
      onBlur && fireNonCancelableEvent(onBlur);
      __onBlurWithDetail && fireNonCancelableEvent(__onBlurWithDetail, { relatedTarget: e.relatedTarget });
    },
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  }, __nativeAttributes);
  if (type === "number") {
    attributes.onWheel = (event) => event.currentTarget.blur();
  }
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  if (ariaRequired) {
    attributes["aria-required"] = "true";
  }
  if (invalid) {
    attributes["aria-invalid"] = "true";
  }
  const mergedRef = useMergeRefs(ref, inputRef);
  if (attributes.type === "visualSearch") {
    attributes.type = "text";
  }
  return import_react.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default["input-container"]), ref: __internalRootRef }),
    __leftIcon && import_react.default.createElement(
      "span",
      { onClick: __onLeftIconClick, className: styles_css_default["input-icon-left"] },
      import_react.default.createElement(internal_default, { name: __leftIcon, variant: disabled || readOnly ? "disabled" : __leftIconVariant })
    ),
    import_react.default.createElement("input", Object.assign({ ref: mergedRef }, attributes)),
    __rightIcon && import_react.default.createElement(
      "span",
      { className: styles_css_default["input-icon-right"] },
      import_react.default.createElement(
        internal_default2,
        {
          // Used for test utils
          // eslint-disable-next-line react/forbid-component-props
          className: styles_css_default["input-button-right"],
          variant: "inline-icon",
          formAction: "none",
          iconName: __rightIcon,
          onClick: __onRightIconClick,
          ariaLabel: i18n("clearAriaLabel", clearAriaLabelOverride),
          disabled
        }
      )
    )
  );
}
var internal_default3 = import_react.default.forwardRef(InternalInput);

export {
  styles_css_default,
  internal_default3 as internal_default
};
//# sourceMappingURL=chunk-3LGW5Z6M.js.map

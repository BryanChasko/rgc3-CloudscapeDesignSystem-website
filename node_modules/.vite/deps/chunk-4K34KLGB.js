import {
  findUpUntil
} from "./chunk-37SB7DJX.js";
import {
  getMatchingBreakpoint,
  mobileBreakpoint
} from "./chunk-JO267CDI.js";
import {
  createSingletonState
} from "./chunk-CHBULPAM.js";

// node_modules/@cloudscape-design/components/internal/hooks/use-mobile/index.js
function getIsMobile() {
  if (typeof window === "undefined") {
    return false;
  }
  if (window.matchMedia) {
    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;
  }
  return getMatchingBreakpoint(window.innerWidth, ["xs"]) !== "xs";
}
var useMobile = createSingletonState({
  initialState: () => getIsMobile(),
  factory: (handler) => {
    const listener = () => handler(getIsMobile());
    window.addEventListener("resize", listener);
    return () => {
      window.removeEventListener("resize", listener);
    };
  }
});

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== document.body) {
    getComputedStyle(node).overflow !== "visible" && parents.push(node);
  }
  return parents;
};
var getOverflowParentDimensions = ({ element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false }) => {
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      // Treat the whole scrollable area as the available height
      // if we're allowed to expand past the viewport.
      height: canExpandOutsideViewport ? el.scrollHeight : height,
      width,
      top,
      left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const documentDimensions = document.documentElement.getBoundingClientRect();
    parents.push({
      width: Math.max(documentDimensions.width, document.documentElement.clientWidth),
      height: Math.max(documentDimensions.height, document.documentElement.clientHeight),
      top: documentDimensions.top,
      left: documentDimensions.left
    });
  } else {
    parents.push({
      height: window.innerHeight,
      width: window.innerWidth,
      top: 0,
      left: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a;
  (_a = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(element, options);
}
function calculateScroll({ top, height }) {
  if (top < 0) {
    return top;
  } else if (top + height > window.innerHeight) {
    if (height > window.innerHeight) {
      return top;
    } else {
      return top + height - window.innerHeight;
    }
  }
  return 0;
}
function scrollRectangleIntoView(box, scrollableParent) {
  const scrollAmount = calculateScroll(box);
  if (scrollAmount) {
    (scrollableParent || window).scrollBy(0, scrollAmount);
  }
}
function getFirstScrollableParent(element) {
  return findUpUntil(element, (el) => {
    const overflows = el.scrollHeight > el.clientHeight;
    return overflows && ["scroll", "auto"].includes(getComputedStyle(el).overflowY);
  }) || void 0;
}

// node_modules/@cloudscape-design/components/internal/generated/custom-css-properties/index.js
var customCSSPropertiesMap = {
  breadcrumbsGap: "--awsui-breadcrumbs-gap-iof9y8",
  contentGapLeft: "--awsui-content-gap-left-iof9y8",
  contentGapRight: "--awsui-content-gap-right-iof9y8",
  contentHeight: "--awsui-content-height-iof9y8",
  containerFirstGap: "--awsui-container-first-gap-iof9y8",
  containerFirstOverlapExtension: "--awsui-container-first-overlap-extension-iof9y8",
  defaultMaxContentWidth: "--awsui-default-max-content-width-iof9y8",
  defaultMinContentWidth: "--awsui-default-min-content-width-iof9y8",
  drawerSize: "--awsui-drawer-size-iof9y8",
  footerHeight: "--awsui-footer-height-iof9y8",
  headerGap: "--awsui-header-gap-iof9y8",
  headerHeight: "--awsui-header-height-iof9y8",
  layoutWidth: "--awsui-layout-width-iof9y8",
  mainGap: "--awsui-main-gap-iof9y8",
  mainOffsetLeft: "--awsui-main-offset-left-iof9y8",
  mainTemplateRows: "--awsui-main-template-rows-iof9y8",
  maxContentWidth: "--awsui-max-content-width-iof9y8",
  minContentWidth: "--awsui-min-content-width-iof9y8",
  mobileBarHeight: "--awsui-mobile-bar-height-iof9y8",
  notificationsGap: "--awsui-notifications-gap-iof9y8",
  notificationsHeight: "--awsui-notifications-height-iof9y8",
  offsetTop: "--awsui-offset-top-iof9y8",
  offsetTopWithNotifications: "--awsui-offset-top-with-notifications-iof9y8",
  overlapHeight: "--awsui-overlap-height-iof9y8",
  navigationWidth: "--awsui-navigation-width-iof9y8",
  splitPanelReportedHeaderSize: "--awsui-split-panel-reported-header-size-iof9y8",
  splitPanelReportedSize: "--awsui-split-panel-reported-size-iof9y8",
  splitPanelHeight: "--awsui-split-panel-height-iof9y8",
  splitPanelMinWidth: "--awsui-split-panel-min-width-iof9y8",
  splitPanelMaxWidth: "--awsui-split-panel-max-width-iof9y8",
  toolsMaxWidth: "--awsui-tools-max-width-iof9y8",
  toolsWidth: "--awsui-tools-width-iof9y8",
  toolsAnimationStartingOpacity: "--awsui-tools-animation-starting-opacity-iof9y8",
  contentScrollMargin: "--awsui-content-scroll-margin-iof9y8",
  flashbarStackDepth: "--awsui-flashbar-stack-depth-iof9y8",
  flashbarStackIndex: "--awsui-flashbar-stack-index-iof9y8",
  flashbarStickyBottomMargin: "--awsui-flashbar-sticky-bottom-margin-iof9y8",
  stackedNotificationsBottomMargin: "--awsui-stacked-notifications-bottom-margin-iof9y8",
  stackedNotificationsDefaultBottomMargin: "--awsui-stacked-notifications-default-bottom-margin-iof9y8",
  dropdownDefaultMaxWidth: "--awsui-dropdown-default-max-width-iof9y8",
  spinnerRotatorFrom: "--awsui-spinner-rotator-from-iof9y8",
  spinnerRotatorTo: "--awsui-spinner-rotator-to-iof9y8",
  spinnerLineLeftFrom: "--awsui-spinner-line-left-from-iof9y8",
  spinnerLineLeftTo: "--awsui-spinner-line-left-to-iof9y8",
  spinnerLineRightFrom: "--awsui-spinner-line-right-from-iof9y8",
  spinnerLineRightTo: "--awsui-spinner-line-right-to-iof9y8"
};
var custom_css_properties_default = customCSSPropertiesMap;

export {
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView,
  calculateScroll,
  scrollRectangleIntoView,
  getFirstScrollableParent,
  useMobile,
  custom_css_properties_default
};
//# sourceMappingURL=chunk-4K34KLGB.js.map

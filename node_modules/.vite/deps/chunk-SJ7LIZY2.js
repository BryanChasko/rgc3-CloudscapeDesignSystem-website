import {
  Transition_default
} from "./chunk-HI46SMVR.js";
import {
  usePortalModeClasses
} from "./chunk-EYMPTN4Q.js";
import {
  TabTrap,
  getFirstFocusable,
  getLastFocusable
} from "./chunk-WYL2VUB3.js";
import {
  custom_css_properties_default,
  getOverflowParentDimensions,
  getOverflowParents,
  useMobile
} from "./chunk-4K34KLGB.js";
import {
  fireKeyboardEvent,
  fireNonCancelableEvent
} from "./chunk-T3BYYNEM.js";
import {
  nodeBelongs
} from "./chunk-GC32QG33.js";
import {
  findUpUntil
} from "./chunk-37SB7DJX.js";
import {
  useUniqueId
} from "./chunk-3TE4OIE4.js";
import {
  getBreakpointValue
} from "./chunk-JO267CDI.js";
import {
  useMergeRefs
} from "./chunk-NYW4WZSZ.js";
import {
  __rest,
  clsx_m_default,
  getBaseProps,
  useReducedMotion,
  useResizeObserver,
  useStableCallback,
  useVisualRefresh
} from "./chunk-CHBULPAM.js";
import {
  require_react_dom
} from "./chunk-MCEUSTYS.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/internal/components/dropdown/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/internal/components/dropdown/styles.scoped.css";
var styles_css_default = {
  "dropdown-content-wrapper": "awsui_dropdown-content-wrapper_qwoo0_1ea5w_99",
  "awsui-motion-fade-in-dropdown": "awsui_awsui-motion-fade-in-dropdown_qwoo0_1ea5w_1",
  "refresh": "awsui_refresh_qwoo0_1ea5w_120",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_qwoo0_1ea5w_1",
  "root": "awsui_root_qwoo0_1ea5w_149",
  "interior": "awsui_interior_qwoo0_1ea5w_185",
  "dropdown": "awsui_dropdown_qwoo0_1ea5w_99",
  "use-portal": "awsui_use-portal_qwoo0_1ea5w_196",
  "is-empty": "awsui_is-empty_qwoo0_1ea5w_248",
  "dropdown-drop-up": "awsui_dropdown-drop-up_qwoo0_1ea5w_255",
  "with-limited-width": "awsui_with-limited-width_qwoo0_1ea5w_259",
  "dropdown-drop-left": "awsui_dropdown-drop-left_qwoo0_1ea5w_262",
  "dropdown-drop-right": "awsui_dropdown-drop-right_qwoo0_1ea5w_268",
  "occupy-entire-width": "awsui_occupy-entire-width_qwoo0_1ea5w_274",
  "stretch-beyond-trigger-width": "awsui_stretch-beyond-trigger-width_qwoo0_1ea5w_277",
  "hide-block-border": "awsui_hide-block-border_qwoo0_1ea5w_281",
  "open": "awsui_open_qwoo0_1ea5w_287",
  "nowrap": "awsui_nowrap_qwoo0_1ea5w_296",
  "dropdown-content": "awsui_dropdown-content_qwoo0_1ea5w_99",
  "stretch-trigger-height": "awsui_stretch-trigger-height_qwoo0_1ea5w_307"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var import_react4 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-fit-handler.js
var AVAILABLE_SPACE_RESERVE_DEFAULT = 50;
var AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19;
var AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;
var getClosestParentDimensions = (element) => {
  const parents = getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      height,
      width,
      top,
      left
    };
  });
  return parents.shift();
};
var defaultMaxDropdownWidth = getBreakpointValue("xxs");
var getAvailableSpace = ({ trigger, overflowParents, stretchWidth = false, stretchHeight = false, isMobile }) => {
  const availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { bottom: triggerBottom, left: triggerLeft, right: triggerRight } = trigger.getBoundingClientRect();
  return overflowParents.reduce(({ above, below, left, right }, overflowParent) => {
    const offsetTop = triggerBottom - overflowParent.top;
    const currentAbove = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;
    const currentBelow = overflowParent.height - offsetTop - availableSpaceReserveVertical;
    const currentLeft = triggerRight - overflowParent.left - availableSpaceReserveHorizontal;
    const currentRight = overflowParent.left + overflowParent.width - triggerLeft - availableSpaceReserveHorizontal;
    return {
      above: Math.min(above, currentAbove),
      below: Math.min(below, currentBelow),
      left: Math.min(left, currentLeft),
      right: Math.min(right, currentRight)
    };
  }, { above: Number.MAX_VALUE, below: Number.MAX_VALUE, left: Number.MAX_VALUE, right: Number.MAX_VALUE });
};
var getInteriorAvailableSpace = ({ trigger, overflowParents, isMobile }) => {
  const AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { bottom: triggerBottom, top: triggerTop, left: triggerLeft, right: triggerRight } = trigger.getBoundingClientRect();
  return overflowParents.reduce(({ above, below, left, right }, overflowParent) => {
    const currentAbove = triggerBottom - overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentBelow = overflowParent.height - triggerTop + overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentLeft = triggerLeft - overflowParent.left - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    const currentRight = overflowParent.left + overflowParent.width - triggerRight - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    return {
      above: Math.min(above, currentAbove),
      below: Math.min(below, currentBelow),
      left: Math.min(left, currentLeft),
      right: Math.min(right, currentRight)
    };
  }, { above: Number.MAX_VALUE, below: Number.MAX_VALUE, left: Number.MAX_VALUE, right: Number.MAX_VALUE });
};
var getWidths = ({ triggerElement, dropdownElement, desiredMinWidth, stretchBeyondTriggerWidth = false }) => {
  const triggerWidth = triggerElement.getBoundingClientRect().width;
  const minWidth = desiredMinWidth ? Math.min(triggerWidth, desiredMinWidth) : triggerWidth;
  const maxWidth = stretchBeyondTriggerWidth ? Math.max(defaultMaxDropdownWidth, triggerWidth) : Number.MAX_VALUE;
  const requiredWidth = dropdownElement.getBoundingClientRect().width;
  const idealWidth = Math.min(Math.max(requiredWidth, minWidth), maxWidth);
  return { idealWidth, minWidth, triggerWidth };
};
var hasEnoughSpaceToStretchBeyondTriggerWidth = ({ triggerElement, dropdownElement, desiredMinWidth, expandToViewport, stretchWidth, stretchHeight, isMobile }) => {
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: false,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const { idealWidth } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth: true
  });
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  return idealWidth <= availableSpace.left || idealWidth <= availableSpace.right;
};
var getDropdownPosition = ({ triggerElement, dropdownElement, overflowParents, minWidth: desiredMinWidth, preferCenter = false, stretchWidth = false, stretchHeight = false, isMobile = false, stretchBeyondTriggerWidth = false }) => {
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  const { idealWidth, minWidth, triggerWidth } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth
  });
  let dropLeft;
  let left = null;
  let width = idealWidth;
  if (idealWidth <= availableSpace.right) {
    dropLeft = false;
  } else if (idealWidth <= availableSpace.left) {
    dropLeft = true;
  } else {
    dropLeft = availableSpace.left > availableSpace.right;
    width = Math.max(availableSpace.left, availableSpace.right, minWidth);
  }
  if (preferCenter) {
    const spillOver = (idealWidth - triggerWidth) / 2;
    const availableOutsideLeft = availableSpace.left - triggerWidth;
    const availableOutsideRight = availableSpace.right - triggerWidth;
    const fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;
    if (fitsInCenter) {
      left = -spillOver;
    }
  }
  const dropUp = availableSpace.below < dropdownElement.offsetHeight && availableSpace.above > availableSpace.below;
  const availableHeight = dropUp ? availableSpace.above : availableSpace.below;
  const croppedHeight = stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropUp,
    dropLeft,
    left: left === null ? "auto" : `${left}px`,
    height: `${croppedHeight}px`,
    width: `${width}px`
  };
};
var getInteriorDropdownPosition = (trigger, dropdown, overflowParents, isMobile) => {
  const availableSpace = getInteriorAvailableSpace({ trigger, overflowParents, isMobile });
  const { bottom: triggerBottom, top: triggerTop, width: triggerWidth } = trigger.getBoundingClientRect();
  const { top: parentDropdownTop, height: parentDropdownHeight } = getClosestParentDimensions(trigger);
  let dropLeft;
  let width = dropdown.getBoundingClientRect().width;
  const top = triggerTop - parentDropdownTop;
  if (width <= availableSpace.right) {
    dropLeft = false;
  } else if (width <= availableSpace.left) {
    dropLeft = true;
  } else {
    dropLeft = availableSpace.left > availableSpace.right;
    width = Math.max(availableSpace.left, availableSpace.right);
  }
  const left = dropLeft ? 0 - width : triggerWidth;
  const dropUp = availableSpace.below < dropdown.offsetHeight && availableSpace.above > availableSpace.below;
  const bottom = dropUp ? parentDropdownTop + parentDropdownHeight - triggerBottom : 0;
  const availableHeight = dropUp ? availableSpace.above : availableSpace.below;
  const croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropUp,
    dropLeft,
    height: `${croppedHeight}px`,
    width: `${width}px`,
    top: `${top}px`,
    bottom: `${bottom}px`,
    left: `${left}px`
  };
};
var calculatePosition = (dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth) => {
  verticalContainerElement.style.maxHeight = "";
  dropdownElement.style.width = "";
  dropdownElement.style.top = "";
  dropdownElement.style.bottom = "";
  dropdownElement.style.left = "";
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-left"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-right"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-up"]);
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: interior,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition({
    triggerElement,
    dropdownElement,
    overflowParents,
    minWidth,
    preferCenter,
    stretchWidth,
    stretchHeight,
    isMobile,
    stretchBeyondTriggerWidth
  });
  const triggerBox = triggerElement.getBoundingClientRect();
  return [position, triggerBox];
};

// node_modules/@cloudscape-design/components/internal/components/transition/index.js
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react());
function Transition(_a) {
  var { in: isIn, children, exit = true, onStatusChange = () => void 0, disabled = false, transitionChangeDelay } = _a, rest = __rest(_a, ["in", "children", "exit", "onStatusChange", "disabled", "transitionChangeDelay"]);
  const transitionRootElement = (0, import_react2.useRef)(null);
  const [transitionState, setTransitionState] = (0, import_react.useState)(isIn ? "entered" : "exited");
  const motionDisabled = useReducedMotion(transitionRootElement) || disabled;
  const addTransitionEndListener = (0, import_react2.useCallback)((done) => {
    const node = transitionRootElement.current;
    if (node === null) {
      return;
    }
    const listener = (e) => {
      if (e.target === node) {
        node.removeEventListener("transitionend", listener);
        node.removeEventListener("animationend", listener);
        done();
      }
    };
    node.addEventListener("transitionend", listener);
    node.addEventListener("animationend", listener);
  }, []);
  return import_react.default.createElement(Transition_default, Object.assign({ addEndListener: addTransitionEndListener, timeout: motionDisabled ? 0 : void 0, in: isIn, nodeRef: transitionRootElement, exit, onEnter: (isAppearing) => {
    if (!isAppearing) {
      setTransitionState("enter");
      onStatusChange("enter");
    }
  }, onEntering: (isAppearing) => {
    var _a2;
    if (!isAppearing) {
      void ((_a2 = transitionRootElement.current) === null || _a2 === void 0 ? void 0 : _a2.offsetHeight);
      if (transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering) {
        setTimeout(() => {
          setTransitionState("entering");
          onStatusChange("entering");
        }, transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering);
      } else {
        setTransitionState("entering");
        onStatusChange("entering");
      }
    }
  }, onEntered: (isAppearing) => {
    if (!isAppearing) {
      setTransitionState("entered");
      onStatusChange("entered");
    }
  }, onExit: () => {
    setTransitionState("exit");
    onStatusChange("exit");
  }, onExiting: () => {
    setTransitionState("exiting");
    onStatusChange("exiting");
  }, onExited: () => {
    setTransitionState("exited");
    onStatusChange("exited");
  } }, rest), () => children(transitionState, transitionRootElement));
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/context.js
var import_react3 = __toESM(require_react());
var DropdownContext = import_react3.default.createContext({
  position: "bottom-right"
});
function DropdownContextProvider({ children, position = "bottom-right" }) {
  return import_react3.default.createElement(DropdownContext.Provider, { value: { position } }, children);
}
function useDropdownContext() {
  return (0, import_react3.useContext)(DropdownContext);
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var DropdownContainer = ({ children, renderWithPortal = false, id, referrerId, open }) => {
  if (renderWithPortal) {
    if (open) {
      return (0, import_react_dom.createPortal)(import_react4.default.createElement("div", { id, "data-awsui-referrer-id": referrerId }, children), document.body);
    } else {
      return null;
    }
  } else {
    return import_react4.default.createElement(import_react4.default.Fragment, null, children);
  }
};
var TransitionContent = ({ state, transitionRef, dropdownClasses, stretchWidth, interior, isRefresh, dropdownRef, verticalContainerRef, expandToViewport, stretchBeyondTriggerWidth, header, children, footer, position, open, onMouseDown, id, role, ariaLabelledby, ariaDescribedby }) => {
  const contentRef = useMergeRefs(dropdownRef, transitionRef);
  return import_react4.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.dropdown, dropdownClasses, {
      [styles_css_default.open]: open,
      [styles_css_default["with-limited-width"]]: !stretchWidth,
      [styles_css_default["hide-block-border"]]: stretchWidth,
      [styles_css_default.interior]: interior,
      [styles_css_default.refresh]: isRefresh,
      [styles_css_default["use-portal"]]: expandToViewport && !interior,
      [styles_css_default["stretch-beyond-trigger-width"]]: stretchBeyondTriggerWidth
    }), ref: contentRef, id, role, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "data-open": open, "data-animating": state !== "exited", "aria-hidden": !open, style: stretchBeyondTriggerWidth ? { [custom_css_properties_default.dropdownDefaultMaxWidth]: `${defaultMaxDropdownWidth}px` } : {}, onMouseDown },
    import_react4.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default["dropdown-content-wrapper"], !header && !children && styles_css_default["is-empty"], isRefresh && styles_css_default.refresh) },
      import_react4.default.createElement(
        "div",
        { ref: verticalContainerRef, className: styles_css_default["dropdown-content"] },
        import_react4.default.createElement(
          DropdownContextProvider,
          { position },
          header,
          children,
          footer
        )
      )
    )
  );
};
var Dropdown = ({ children, trigger, open, onDropdownClose, onMouseDown, header, footer, dropdownId, stretchTriggerHeight = false, stretchWidth = true, stretchHeight = false, stretchToTriggerWidth = true, stretchBeyondTriggerWidth = false, expandToViewport = false, preferCenter = false, interior = false, minWidth, scrollable = true, loopFocus = expandToViewport, onFocus, onBlur, contentKey, dropdownContentId, dropdownContentRole, ariaLabelledby, ariaDescribedby }) => {
  const wrapperRef = (0, import_react4.useRef)(null);
  const triggerRef = (0, import_react4.useRef)(null);
  const dropdownRef = (0, import_react4.useRef)(null);
  const dropdownContainerRef = (0, import_react4.useRef)(null);
  const verticalContainerRef = (0, import_react4.useRef)(null);
  const fixedPosition = (0, import_react4.useRef)(null);
  const isRefresh = useVisualRefresh();
  const dropdownClasses = usePortalModeClasses(triggerRef);
  const [position, setPosition] = (0, import_react4.useState)("bottom-right");
  const isMobile = useMobile();
  const setDropdownPosition = (position2, triggerBox, target, verticalContainer) => {
    const entireWidth = !interior && stretchWidth;
    if (!stretchWidth) {
      verticalContainer.style.maxHeight = `${parseInt(position2.height) + 1}px`;
    } else {
      verticalContainer.style.maxHeight = position2.height;
    }
    if (entireWidth && !expandToViewport) {
      if (stretchToTriggerWidth) {
        target.classList.add(styles_css_default["occupy-entire-width"]);
      }
    } else {
      target.style.width = position2.width;
    }
    if (position2.dropUp && !interior) {
      target.classList.add(styles_css_default["dropdown-drop-up"]);
      if (!expandToViewport) {
        target.style.bottom = "100%";
      }
    } else {
      target.classList.remove(styles_css_default["dropdown-drop-up"]);
    }
    target.classList.add(position2.dropLeft ? styles_css_default["dropdown-drop-left"] : styles_css_default["dropdown-drop-right"]);
    if (position2.left && position2.left !== "auto") {
      target.style.left = position2.left;
    }
    if (expandToViewport && !interior) {
      target.style.position = "fixed";
      if (position2.dropUp) {
        target.style.bottom = `calc(100% - ${triggerBox.top}px)`;
      } else {
        target.style.top = `${triggerBox.bottom}px`;
      }
      if (position2.dropLeft) {
        target.style.left = `calc(${triggerBox.right}px - ${position2.width})`;
      } else {
        target.style.left = `${triggerBox.left}px`;
      }
      fixedPosition.current = position2;
      return;
    }
    if (interior && isInteriorPosition(position2)) {
      if (position2.dropUp) {
        target.style.bottom = position2.bottom;
      } else {
        target.style.top = position2.top;
      }
      target.style.left = position2.left;
    }
    if (position2.dropUp && position2.dropLeft) {
      setPosition("top-left");
    } else if (position2.dropUp) {
      setPosition("top-right");
    } else if (position2.dropLeft) {
      setPosition("bottom-left");
    } else {
      setPosition("bottom-right");
    }
  };
  const isOutsideDropdown = (element) => (!wrapperRef.current || !nodeBelongs(wrapperRef.current, element)) && (!dropdownContainerRef.current || !nodeBelongs(dropdownContainerRef.current, element));
  const focusHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onFocus, event);
    }
  };
  const blurHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onBlur, event);
    }
  };
  const fixStretching = () => {
    const classNameToRemove = styles_css_default["stretch-beyond-trigger-width"];
    if (open && stretchBeyondTriggerWidth && dropdownRef.current && triggerRef.current && dropdownRef.current.classList.contains(classNameToRemove) && !hasEnoughSpaceToStretchBeyondTriggerWidth({
      triggerElement: triggerRef.current,
      dropdownElement: dropdownRef.current,
      desiredMinWidth: minWidth,
      expandToViewport,
      stretchWidth,
      stretchHeight,
      isMobile
    })) {
      dropdownRef.current.classList.remove(classNameToRemove);
    }
  };
  useResizeObserver(() => dropdownRef.current, fixStretching);
  (0, import_react4.useLayoutEffect)(() => {
    const onDropdownOpen = () => {
      if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {
        if (scrollable) {
          dropdownRef.current.classList.add(styles_css_default.nowrap);
        }
        setDropdownPosition(...calculatePosition(dropdownRef.current, triggerRef.current, verticalContainerRef.current, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth), dropdownRef.current, verticalContainerRef.current);
        if (scrollable) {
          dropdownRef.current.classList.remove(styles_css_default.nowrap);
        }
      }
    };
    onDropdownOpen();
    if (open) {
      window.addEventListener("scroll", onDropdownOpen);
      const timeoutId = setTimeout(() => {
        window.removeEventListener("scroll", onDropdownOpen);
      }, 500);
      return () => {
        clearTimeout(timeoutId);
        window.removeEventListener("scroll", onDropdownOpen);
      };
    }
  }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth, isMobile, contentKey]);
  (0, import_react4.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (e) => {
      if (!nodeBelongs(dropdownRef.current, e.target) && !nodeBelongs(triggerRef.current, e.target)) {
        fireNonCancelableEvent(onDropdownClose);
      }
    };
    window.addEventListener("click", clickListener, true);
    return () => {
      window.removeEventListener("click", clickListener, true);
    };
  }, [open, onDropdownClose]);
  (0, import_react4.useLayoutEffect)(() => {
    if (!expandToViewport || !open) {
      return;
    }
    const updateDropdownPosition = () => {
      if (triggerRef.current && dropdownRef.current && verticalContainerRef.current) {
        const triggerRect = triggerRef.current.getBoundingClientRect();
        const target = dropdownRef.current;
        if (fixedPosition.current) {
          if (fixedPosition.current.dropUp) {
            dropdownRef.current.style.bottom = `calc(100% - ${triggerRect.top}px)`;
          } else {
            target.style.top = `${triggerRect.bottom}px`;
          }
          if (fixedPosition.current.dropLeft) {
            target.style.left = `calc(${triggerRect.right}px - ${fixedPosition.current.width})`;
          } else {
            target.style.left = `${triggerRect.left}px`;
          }
        }
      }
    };
    updateDropdownPosition();
    window.addEventListener("scroll", updateDropdownPosition, true);
    window.addEventListener("resize", updateDropdownPosition, true);
    return () => {
      window.removeEventListener("scroll", updateDropdownPosition, true);
      window.removeEventListener("resize", updateDropdownPosition, true);
    };
  }, [open, expandToViewport]);
  const referrerId = useUniqueId();
  return import_react4.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.root, interior && styles_css_default.interior, stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: wrapperRef, onFocus: focusHandler, onBlur: blurHandler },
    import_react4.default.createElement("div", { id: referrerId, className: clsx_m_default(stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: triggerRef }, trigger),
    import_react4.default.createElement(TabTrap, { focusNextCallback: () => {
      var _a;
      return dropdownRef.current && ((_a = getFirstFocusable(dropdownRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
    }, disabled: !open || !loopFocus }),
    import_react4.default.createElement(
      DropdownContainer,
      { renderWithPortal: expandToViewport && !interior, id: dropdownId, referrerId, open },
      import_react4.default.createElement(Transition, { in: open !== null && open !== void 0 ? open : false, exit: false }, (state, ref) => import_react4.default.createElement(
        "div",
        { ref: dropdownContainerRef },
        import_react4.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getLastFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus }),
        import_react4.default.createElement(TransitionContent, { state, transitionRef: ref, dropdownClasses, open, stretchWidth, interior, header, expandToViewport, stretchBeyondTriggerWidth, footer, onMouseDown, isRefresh, dropdownRef, verticalContainerRef, position, id: dropdownContentId, role: dropdownContentRole, ariaLabelledby, ariaDescribedby }, children),
        import_react4.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getFirstFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus })
      ))
    )
  );
};
var isInteriorPosition = (position) => position.bottom !== void 0;
var dropdown_default = Dropdown;

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-open-state.js
var import_react5 = __toESM(require_react());
var useOpenState = ({ onOpen, onClose }) => {
  const [isOpen, setIsOpen] = (0, import_react5.useState)(false);
  const [openedWithKeyboard, setOpenedWithKeyboard] = (0, import_react5.useState)(false);
  const openDropdown = (isKeyboard) => {
    if (!isOpen) {
      setIsOpen(true);
      setOpenedWithKeyboard(!!isKeyboard);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  };
  const closeDropdown = () => {
    if (isOpen) {
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  const toggleDropdown = () => {
    if (isOpen) {
      closeDropdown();
    } else {
      openDropdown(false);
    }
  };
  return { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard };
};

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/internal/components/options-list/styles.scoped.css";
var styles_css_default2 = {
  "options-list": "awsui_options-list_19gcf_halkh_99",
  "decrease-block-margin": "awsui_decrease-block-margin_19gcf_halkh_149"
};

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var BOTTOM_TRIGGER_OFFSET = 80;
var getItemIndex = (containerRef, event) => {
  const target = findUpUntil(event.target, (element) => element === containerRef.current || !!element.dataset.mouseTarget);
  const mouseTarget = target === null || target === void 0 ? void 0 : target.dataset.mouseTarget;
  return mouseTarget ? parseInt(mouseTarget) : -1;
};
var OptionsList = (_a, ref) => {
  var { open, statusType, children, nativeAttributes = {}, onKeyDown, onBlur, onFocus, onLoadMore, onMouseUp, onMouseMove, position = "relative", role = "listbox", decreaseBlockMargin = false, ariaLabel, ariaLabelledby, ariaDescribedby } = _a, restProps = __rest(_a, ["open", "statusType", "children", "nativeAttributes", "onKeyDown", "onBlur", "onFocus", "onLoadMore", "onMouseUp", "onMouseMove", "position", "role", "decreaseBlockMargin", "ariaLabel", "ariaLabelledby", "ariaDescribedby"]);
  const baseProps = getBaseProps(restProps);
  const menuRef = (0, import_react6.useRef)(null);
  const handleScroll = useStableCallback(() => {
    const scrollContainer = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current;
    if (scrollContainer) {
      const bottomEdgePosition = scrollContainer.scrollTop + scrollContainer.clientHeight;
      const remainingScrollHeight = scrollContainer.scrollHeight - bottomEdgePosition;
      if (remainingScrollHeight < BOTTOM_TRIGGER_OFFSET) {
        fireNonCancelableEvent(onLoadMore);
      }
    }
  });
  (0, import_react6.useEffect)(() => {
    if (open && statusType === "pending") {
      handleScroll();
    }
  }, [open, statusType, handleScroll]);
  const className = clsx_m_default(styles_css_default2["options-list"], {
    [styles_css_default2["decrease-block-margin"]]: decreaseBlockMargin
  });
  const mergedRef = useMergeRefs(ref, menuRef);
  return import_react6.default.createElement("ul", Object.assign({}, baseProps, nativeAttributes, { className, ref: mergedRef, style: { position }, role, onScroll: handleScroll, onKeyDown: (event) => onKeyDown && fireKeyboardEvent(onKeyDown, event), onMouseMove: (event) => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(getItemIndex(menuRef, event)), onMouseUp: (event) => onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(getItemIndex(menuRef, event)), onBlur: (event) => fireNonCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }), onFocus: () => fireNonCancelableEvent(onFocus), tabIndex: -1, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), open && children);
};
var options_list_default = import_react6.default.forwardRef(OptionsList);

export {
  Transition,
  useDropdownContext,
  dropdown_default,
  useOpenState,
  options_list_default
};
//# sourceMappingURL=chunk-SJ7LIZY2.js.map

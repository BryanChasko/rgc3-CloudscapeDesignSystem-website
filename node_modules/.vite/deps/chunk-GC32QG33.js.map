{
  "version": 3,
  "sources": ["../../src/internal/utils/node-belongs.ts", "../../src/internal/analytics/hooks/use-funnel.ts", "../../src/internal/analytics/context/analytics-context.ts", "../../src/internal/analytics/index.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { findUpUntil } from './dom';\nimport { nodeContains } from '@cloudscape-design/component-toolkit/dom';\n\n/**\n * Checks whether the given node (target) belongs to the container.\n * The function is similar to nodeContains but also accounts for dropdowns with expandToViewport=true.\n *\n * @param container Container node\n * @param target Node that is checked to be a descendant of the container\n */\nexport function nodeBelongs(container: Node | null, target: Node | EventTarget | null): boolean {\n  if (!(target instanceof Node)) {\n    return false;\n  }\n  const portal = findUpUntil(\n    target as HTMLElement,\n    node => node === container || (node instanceof HTMLElement && !!node.dataset.awsuiReferrerId)\n  );\n  if (portal && portal === container) {\n    // We found the container as a direct ancestor without a portal\n    return true;\n  }\n  const referrer = portal instanceof HTMLElement ? document.getElementById(portal.dataset.awsuiReferrerId ?? '') : null;\n  return referrer ? nodeContains(container, referrer) : nodeContains(container, target);\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useContext } from 'react';\nimport {\n  FunnelContext,\n  FunnelNameSelectorContext,\n  FunnelStepContext,\n  FunnelSubStepContext,\n} from '../context/analytics-context';\nimport {\n  DATA_ATTR_FUNNEL_INTERACTION_ID,\n  DATA_ATTR_FUNNEL_SUBSTEP,\n  getNameFromSelector,\n  getSubStepAllSelector,\n} from '../selectors';\nimport { FunnelMetrics } from '../';\nimport { nodeBelongs } from '../../utils/node-belongs';\n\n/**\n * Custom React Hook to manage and interact with FunnelSubStep.\n * This hook will provide necessary properties and methods required\n * to track and manage interactions with a FunnelSubStep component.\n *\n * The `onFocus` method is used to track the beginning of interaction with the FunnelSubStep.\n * The `onBlur` method is used to track the completion of interaction with the FunnelSubStep.\n * The subStepId is a unique identifier for the funnel sub-step.\n * The subStepRef is a reference to the DOM element of the funnel sub-step.\n */\nexport const useFunnelSubStep = () => {\n  const context = useContext(FunnelSubStepContext);\n  const { funnelInteractionId, funnelState, latestFocusCleanupFunction } = useFunnel();\n  const { stepNumber, stepNameSelector, subStepConfiguration } = useFunnelStep();\n\n  const {\n    subStepId,\n    subStepSelector,\n    subStepNameSelector,\n    subStepRef,\n    isNestedSubStep,\n    mousePressed,\n    isFocusedSubStep,\n    focusCleanupFunction,\n  } = context;\n\n  if (isNestedSubStep) {\n    return context;\n  }\n\n  const onFocus = async (event: React.FocusEvent<HTMLDivElement>) => {\n    const element = event.target;\n    // Ignore spurious focus events, such as when the browser window is focused again.\n    await new Promise(r => setTimeout(r, 1));\n    if (document.activeElement !== element) {\n      return;\n    }\n\n    if (isFocusedSubStep.current) {\n      return;\n    }\n    isFocusedSubStep.current = true;\n\n    if (funnelInteractionId && subStepId) {\n      /*\n        If the previously focused substep has provided a cleanup function, we\n        call it here on behalf of the previously focused substep.\n      */\n      latestFocusCleanupFunction.current?.();\n\n      const subStepName = getNameFromSelector(subStepNameSelector);\n      const stepName = getNameFromSelector(stepNameSelector);\n      const subStepNumber = subStepConfiguration.current\n        ?.get(stepNumber)\n        ?.find(step => step.name === subStepName)?.number;\n      FunnelMetrics.funnelSubStepStart({\n        funnelInteractionId,\n        subStepSelector,\n        subStepNameSelector,\n        subStepName,\n        subStepNumber,\n        stepNumber,\n        stepName,\n        stepNameSelector,\n        subStepAllSelector: getSubStepAllSelector(),\n      });\n\n      /*\n        This cleanup function will be called when the user leaves this substep.\n        The function might be called either:\n\n          - by the next focused substep as `latestFocusCleanupFunction`\n            (through a separate instance of the function we're currently in), or\n\n          - by the same substep as `focusCleanupFunction`\n            (through the `onMouseUp` handler or the `onBlur` handler).\n      */\n      let cleanupFunctionHasBeenRun = false;\n      focusCleanupFunction.current = () => {\n        if (cleanupFunctionHasBeenRun) {\n          return;\n        }\n        cleanupFunctionHasBeenRun = true;\n\n        const subStepNumber = subStepConfiguration.current?.get(stepNumber)?.find(s => s.name === subStepName)?.number;\n\n        if (funnelState.current !== 'cancelled') {\n          FunnelMetrics.funnelSubStepComplete({\n            funnelInteractionId,\n            subStepSelector,\n            subStepNameSelector,\n            subStepName,\n            subStepNumber,\n            stepNumber,\n            stepName,\n            stepNameSelector,\n            subStepAllSelector: getSubStepAllSelector(),\n          });\n        }\n      };\n      latestFocusCleanupFunction.current = focusCleanupFunction.current;\n    }\n  };\n\n  const onBlur = (event: React.FocusEvent<HTMLDivElement>) => {\n    if (mousePressed.current) {\n      /*\n       Ignore blur events that are caused by mouse interaction, because these events don't\n       always reflect user intention. For example, clicking the label of an interactive form\n       element will briefly blur it.\n       The mouse-caused events are handled in the global `onMouseUp` handler of the substep\n       context instead.\n       */\n      return;\n    }\n\n    if (!subStepRef.current || !event.relatedTarget || !nodeBelongs(subStepRef.current, event.relatedTarget)) {\n      isFocusedSubStep.current = false;\n\n      if (funnelInteractionId && subStepId && funnelState.current !== 'cancelled') {\n        /*\n         Run this substep's own focus cleanup function if another substep\n         hasn't already done it for us.\n         */\n        focusCleanupFunction.current?.();\n      }\n    }\n  };\n\n  const funnelSubStepProps: Record<string, any> = funnelInteractionId\n    ? {\n        [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,\n        onFocus,\n        onBlur,\n      }\n    : {};\n\n  return { funnelSubStepProps, ...context };\n};\n\n/**\n * Custom React Hook to manage and interact with FunnelStep.\n * This hook will provide necessary properties required to track\n * and manage interactions with a FunnelStep component.\n *\n * The 'data-analytics-funnel-step' property of funnelStepProps is used to track the index of the current step in the funnel.\n * The context contains additional properties of the FunnelStep.\n */\nexport const useFunnelStep = () => {\n  const context = useContext(FunnelStepContext);\n  return context;\n};\n\n/**\n * Custom React Hook to manage and interact with Funnel.\n * This hook will provide necessary properties required to track\n * and manage interactions with a Funnel component.\n *\n * The 'data-analytics-funnel-interaction-id' property of funnelProps is used to track the unique identifier of the current interaction with the funnel.\n */\nexport const useFunnel = () => {\n  const context = useContext(FunnelContext);\n  const funnelProps: Record<string, string | number | boolean | undefined> = context.funnelInteractionId\n    ? {\n        [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId,\n      }\n    : {};\n\n  return { funnelProps, ...context };\n};\n\nexport const useFunnelNameSelector = () => {\n  const context = useContext(FunnelNameSelectorContext);\n  return context;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { MutableRefObject, RefObject, createContext } from 'react';\nimport { FunnelType, SubStepConfiguration } from '../interfaces';\nimport { getFunnelNameSelector } from '../selectors';\n\nexport type FunnelState = 'default' | 'validating' | 'complete' | 'cancelled';\n\nexport interface FunnelContextValue {\n  funnelInteractionId: string | undefined;\n  funnelType: FunnelType;\n  funnelNameSelector: string;\n  optionalStepNumbers: number[];\n  totalFunnelSteps: number;\n  funnelSubmit: () => void;\n  funnelCancel: () => void;\n  setFunnelInteractionId: (funnelInteractionId: string) => void;\n  submissionAttempt: number;\n  funnelNextOrSubmitAttempt: () => void;\n  funnelState: RefObject<FunnelState>;\n  errorCount: MutableRefObject<number>;\n  loadingButtonCount: MutableRefObject<number>;\n  latestFocusCleanupFunction: MutableRefObject<undefined | (() => void)>;\n  isInFunnel: boolean;\n  wizardCount: MutableRefObject<number>;\n}\n\nexport interface FunnelStepContextValue {\n  stepNameSelector: string;\n  stepNumber: number;\n  funnelStepProps?: Record<string, string | number | boolean | undefined>;\n  subStepCount: MutableRefObject<number>;\n  isInStep: boolean;\n  funnelInteractionId: string | undefined;\n  /** This function is called when the list of substeps in this step changes.  */\n  onStepChange: () => void;\n  subStepConfiguration: MutableRefObject<Map<number, SubStepConfiguration[] | undefined> | undefined>;\n}\n\nexport interface FunnelSubStepContextValue {\n  subStepId: string;\n  subStepSelector: string;\n  subStepNameSelector: string;\n  subStepRef: MutableRefObject<HTMLDivElement | null>;\n  mousePressed: MutableRefObject<boolean>;\n  /**\n   * `isFocusedSubStep` is almost the same as checking if document.activeElement\n   * is a child of the curren substep. However, `isFocusedSubStep` stays true\n   * while the mouse button is pressed down, even though some browsers move the focus\n   * to the body element during that time.\n   */\n  isFocusedSubStep: MutableRefObject<boolean>;\n\n  /**\n   * The focus cleanup function should be run when the user leaves the substep.\n   */\n  focusCleanupFunction: MutableRefObject<undefined | (() => void)>;\n  isNestedSubStep: boolean;\n  funnelSubStepProps?: Record<string, string | number | boolean | undefined>;\n}\n\n/* istanbul ignore next */\nexport const FunnelContext = createContext<FunnelContextValue>({\n  funnelInteractionId: undefined,\n  funnelNameSelector: getFunnelNameSelector(),\n  setFunnelInteractionId: () => {},\n  funnelType: 'single-page',\n  optionalStepNumbers: [],\n  totalFunnelSteps: 0,\n  funnelSubmit: () => {},\n  funnelCancel: () => {},\n  submissionAttempt: 0,\n  funnelNextOrSubmitAttempt: () => {},\n  funnelState: { current: 'default' },\n  errorCount: { current: 0 },\n  loadingButtonCount: { current: 0 },\n  latestFocusCleanupFunction: { current: undefined },\n  isInFunnel: false,\n  wizardCount: { current: 0 },\n});\n\nexport const FunnelStepContext = createContext<FunnelStepContextValue>({\n  stepNameSelector: '',\n  stepNumber: 0,\n  subStepCount: { current: 0 },\n  isInStep: false,\n  funnelInteractionId: undefined,\n  onStepChange: () => {},\n  subStepConfiguration: { current: new Map() },\n});\n\nexport const FunnelSubStepContext = createContext<FunnelSubStepContextValue>({\n  subStepId: '',\n  subStepSelector: '',\n  subStepNameSelector: '',\n  subStepRef: { current: null },\n  isNestedSubStep: false,\n  mousePressed: { current: false },\n  isFocusedSubStep: { current: false },\n  focusCleanupFunction: { current: undefined },\n});\n\nexport const FunnelNameSelectorContext = createContext<string | undefined>(undefined);\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/* istanbul ignore file */\n\nimport { IFunnelMetrics } from './interfaces';\n\nexport function setFunnelMetrics(funnelMetrics: IFunnelMetrics) {\n  FunnelMetrics = funnelMetrics;\n}\n\n/**\n * This is a stub implementation of the FunnelMetrics interface and will be replaced during\n * build time with the actual implementation.\n */\nexport let FunnelMetrics: IFunnelMetrics = {\n  funnelStart(): string {\n    return '';\n  },\n\n  funnelError(): void {},\n  funnelComplete(): void {},\n  funnelSuccessful(): void {},\n  funnelCancelled(): void {},\n  funnelChange(): void {},\n  funnelStepStart(): void {},\n  funnelStepComplete(): void {},\n  funnelStepNavigation(): void {},\n  funnelStepError(): void {},\n  funnelStepChange(): void {},\n  funnelSubStepStart(): void {},\n  funnelSubStepComplete(): void {},\n  funnelSubStepError(): void {},\n  helpPanelInteracted(): void {},\n  externalLinkInteracted(): void {},\n};\n"],
  "mappings": "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",
  "names": ["import_react", "subStepNumber", "_c", "_b", "_a"]
}

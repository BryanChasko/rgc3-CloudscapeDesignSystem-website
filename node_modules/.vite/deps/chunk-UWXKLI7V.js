import {
  internal_default,
  styles_css_default
} from "./chunk-3LGW5Z6M.js";
import {
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent
} from "./chunk-CHBULPAM.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/input/index.js
var import_react = __toESM(require_react());
var Input = import_react.default.forwardRef((_a, ref) => {
  var { value, type = "text", step, inputMode, autoComplete = true, spellcheck, disabled, readOnly, disableBrowserAutocorrect, onKeyDown, onKeyUp, onChange, onBlur, onFocus, ariaRequired, name, placeholder, autoFocus, ariaLabel, ariaLabelledby, ariaDescribedby, invalid, controlId, clearAriaLabel } = _a, rest = __rest(_a, ["value", "type", "step", "inputMode", "autoComplete", "spellcheck", "disabled", "readOnly", "disableBrowserAutocorrect", "onKeyDown", "onKeyUp", "onChange", "onBlur", "onFocus", "ariaRequired", "name", "placeholder", "autoFocus", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "invalid", "controlId", "clearAriaLabel"]);
  const baseComponentProps = useBaseComponent("Input", {
    props: { autoComplete, autoFocus, disableBrowserAutocorrect, inputMode, readOnly, spellcheck, type }
  });
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react.useRef)(null);
  (0, import_react.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    },
    select() {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    }
  }), [inputRef]);
  return import_react.default.createElement(internal_default, Object.assign({ ref: inputRef }, Object.assign(Object.assign(Object.assign({}, baseProps), baseComponentProps), {
    autoComplete,
    ariaLabel,
    ariaRequired,
    autoFocus,
    disabled,
    disableBrowserAutocorrect,
    name,
    onKeyDown,
    onKeyUp,
    onChange,
    onBlur,
    onFocus,
    placeholder,
    readOnly,
    type,
    step,
    inputMode,
    spellcheck,
    value,
    ariaDescribedby,
    ariaLabelledby,
    invalid,
    controlId,
    clearAriaLabel
  }), { className: clsx_m_default(styles_css_default.root, baseProps.className), __inheritFormFieldProps: true }));
});
applyDisplayName(Input, "Input");
var input_default = Input;

export {
  input_default
};
//# sourceMappingURL=chunk-UWXKLI7V.js.map

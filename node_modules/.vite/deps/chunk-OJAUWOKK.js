import {
  InfoLinkLabelContext
} from "./chunk-U4MR2ZVK.js";
import {
  LinkDefaultVariantContext
} from "./chunk-CGX6IJLX.js";
import {
  useInternalI18n
} from "./chunk-VCW6C342.js";
import {
  checkSafeUrl
} from "./chunk-VBS6KN2M.js";
import {
  useForwardFocus
} from "./chunk-YTRJQH4M.js";
import {
  useSingleTabStopNavigation
} from "./chunk-KYLY6TIG.js";
import {
  fireCancelableEvent,
  isPlainLeftClick
} from "./chunk-T3BYYNEM.js";
import {
  FunnelMetrics,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep
} from "./chunk-GC32QG33.js";
import {
  DATA_ATTR_FUNNEL_VALUE,
  getFunnelValueSelector,
  getNameFromSelector,
  getSubStepAllSelector
} from "./chunk-37SB7DJX.js";
import {
  useUniqueId
} from "./chunk-3TE4OIE4.js";
import {
  internal_default
} from "./chunk-NUCDU4ZC.js";
import {
  useMergeRefs
} from "./chunk-NYW4WZSZ.js";
import {
  KeyCode,
  __rest,
  clsx_m_default,
  getBaseProps,
  useVisualRefresh
} from "./chunk-CHBULPAM.js";
import {
  __toESM,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/@cloudscape-design/components/link/internal.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/styles.css.js
import "/home/bryanchasko/code/rgc3/node_modules/@cloudscape-design/components/link/styles.scoped.css";
var styles_css_default = {
  "link": "awsui_link_4c84z_i6aqa_99",
  "variant-secondary": "awsui_variant-secondary_4c84z_i6aqa_168",
  "variant-primary": "awsui_variant-primary_4c84z_i6aqa_203",
  "variant-info": "awsui_variant-info_4c84z_i6aqa_236",
  "variant-value-large": "awsui_variant-value-large_4c84z_i6aqa_271",
  "variant-top-navigation": "awsui_variant-top-navigation_4c84z_i6aqa_303",
  "variant-recovery": "awsui_variant-recovery_4c84z_i6aqa_336",
  "button": "awsui_button_4c84z_i6aqa_369",
  "color-inverted": "awsui_color-inverted_4c84z_i6aqa_404",
  "font-size-body-s": "awsui_font-size-body-s_4c84z_i6aqa_425",
  "font-size-body-m": "awsui_font-size-body-m_4c84z_i6aqa_432",
  "font-size-heading-xs": "awsui_font-size-heading-xs_4c84z_i6aqa_438",
  "font-size-heading-s": "awsui_font-size-heading-s_4c84z_i6aqa_444",
  "font-size-heading-m": "awsui_font-size-heading-m_4c84z_i6aqa_451",
  "font-size-heading-l": "awsui_font-size-heading-l_4c84z_i6aqa_458",
  "font-size-heading-xl": "awsui_font-size-heading-xl_4c84z_i6aqa_465",
  "font-size-display-l": "awsui_font-size-display-l_4c84z_i6aqa_472",
  "font-size-inherit": "awsui_font-size-inherit_4c84z_i6aqa_479",
  "icon-wrapper": "awsui_icon-wrapper_4c84z_i6aqa_491",
  "icon": "awsui_icon_4c84z_i6aqa_491"
};

// node_modules/@cloudscape-design/components/link/internal.js
var InternalLink = import_react.default.forwardRef((_a, ref) => {
  var { variant: providedVariant, fontSize = "body-m", color = "normal", external = false, target, href, rel, ariaLabel, externalIconAriaLabel, onFollow, children, __internalRootRef = null } = _a, props = __rest(_a, ["variant", "fontSize", "color", "external", "target", "href", "rel", "ariaLabel", "externalIconAriaLabel", "onFollow", "children", "__internalRootRef"]);
  checkSafeUrl("Link", href);
  const isButton = !href;
  const { defaultVariant } = (0, import_react.useContext)(LinkDefaultVariantContext);
  const variant = providedVariant || defaultVariant;
  const specialStyles = ["top-navigation", "link", "recovery"];
  const hasSpecialStyle = specialStyles.indexOf(variant) > -1;
  const i18n = useInternalI18n("link");
  const baseProps = getBaseProps(props);
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const uniqueId = useUniqueId("link");
  const linkId = useUniqueId("link-self");
  const infoId = useUniqueId("link-info");
  const infoLinkLabelFromContext = (0, import_react.useContext)(InfoLinkLabelContext);
  const { funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const fireFunnelEvent = (funnelInteractionId2) => {
    if (variant === "info") {
      const stepName = getNameFromSelector(stepNameSelector);
      const subStepName = getNameFromSelector(subStepNameSelector);
      FunnelMetrics.helpPanelInteracted({
        funnelInteractionId: funnelInteractionId2,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    } else if (external) {
      const stepName = getNameFromSelector(stepNameSelector);
      const subStepName = getNameFromSelector(subStepNameSelector);
      FunnelMetrics.externalLinkInteracted({
        funnelInteractionId: funnelInteractionId2,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    }
  };
  const fireFollowEvent = (event) => {
    if (funnelInteractionId) {
      fireFunnelEvent(funnelInteractionId);
    }
    fireCancelableEvent(onFollow, { href, external, target: anchorTarget }, event);
  };
  const handleLinkClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireFollowEvent(event);
    }
  };
  const handleButtonClick = (event) => {
    fireFollowEvent(event);
  };
  const handleButtonKeyDown = (event) => {
    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {
      event.preventDefault();
      fireFollowEvent(event);
    }
  };
  const linkRef = (0, import_react.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  useForwardFocus(ref, linkRef);
  const applyButtonStyles = isButton && isVisualRefresh && !hasSpecialStyle;
  const sharedProps = Object.assign(Object.assign({ id: linkId }, baseProps), {
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: useMergeRefs(linkRef, __internalRootRef),
    className: clsx_m_default(styles_css_default.link, baseProps.className, applyButtonStyles ? styles_css_default.button : null, styles_css_default[getVariantStyle(variant)], styles_css_default[getFontSizeStyle(variant, fontSize)], styles_css_default[getColorStyle(variant, color)]),
    "aria-label": ariaLabel,
    "aria-labelledby": "",
    [DATA_ATTR_FUNNEL_VALUE]: uniqueId
  });
  if (variant === "info" && infoLinkLabelFromContext && !ariaLabel) {
    sharedProps["aria-labelledby"] = `${sharedProps.id} ${infoId} ${infoLinkLabelFromContext}`;
  }
  const renderedExternalIconAriaLabel = i18n("externalIconAriaLabel", externalIconAriaLabel);
  const content = import_react.default.createElement(
    import_react.default.Fragment,
    null,
    children,
    external && import_react.default.createElement(
      "span",
      { className: styles_css_default["icon-wrapper"] },
      "Â ",
      import_react.default.createElement(
        "span",
        { className: styles_css_default.icon, "aria-label": renderedExternalIconAriaLabel, role: renderedExternalIconAriaLabel ? "img" : void 0 },
        import_react.default.createElement(internal_default, { name: "external", size: "inherit" })
      )
    ),
    variant === "info" && import_react.default.createElement("span", { hidden: true, id: infoId }, ":")
  );
  const { tabIndex } = useSingleTabStopNavigation(linkRef, { tabIndex: isButton ? 0 : void 0 });
  if (isButton) {
    return import_react.default.createElement("a", Object.assign({}, sharedProps, { role: "button", tabIndex, onKeyDown: handleButtonKeyDown, onClick: handleButtonClick }), content);
  }
  return (
    // we dynamically set proper rel in the code above
    // eslint-disable-next-line react/jsx-no-target-blank
    import_react.default.createElement("a", Object.assign({}, sharedProps, { tabIndex, target: anchorTarget, rel: anchorRel, href, onClick: handleLinkClick }), content)
  );
});
function getVariantStyle(variant) {
  return `variant-${variant.replace(/^awsui-/, "")}`;
}
function getFontSizeStyle(variant, fontSize) {
  switch (variant) {
    case "info":
      return "font-size-body-s";
    case "awsui-value-large":
      return "font-size-display-l";
    default:
      return `font-size-${fontSize}`;
  }
}
function getColorStyle(variant, color) {
  return `color-${variant === "info" ? "normal" : color}`;
}
var internal_default2 = InternalLink;

export {
  internal_default2 as internal_default
};
//# sourceMappingURL=chunk-OJAUWOKK.js.map

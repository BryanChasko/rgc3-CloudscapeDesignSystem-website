{
  "version": 3,
  "sources": ["../../src/app-layout/index.tsx", "../../src/app-layout/widget.tsx", "../../src/app-layout/implementation.tsx", "../../src/app-layout/classic.tsx", "../../src/app-layout/defaults.ts", "../../src/app-layout/notifications/index.tsx", "../../@cloudscape-design/components/app-layout/notifications/styles.css.js", "../../src/app-layout/mobile-toolbar/index.tsx", "../../src/app-layout/toggles/index.tsx", "../../@cloudscape-design/components/app-layout/toggles/styles.css.js", "../../src/app-layout/drawer/overflow-menu.tsx", "../../@cloudscape-design/components/app-layout/mobile-toolbar/styles.css.js", "../../@cloudscape-design/components/app-layout/styles.css.js", "../../@cloudscape-design/components/app-layout/test-classes/styles.css.js", "../../src/app-layout/drawer/drawers-helpers.ts", "../../src/app-layout/utils/use-drawers.ts", "../../src/app-layout/runtime-api.tsx", "../../src/app-layout/utils/use-focus-control.ts", "../../src/app-layout/utils/use-content-height.ts", "../../src/app-layout/utils/use-observed-element.ts", "../../src/split-panel/utils/size-utils.ts", "../../src/app-layout/content-wrapper/index.tsx", "../../@cloudscape-design/components/app-layout/content-wrapper/styles.css.js", "../../src/app-layout/drawer/index.tsx", "../../@cloudscape-design/components/app-layout/drawer/styles.css.js", "../../src/app-layout/drawer/resizable-drawer.tsx", "../../src/app-layout/utils/use-pointer-events.ts", "../../src/app-layout/utils/use-keyboard-events.ts", "../../src/split-panel/icons/resize-handler.tsx", "../../@cloudscape-design/components/split-panel/styles.css.js", "../../src/app-layout/split-panel/constants.ts", "../../src/app-layout/split-panel/drawer.tsx", "../../@cloudscape-design/components/app-layout/split-panel/styles.css.js", "../../src/internal/context/split-panel-context.ts", "../../src/app-layout/split-panel/provider.tsx", "../../src/app-layout/utils/use-app-layout-rect.ts", "../../src/app-layout/utils/use-split-panel-focus-control.ts", "../../src/app-layout/visual-refresh/index.tsx", "../../src/app-layout/visual-refresh/context.tsx", "../../src/app-layout/visual-refresh/split-panel.tsx", "../../@cloudscape-design/components/app-layout/visual-refresh/styles.css.js", "../../src/app-layout/utils/use-resize.tsx", "../../src/app-layout/visual-refresh/use-background-overlap.tsx", "../../src/app-layout/visual-refresh/background.tsx", "../../src/app-layout/visual-refresh/breadcrumbs.tsx", "../../src/app-layout/visual-refresh/drawers.tsx", "../../src/app-layout/visual-refresh/trigger-button.tsx", "../../src/app-layout/visual-refresh/header.tsx", "../../src/app-layout/visual-refresh/layout.tsx", "../../src/app-layout/visual-refresh/main.tsx", "../../src/app-layout/visual-refresh/mobile-toolbar.tsx", "../../src/app-layout/visual-refresh/navigation.tsx", "../../src/app-layout/visual-refresh/notifications.tsx", "../../src/app-layout/visual-refresh/tools.tsx", "../../src/app-layout/internal.tsx"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useInternalI18n } from '../i18n/context';\nimport { getBaseProps } from '../internal/base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { AppLayoutProps } from './interfaces';\nimport { AppLayoutInternal } from './internal';\n\nexport { AppLayoutProps };\n\nconst AppLayout = React.forwardRef(\n  (\n    { contentType = 'default', headerSelector = '#b #h', footerSelector = '#b #f', ...rest }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    const { __internalRootRef } = useBaseComponent<HTMLDivElement>('AppLayout', {\n      props: {\n        contentType,\n        disableContentPaddings: rest.disableContentPaddings,\n        disableBodyScroll: rest.disableBodyScroll,\n        navigationWidth: rest.navigationWidth,\n        navigationHide: rest.navigationHide,\n        toolsHide: rest.toolsHide,\n        toolsWidth: rest.toolsWidth,\n        maxContentWidth: rest.maxContentWidth,\n        minContentWidth: rest.minContentWidth,\n        stickyNotifications: rest.stickyNotifications,\n        disableContentHeaderOverlap: rest.disableContentHeaderOverlap,\n      },\n    });\n\n    const i18n = useInternalI18n('app-layout');\n    const ariaLabels = {\n      navigation: i18n('ariaLabels.navigation', rest.ariaLabels?.navigation),\n      navigationClose: i18n('ariaLabels.navigationClose', rest.ariaLabels?.navigationClose),\n      navigationToggle: i18n('ariaLabels.navigationToggle', rest.ariaLabels?.navigationToggle),\n      notifications: i18n('ariaLabels.notifications', rest.ariaLabels?.notifications),\n      tools: i18n('ariaLabels.tools', rest.ariaLabels?.tools),\n      toolsClose: i18n('ariaLabels.toolsClose', rest.ariaLabels?.toolsClose),\n      toolsToggle: i18n('ariaLabels.toolsToggle', rest.ariaLabels?.toolsToggle),\n      drawers: i18n('ariaLabels.drawers', rest.ariaLabels?.drawers),\n      drawersOverflow: i18n('ariaLabels.drawersOverflow', rest.ariaLabels?.drawersOverflow),\n      drawersOverflowWithBadge: i18n('ariaLabels.drawersOverflowWithBadge', rest.ariaLabels?.drawersOverflowWithBadge),\n    };\n\n    // This re-builds the props including the default values\n    const props = { contentType, headerSelector, footerSelector, ...rest, ariaLabels };\n\n    const baseProps = getBaseProps(rest);\n\n    return (\n      <div ref={__internalRootRef} {...baseProps}>\n        <AppLayoutInternal ref={ref} {...props} />\n      </div>\n    );\n  }\n);\n\napplyDisplayName(AppLayout, 'AppLayout');\nexport default AppLayout;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getGlobalFlag } from '../internal/utils/global-flags';\nimport { AppLayoutProps } from './interfaces';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { AppLayoutImplementation } from './implementation';\n\ntype AppLayoutType = React.ForwardRefExoticComponent<AppLayoutProps & React.RefAttributes<AppLayoutProps.Ref>>;\n\nexport function createWidgetizedAppLayout(AppLayoutLoader?: AppLayoutType): AppLayoutType {\n  return React.forwardRef((props, ref) => {\n    const isRefresh = useVisualRefresh();\n    if (isRefresh && getGlobalFlag('appLayoutWidget') && AppLayoutLoader) {\n      return <AppLayoutLoader ref={ref} {...props} />;\n    }\n\n    return <AppLayoutImplementation ref={ref} {...props} />;\n  });\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport ClassicAppLayout from './classic';\nimport RefreshedAppLayout from './visual-refresh';\nimport { AppLayoutProps } from './interfaces';\n\nexport const AppLayoutImplementation = React.forwardRef<AppLayoutProps.Ref, AppLayoutProps>((props, ref) => {\n  const isRefresh = useVisualRefresh();\n  return isRefresh ? <RefreshedAppLayout ref={ref} {...props} /> : <ClassicAppLayout ref={ref} {...props} />;\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { applyDefaults } from './defaults';\nimport { AppLayoutProps } from './interfaces';\nimport { Notifications } from './notifications';\nimport { MobileToolbar } from './mobile-toolbar';\nimport { useFocusControl } from './utils/use-focus-control';\nimport useContentHeight from './utils/use-content-height';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nimport { findUpUntil } from '../internal/utils/dom';\nimport { AppLayoutContext } from '../internal/context/app-layout-context';\nimport { SplitPanelSideToggleProps } from '../internal/context/split-panel-context';\nimport {\n  CONSTRAINED_MAIN_PANEL_MIN_HEIGHT,\n  CONSTRAINED_PAGE_HEIGHT,\n  getSplitPanelDefaultSize,\n  MAIN_PANEL_MIN_HEIGHT,\n} from '../split-panel/utils/size-utils';\nimport ContentWrapper, { ContentWrapperProps } from './content-wrapper';\nimport { Drawer, DrawerTriggersBar } from './drawer';\nimport { ResizableDrawer } from './drawer/resizable-drawer';\nimport {\n  SPLIT_PANEL_MIN_WIDTH,\n  SideSplitPanelDrawer,\n  SplitPanelProvider,\n  SplitPanelProviderProps,\n} from './split-panel';\nimport useAppLayoutRect from './utils/use-app-layout-rect';\nimport { isDevelopment } from '../internal/is-development';\nimport { useStableCallback, warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { useSplitPanelFocusControl } from './utils/use-split-panel-focus-control';\nimport { TOOLS_DRAWER_ID, useDrawers } from './utils/use-drawers';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { togglesConfig } from './toggles';\n\nconst ClassicAppLayout = React.forwardRef(\n  (\n    {\n      navigation,\n      navigationWidth = 280,\n      navigationHide,\n      navigationOpen: controlledNavigationOpen,\n      tools,\n      toolsWidth = 290,\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      breadcrumbs,\n      notifications,\n      stickyNotifications,\n      contentHeader,\n      disableContentHeaderOverlap,\n      content,\n      contentType = 'default',\n      disableContentPaddings,\n      disableBodyScroll,\n      maxContentWidth,\n      minContentWidth,\n      headerSelector = '#b #h',\n      footerSelector = '#b #f',\n      ariaLabels,\n      splitPanel,\n      splitPanelSize: controlledSplitPanelSize,\n      splitPanelOpen: controlledSplitPanelOpen,\n      splitPanelPreferences: controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      onSplitPanelResize,\n      onSplitPanelToggle,\n      onNavigationChange,\n      onToolsChange,\n      drawers: controlledDrawers,\n      onDrawerChange,\n      activeDrawerId: controlledActiveDrawerId,\n      ...rest\n    }: AppLayoutProps,\n    ref: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    if (isDevelopment) {\n      if (controlledToolsOpen && toolsHide) {\n        warnOnce(\n          'AppLayout',\n          `You have enabled both the \\`toolsOpen\\` prop and the \\`toolsHide\\` prop. This is not supported. Set \\`toolsOpen\\` to \\`false\\` when you set \\`toolsHide\\` to \\`true\\`.`\n        );\n      }\n    }\n\n    // Private API for embedded view mode\n    const __embeddedViewMode = Boolean((rest as any).__embeddedViewMode);\n\n    const rootRef = useRef<HTMLDivElement>(null);\n    const isMobile = useMobile();\n\n    const defaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, false);\n    const [navigationOpen = false, setNavigationOpen] = useControllable(\n      controlledNavigationOpen,\n      onNavigationChange,\n      isMobile ? false : defaults.navigationOpen,\n      { componentName: 'AppLayout', controlledProp: 'navigationOpen', changeHandler: 'onNavigationChange' }\n    );\n\n    const [toolsOpen = false, setToolsOpen] = useControllable(\n      controlledToolsOpen,\n      onToolsChange,\n      isMobile ? false : defaults.toolsOpen,\n      { componentName: 'AppLayout', controlledProp: 'toolsOpen', changeHandler: 'onToolsChange' }\n    );\n    const onToolsToggle = (open: boolean) => {\n      setToolsOpen(open);\n      focusToolsButtons();\n      fireNonCancelableEvent(onToolsChange, { open });\n    };\n\n    const {\n      drawers,\n      activeDrawer,\n      minDrawerSize,\n      activeDrawerSize,\n      activeDrawerId,\n      ariaLabelsWithDrawers,\n      onActiveDrawerChange,\n      onActiveDrawerResize,\n    } = useDrawers(\n      {\n        drawers: controlledDrawers,\n        onDrawerChange,\n        activeDrawerId: controlledActiveDrawerId,\n        ...rest,\n      },\n      ariaLabels,\n      {\n        ariaLabels,\n        tools,\n        toolsOpen,\n        toolsHide,\n        toolsWidth,\n        onToolsToggle,\n      }\n    );\n    ariaLabels = ariaLabelsWithDrawers;\n    const hasDrawers = !!drawers;\n\n    const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);\n    const {\n      refs: toolsRefs,\n      setFocus: focusToolsButtons,\n      loseFocus: loseToolsFocus,\n    } = useFocusControl(toolsOpen || activeDrawer !== undefined, true);\n    const {\n      refs: drawerRefs,\n      setFocus: focusDrawersButtons,\n      loseFocus: loseDrawersFocus,\n    } = useFocusControl(!!activeDrawerId, true, activeDrawerId);\n\n    const onNavigationToggle = useStableCallback((open: boolean) => {\n      setNavigationOpen(open);\n      focusNavButtons();\n      fireNonCancelableEvent(onNavigationChange, { open });\n    });\n\n    const onNavigationClick = (event: React.MouseEvent) => {\n      const hasLink = findUpUntil(\n        event.target as HTMLElement,\n        node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n      );\n      if (hasLink) {\n        onNavigationToggle(false);\n      }\n    };\n\n    useEffect(() => {\n      // Close navigation drawer on mobile so that the main content is visible\n      if (isMobile) {\n        onNavigationToggle(false);\n      }\n    }, [isMobile, onNavigationToggle]);\n\n    const navigationVisible = !navigationHide && navigationOpen;\n    const toolsVisible = !toolsHide && toolsOpen;\n\n    const { contentHeightStyle, headerHeight, footerHeight } = useContentHeight(\n      headerSelector,\n      footerSelector,\n      disableBodyScroll\n    );\n\n    const [notificationsHeight, notificationsRef] = useContainerQuery(rect => rect.contentBoxHeight);\n    const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;\n    const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;\n    const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;\n\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      controlledSplitPanelPreferences,\n      onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n    const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n      controlledSplitPanelOpen,\n      onSplitPanelToggle,\n      false,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelOpen',\n        changeHandler: 'onSplitPanelToggle',\n      }\n    );\n\n    const splitPanelPosition = splitPanelPreferences?.position || 'bottom';\n    const [splitPanelReportedToggle, setSplitPanelReportedToggle] = useState<SplitPanelSideToggleProps>({\n      displayed: false,\n      ariaLabel: undefined,\n    });\n    const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));\n\n    const closedDrawerWidth = 40;\n    const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;\n\n    const getEffectiveToolsWidth = () => {\n      if (activeDrawer && activeDrawerSize) {\n        return activeDrawerSize;\n      }\n\n      if (toolsHide || drawers) {\n        return 0;\n      }\n\n      if (toolsOpen) {\n        return toolsWidth;\n      }\n\n      return closedDrawerWidth;\n    };\n\n    const effectiveToolsWidth = getEffectiveToolsWidth();\n\n    const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);\n    const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(\n      controlledSplitPanelSize,\n      onSplitPanelResize,\n      defaultSplitPanelSize,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelSize',\n        changeHandler: 'onSplitPanelResize',\n      }\n    );\n\n    const mainContentRef = useRef<HTMLDivElement>(null);\n    const legacyScrollRootRef = useRef<HTMLElement>(null);\n\n    const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([\n      splitPanelPreferences,\n      splitPanelOpen,\n    ]);\n\n    const onSplitPanelPreferencesSet = useCallback(\n      (detail: { position: 'side' | 'bottom' }) => {\n        setSplitPanelPreferences(detail);\n        setSplitPanelLastInteraction({ type: 'position' });\n        fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n      },\n      [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]\n    );\n    const onSplitPanelSizeSet = useCallback(\n      (newSize: number) => {\n        setSplitPanelSize(newSize);\n        fireNonCancelableEvent(onSplitPanelResize, { size: newSize });\n      },\n      [setSplitPanelSize, onSplitPanelResize]\n    );\n\n    const onSplitPanelToggleHandler = useCallback(() => {\n      setSplitPanelOpen(!splitPanelOpen);\n      setSplitPanelLastInteraction({ type: splitPanelOpen ? 'close' : 'open' });\n      fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n    }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);\n\n    const getSplitPanelMaxHeight = useStableCallback(() => {\n      if (typeof document === 'undefined') {\n        return 0; // render the split panel in its minimum possible size\n      } else if (disableBodyScroll && legacyScrollRootRef.current) {\n        const availableHeight = legacyScrollRootRef.current.clientHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      } else {\n        const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n        return availableHeight < CONSTRAINED_PAGE_HEIGHT\n          ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT\n          : availableHeight - MAIN_PANEL_MIN_HEIGHT;\n      }\n    });\n    const { left: leftOffset, right: rightOffset, width: documentWidth } = useAppLayoutRect(rootRef.current);\n\n    const rightDrawerBarWidth = drawers ? (drawers.length > 1 ? closedDrawerWidth : 0) : 0;\n    const contentPadding = 80;\n    // all content except split-panel + drawers/tools area\n    const resizableSpaceAvailable = Math.max(\n      0,\n      documentWidth -\n        leftOffset -\n        rightOffset -\n        effectiveNavigationWidth -\n        defaults.minContentWidth -\n        contentPadding -\n        rightDrawerBarWidth\n    );\n\n    // if there is no space to display split panel in the side, force to bottom\n    const isSplitPanelForcedPosition =\n      isMobile || resizableSpaceAvailable - effectiveToolsWidth < SPLIT_PANEL_MIN_WIDTH;\n    const finalSplitPanePosition = isSplitPanelForcedPosition ? 'bottom' : splitPanelPosition;\n\n    const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === 'side';\n\n    const sideSplitPanelSize = splitPaneAvailableOnTheSide ? (splitPanelOpen ? splitPanelSize : closedDrawerWidth) : 0;\n    const splitPanelMaxWidth = Math.max(0, resizableSpaceAvailable - effectiveToolsWidth);\n    const drawerMaxSize = Math.max(0, resizableSpaceAvailable - sideSplitPanelSize);\n\n    const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;\n\n    const contentMaxWidthStyle = !isMobile ? { maxWidth: defaults.maxContentWidth } : undefined;\n\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n    const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = useState(0);\n\n    const splitPanelContextProps: SplitPanelProviderProps = {\n      topOffset: headerHeight + (finalSplitPanePosition === 'bottom' ? stickyNotificationsHeight || 0 : 0),\n      bottomOffset: footerHeight,\n      leftOffset:\n        leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),\n      rightOffset: isMobile ? 0 : rightOffset + effectiveToolsWidth + rightDrawerBarWidth,\n      position: finalSplitPanePosition,\n      size: splitPanelSize,\n      maxWidth: splitPanelMaxWidth,\n      getMaxHeight: getSplitPanelMaxHeight,\n      disableContentPaddings,\n      contentWidthStyles: contentMaxWidthStyle,\n      isOpen: splitPanelOpen,\n      isForcedPosition: isSplitPanelForcedPosition,\n      onResize: onSplitPanelSizeSet,\n      onToggle: onSplitPanelToggleHandler,\n      onPreferencesChange: onSplitPanelPreferencesSet,\n      setSplitPanelToggle: setSplitPanelReportedToggle,\n      reportSize: setSplitPanelReportedSize,\n      reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n      refs: splitPanelRefs,\n    };\n    const splitPanelWrapped = splitPanel && (\n      <SplitPanelProvider {...splitPanelContextProps}>\n        {finalSplitPanePosition === 'side' ? (\n          <SideSplitPanelDrawer displayed={splitPanelDisplayed}>{splitPanel}</SideSplitPanelDrawer>\n        ) : (\n          splitPanel\n        )}\n      </SplitPanelProvider>\n    );\n\n    const contentWrapperProps: ContentWrapperProps = {\n      contentType,\n      navigationPadding: navigationHide || !!navigationOpen,\n      contentWidthStyles: !isMobile\n        ? { minWidth: defaults.minContentWidth, maxWidth: defaults.maxContentWidth }\n        : undefined,\n      toolsPadding:\n        // tools padding is displayed in one of the three cases\n        // 1. Nothing on the that screen edge (no tools panel and no split panel)\n        toolsHide ||\n        (hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== 'side')) ||\n        // 2. Tools panel is present and open\n        toolsVisible ||\n        // 3. Split panel is open in side position\n        (splitPaneAvailableOnTheSide && splitPanelOpen),\n      isMobile,\n    };\n\n    useImperativeHandle(ref, () => ({\n      openTools: () => onToolsToggle(true),\n      closeNavigationIfNecessary: () => {\n        if (isMobile) {\n          onNavigationToggle(false);\n        }\n      },\n      focusToolsClose: () => {\n        if (hasDrawers) {\n          focusDrawersButtons(true);\n        } else {\n          focusToolsButtons(true);\n        }\n      },\n      focusActiveDrawer: () => focusDrawersButtons(true),\n      focusSplitPanel: () => splitPanelRefs.slider.current?.focus(),\n    }));\n\n    const splitPanelBottomOffset =\n      (!splitPanelDisplayed || finalSplitPanePosition !== 'bottom'\n        ? undefined\n        : splitPanelOpen\n        ? splitPanelReportedSize\n        : splitPanelReportedHeaderHeight) ?? undefined;\n\n    const [mobileBarHeight, mobileBarRef] = useContainerQuery(rect => rect.contentBoxHeight);\n\n    return (\n      <div\n        className={clsx(styles.root, testutilStyles.root, disableBodyScroll && styles['root-no-scroll'])}\n        ref={rootRef}\n        style={contentHeightStyle}\n      >\n        {isMobile && !__embeddedViewMode && (!toolsHide || !navigationHide || breadcrumbs) && (\n          <MobileToolbar\n            anyPanelOpen={anyPanelOpen}\n            toggleRefs={{ navigation: navigationRefs.toggle, tools: toolsRefs.toggle }}\n            topOffset={headerHeight}\n            ariaLabels={ariaLabels}\n            navigationHide={navigationHide}\n            toolsHide={toolsHide}\n            onNavigationOpen={() => onNavigationToggle(true)}\n            onToolsOpen={() => onToolsToggle(true)}\n            unfocusable={anyPanelOpen}\n            mobileBarRef={mobileBarRef}\n            drawers={drawers}\n            activeDrawerId={activeDrawerId}\n            onDrawerChange={newDrawerId => {\n              onActiveDrawerChange(newDrawerId);\n              if (newDrawerId !== activeDrawerId) {\n                focusToolsButtons();\n                focusDrawersButtons();\n              }\n            }}\n          >\n            {breadcrumbs}\n          </MobileToolbar>\n        )}\n        <div className={clsx(styles.layout, disableBodyScroll && styles['layout-no-scroll'])}>\n          {!navigationHide && (\n            <Drawer\n              contentClassName={testutilStyles.navigation}\n              toggleClassName={testutilStyles['navigation-toggle']}\n              closeClassName={testutilStyles['navigation-close']}\n              ariaLabels={togglesConfig.navigation.getLabels(ariaLabels)}\n              bottomOffset={footerHeight}\n              topOffset={headerHeight}\n              isMobile={isMobile}\n              isOpen={navigationOpen}\n              onClick={isMobile ? onNavigationClick : undefined}\n              onToggle={onNavigationToggle}\n              toggleRefs={navigationRefs}\n              type=\"navigation\"\n              width={navigationWidth}\n            >\n              {navigation}\n            </Drawer>\n          )}\n          <main\n            ref={legacyScrollRootRef}\n            className={clsx(styles['layout-main'], {\n              [styles['layout-main-scrollable']]: disableBodyScroll,\n              [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n              [styles.unfocusable]: isMobile && anyPanelOpen,\n            })}\n          >\n            <div\n              style={{\n                marginBottom: splitPanelBottomOffset,\n              }}\n            >\n              {notifications && (\n                <Notifications\n                  disableContentPaddings={disableContentPaddings}\n                  testUtilsClassName={testutilStyles.notifications}\n                  labels={ariaLabels}\n                  topOffset={disableBodyScroll ? 0 : headerHeight}\n                  sticky={!isMobile && stickyNotifications}\n                  ref={notificationsRef}\n                >\n                  {notifications}\n                </Notifications>\n              )}\n              {((!isMobile && breadcrumbs) || contentHeader) && (\n                <ContentWrapper {...contentWrapperProps}>\n                  {!isMobile && breadcrumbs && (\n                    <div className={clsx(testutilStyles.breadcrumbs, styles['breadcrumbs-desktop'])}>{breadcrumbs}</div>\n                  )}\n                  {contentHeader && (\n                    <div\n                      className={clsx(\n                        styles['content-header-wrapper'],\n                        !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles['content-extra-top-padding'],\n                        !hasRenderedNotifications && !breadcrumbs && styles['content-header-wrapper-first-child'],\n                        !disableContentHeaderOverlap && styles['content-header-wrapper-overlapped']\n                      )}\n                    >\n                      {contentHeader}\n                    </div>\n                  )}\n                </ContentWrapper>\n              )}\n              <ContentWrapper\n                {...contentWrapperProps}\n                ref={mainContentRef}\n                disablePaddings={disableContentPaddings}\n                // eslint-disable-next-line react/forbid-component-props\n                className={clsx(\n                  !disableContentPaddings && styles['content-wrapper'],\n                  !disableContentPaddings &&\n                    (isMobile || !breadcrumbs) &&\n                    !contentHeader &&\n                    styles['content-extra-top-padding'],\n                  testutilStyles.content,\n                  !disableContentHeaderOverlap && contentHeader && styles['content-overlapped'],\n                  !hasRenderedNotifications &&\n                    !breadcrumbs &&\n                    !isMobile &&\n                    !contentHeader &&\n                    styles['content-wrapper-first-child']\n                )}\n              >\n                <AppLayoutContext.Provider\n                  value={{\n                    stickyOffsetTop:\n                      // We don't support the table header being sticky in case the deprecated disableBodyScroll is enabled,\n                      // therefore we ensure the table header scrolls out of view by offseting a large enough value (9999px)\n                      (disableBodyScroll ? (isMobile ? -9999 : 0) : headerHeight) +\n                      (isMobile ? 0 : stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),\n                    stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0),\n                    mobileBarHeight: mobileBarHeight ?? 0,\n                  }}\n                >\n                  {content}\n                </AppLayoutContext.Provider>\n              </ContentWrapper>\n            </div>\n            {finalSplitPanePosition === 'bottom' && splitPanelWrapped}\n          </main>\n\n          {finalSplitPanePosition === 'side' && splitPanelWrapped}\n\n          {hasDrawers ? (\n            <ResizableDrawer\n              contentClassName={clsx(\n                activeDrawerId && testutilStyles['active-drawer'],\n                activeDrawerId === TOOLS_DRAWER_ID && testutilStyles.tools\n              )}\n              toggleClassName={testutilStyles['tools-toggle']}\n              closeClassName={clsx(\n                testutilStyles['active-drawer-close-button'],\n                activeDrawerId === TOOLS_DRAWER_ID && testutilStyles['tools-close']\n              )}\n              ariaLabels={{\n                openLabel: activeDrawer?.ariaLabels?.triggerButton,\n                closeLabel: activeDrawer?.ariaLabels?.closeButton,\n                mainLabel: activeDrawer?.ariaLabels?.drawerName,\n                resizeHandle: activeDrawer?.ariaLabels?.resizeHandle,\n              }}\n              minWidth={minDrawerSize}\n              maxWidth={drawerMaxSize}\n              width={activeDrawerSize}\n              bottomOffset={footerHeight}\n              topOffset={headerHeight}\n              isMobile={isMobile}\n              onToggle={isOpen => {\n                if (!isOpen) {\n                  focusToolsButtons();\n                  focusDrawersButtons();\n                  onActiveDrawerChange(null);\n                }\n              }}\n              isOpen={true}\n              hideOpenButton={true}\n              toggleRefs={drawerRefs}\n              type=\"tools\"\n              onLoseFocus={loseDrawersFocus}\n              activeDrawer={activeDrawer}\n              onResize={changeDetail => onActiveDrawerResize(changeDetail)}\n              refs={drawerRefs}\n              toolsContent={drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content}\n            >\n              {activeDrawer?.content}\n            </ResizableDrawer>\n          ) : (\n            !toolsHide && (\n              <Drawer\n                contentClassName={testutilStyles.tools}\n                toggleClassName={testutilStyles['tools-toggle']}\n                closeClassName={testutilStyles['tools-close']}\n                ariaLabels={togglesConfig.tools.getLabels(ariaLabels)}\n                width={toolsWidth}\n                bottomOffset={footerHeight}\n                topOffset={headerHeight}\n                isMobile={isMobile}\n                onToggle={onToolsToggle}\n                isOpen={toolsOpen}\n                toggleRefs={toolsRefs}\n                type=\"tools\"\n                onLoseFocus={loseToolsFocus}\n              >\n                {tools}\n              </Drawer>\n            )\n          )}\n          {hasDrawers && drawers.length > 0 && (\n            <DrawerTriggersBar\n              drawerRefs={drawerRefs}\n              bottomOffset={footerHeight}\n              topOffset={headerHeight}\n              isMobile={isMobile}\n              drawers={drawers}\n              activeDrawerId={activeDrawerId}\n              onDrawerChange={newDrawerId => {\n                if (activeDrawerId !== newDrawerId) {\n                  focusToolsButtons();\n                  focusDrawersButtons();\n                }\n                onActiveDrawerChange(newDrawerId);\n              }}\n              ariaLabels={ariaLabels}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ClassicAppLayout;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AppLayoutProps } from './interfaces';\n\nconst defaultContentTypeState: AppLayoutState = {\n  navigationOpen: true,\n  minContentWidth: 280,\n  maxContentWidth: undefined,\n};\n\nconst defaults: Record<AppLayoutProps.ContentType, AppLayoutState> = {\n  default: {\n    ...defaultContentTypeState,\n  },\n  dashboard: {\n    ...defaultContentTypeState,\n  },\n  cards: {\n    navigationOpen: true,\n    minContentWidth: 280,\n    maxContentWidth: undefined,\n  },\n  form: {\n    navigationOpen: false,\n    minContentWidth: 280,\n    maxContentWidth: 800,\n  },\n  table: {\n    navigationOpen: true,\n    minContentWidth: 280,\n    maxContentWidth: undefined,\n  },\n  wizard: {\n    navigationOpen: false,\n    minContentWidth: 280,\n    maxContentWidth: 1080,\n  },\n};\n\nexport interface AppLayoutState {\n  navigationOpen?: boolean;\n  toolsOpen?: boolean;\n  minContentWidth: number;\n  maxContentWidth?: number | undefined;\n}\n\nexport function applyDefaults(\n  contentType: AppLayoutProps.ContentType,\n  stateFromProps: Pick<AppLayoutProps, 'minContentWidth' | 'maxContentWidth' | 'navigationOpen' | 'toolsOpen'>,\n  isRefresh: boolean\n): AppLayoutState {\n  const contentTypeDefaults = isRefresh\n    ? { ...defaults[contentType], maxContentWidth: undefined }\n    : defaults[contentType];\n\n  return {\n    maxContentWidth: stateFromProps.maxContentWidth ?? contentTypeDefaults.maxContentWidth,\n    minContentWidth: stateFromProps.minContentWidth ?? contentTypeDefaults.minContentWidth,\n    navigationOpen: stateFromProps.navigationOpen ?? contentTypeDefaults.navigationOpen,\n    toolsOpen: stateFromProps.toolsOpen ?? contentTypeDefaults.toolsOpen,\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { AppLayoutProps } from '../interfaces';\nimport clsx from 'clsx';\n\ninterface NotificationsProps {\n  testUtilsClassName: string;\n  children?: React.ReactNode;\n  labels: AppLayoutProps.Labels | undefined;\n  topOffset: number | undefined;\n  disableContentPaddings?: boolean;\n}\ninterface NotificationWrapperProps extends NotificationsProps {\n  sticky: boolean | undefined;\n}\n\nexport const Notifications = React.forwardRef(\n  ({ sticky, disableContentPaddings, ...props }: NotificationWrapperProps, ref: React.Ref<HTMLDivElement>) => {\n    return sticky ? (\n      <div ref={ref} className={styles['notifications-sticky']} style={{ top: props.topOffset }}>\n        <div\n          role=\"region\"\n          className={clsx(props.testUtilsClassName, disableContentPaddings && styles['no-content-paddings'])}\n          aria-label={props.labels?.notifications}\n        >\n          {props.children}\n        </div>\n      </div>\n    ) : (\n      <div\n        role=\"region\"\n        ref={ref}\n        className={clsx(\n          props.testUtilsClassName,\n          styles.notifications,\n          disableContentPaddings && styles['no-content-paddings']\n        )}\n        aria-label={props.labels?.notifications}\n      >\n        {props.children}\n      </div>\n    );\n  }\n);\n", "\n    import './styles.scoped.css';\n    export default {\n  \"notifications\": \"awsui_notifications_1hmm4_1d89k_9\",\n  \"notifications-sticky\": \"awsui_notifications-sticky_1hmm4_1d89k_10\",\n  \"no-content-paddings\": \"awsui_no-content-paddings_1hmm4_1d89k_25\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\nimport { AppLayoutProps } from '../interfaces';\nimport { ToggleButton, togglesConfig } from '../toggles';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n\ninterface MobileToggleProps {\n  className?: string;\n  ariaLabels?: AppLayoutProps.Labels;\n  type: keyof typeof togglesConfig;\n  disabled?: boolean;\n  onClick: () => void;\n}\nconst MobileToggle = React.forwardRef(\n  ({ className, ariaLabels, type, disabled, onClick }: MobileToggleProps, ref: React.Ref<ButtonProps.Ref>) => {\n    const { TagName, iconName, getLabels } = togglesConfig[type];\n    const { mainLabel, openLabel } = getLabels(ariaLabels);\n\n    return (\n      <TagName\n        className={clsx(styles['mobile-toggle'], styles[`mobile-toggle-type-${type}`])}\n        aria-hidden={disabled}\n        aria-label={mainLabel}\n        onClick={e => e.target === e.currentTarget && onClick()}\n      >\n        <ToggleButton\n          ref={ref}\n          className={className}\n          iconName={iconName}\n          onClick={onClick}\n          ariaLabel={openLabel}\n          disabled={disabled}\n          ariaExpanded={disabled}\n        />\n      </TagName>\n    );\n  }\n);\ninterface MobileToolbarProps {\n  anyPanelOpen: boolean;\n  unfocusable: boolean | undefined;\n  toggleRefs: {\n    navigation: React.Ref<ButtonProps.Ref>;\n    tools: React.Ref<ButtonProps.Ref>;\n  };\n  navigationHide: boolean | undefined;\n  toolsHide: boolean | undefined;\n  topOffset?: number;\n  ariaLabels: AppLayoutProps.Labels | undefined;\n  mobileBarRef: React.Ref<HTMLDivElement>;\n  children: React.ReactNode;\n  onNavigationOpen: () => void;\n  onToolsOpen: () => void;\n  drawers: Array<AppLayoutProps.Drawer> | undefined;\n  activeDrawerId: string | null;\n  onDrawerChange: (newDrawerId: string | null) => void;\n}\n\nexport function MobileToolbar({\n  ariaLabels,\n  toggleRefs,\n  topOffset,\n  navigationHide,\n  toolsHide,\n  anyPanelOpen,\n  unfocusable,\n  drawers,\n  activeDrawerId,\n  children,\n  onNavigationOpen,\n  onToolsOpen,\n  onDrawerChange,\n  mobileBarRef,\n}: MobileToolbarProps) {\n  useEffect(() => {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return () => {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n\n  const { overflowItems, visibleItems } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <div\n      ref={mobileBarRef}\n      className={clsx(styles['mobile-bar'], testutilStyles['mobile-bar'], unfocusable && sharedStyles.unfocusable)}\n      style={{ top: topOffset }}\n    >\n      {!navigationHide && (\n        <MobileToggle\n          ref={toggleRefs.navigation}\n          type=\"navigation\"\n          className={testutilStyles['navigation-toggle']}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onNavigationOpen}\n        />\n      )}\n      <div className={styles['mobile-bar-breadcrumbs']}>\n        {children && <div className={testutilStyles.breadcrumbs}>{children}</div>}\n      </div>\n      {!toolsHide && !drawers && (\n        <MobileToggle\n          ref={toggleRefs.tools}\n          type=\"tools\"\n          className={testutilStyles['tools-toggle']}\n          ariaLabels={ariaLabels}\n          disabled={anyPanelOpen}\n          onClick={onToolsOpen}\n        />\n      )}\n      {drawers && (\n        <aside aria-label={ariaLabels?.drawers} role=\"region\">\n          <div className={clsx(styles['drawers-container'])} role=\"toolbar\" aria-orientation=\"horizontal\">\n            {visibleItems.map((item, index) => (\n              <div\n                className={clsx(styles['mobile-toggle'], styles['mobile-toggle-type-drawer'])}\n                key={index}\n                onClick={() => onDrawerChange(item.id)}\n              >\n                <ToggleButton\n                  className={clsx(\n                    testutilStyles['drawers-trigger'],\n                    item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n                  )}\n                  iconName={item.trigger.iconName}\n                  iconSvg={item.trigger.iconSvg}\n                  badge={item.badge}\n                  ariaLabel={item.ariaLabels?.triggerButton}\n                  ariaExpanded={activeDrawerId === item.id}\n                  testId={`awsui-app-layout-trigger-${item.id}`}\n                />\n              </div>\n            ))}\n            {overflowItems.length > 0 && (\n              <div className={clsx(styles['mobile-toggle'], styles['mobile-toggle-type-drawer'])}>\n                <OverflowMenu\n                  ariaLabel={overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow}\n                  items={overflowItems}\n                  onItemClick={({ detail }) => onDrawerChange(detail.id)}\n                />\n              </div>\n            )}\n          </div>\n        </aside>\n      )}\n    </div>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { ButtonProps } from '../../button/interfaces';\nimport { InternalButton } from '../../button/internal';\nimport InternalIcon from '../../icon/internal';\nimport { AppLayoutProps } from '../interfaces';\nimport { AppLayoutButtonProps } from './interfaces';\nimport styles from './styles.css.js';\n\nexport const togglesConfig = {\n  navigation: {\n    TagName: 'nav',\n    iconName: 'menu',\n    getLabels: (labels: AppLayoutProps.Labels = {}) => ({\n      mainLabel: labels.navigation,\n      openLabel: labels.navigationToggle,\n      closeLabel: labels.navigationClose,\n    }),\n  },\n  tools: {\n    TagName: 'aside',\n    iconName: 'status-info',\n    getLabels: (labels: AppLayoutProps.Labels = {}) => ({\n      mainLabel: labels.tools,\n      openLabel: labels.toolsToggle,\n      closeLabel: labels.toolsClose,\n    }),\n  },\n} as const;\n\nexport const ToggleButton = React.forwardRef(\n  (\n    {\n      className,\n      ariaLabel,\n      ariaExpanded,\n      ariaControls,\n      iconName,\n      iconSvg,\n      disabled,\n      testId,\n      onClick,\n      badge,\n    }: AppLayoutButtonProps,\n    ref: React.Ref<{ focus(): void }>\n  ) => {\n    return (\n      <button\n        ref={ref as React.Ref<HTMLButtonElement>}\n        className={clsx(className, styles['toggle-button'])}\n        aria-label={ariaLabel}\n        type=\"button\"\n        onClick={onClick}\n        disabled={disabled}\n        aria-expanded={ariaExpanded}\n        aria-haspopup={ariaExpanded ? undefined : true}\n        aria-controls={ariaControls}\n        data-testid={testId}\n      >\n        <InternalIcon svg={iconSvg} name={iconName} badge={badge} />\n      </button>\n    );\n  }\n);\n\ninterface CloseButtonProps {\n  className?: string;\n  ariaLabel: string | undefined;\n  onClick: () => void;\n}\n\nexport const CloseButton = React.forwardRef(\n  ({ className, ariaLabel, onClick }: CloseButtonProps, ref: React.Ref<ButtonProps.Ref>) => {\n    return (\n      <span className={styles['close-button']}>\n        <InternalButton\n          ref={ref}\n          className={className}\n          ariaLabel={ariaLabel}\n          variant=\"icon\"\n          formAction=\"none\"\n          iconName=\"close\"\n          onClick={onClick}\n        />\n      </span>\n    );\n  }\n);\n", "\n    import './styles.scoped.css';\n    export default {\n  \"toggle-button\": \"awsui_toggle-button_16w0h_1lkgf_99\",\n  \"close-button\": \"awsui_close-button_16w0h_1lkgf_134\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport InternalButtonDropdown from '../../button-dropdown/internal';\nimport { ButtonDropdownProps, InternalButtonDropdownProps } from '../../button-dropdown/interfaces';\nimport { CancelableEventHandler } from '../../internal/events';\nimport { AppLayoutProps } from '../interfaces';\n\ninterface OverflowMenuProps {\n  items: Array<AppLayoutProps.Drawer>;\n  onItemClick: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;\n  customTriggerBuilder?: InternalButtonDropdownProps['customTriggerBuilder'];\n  ariaLabel?: string;\n}\n\nexport default function OverflowMenu({ items, onItemClick, customTriggerBuilder, ariaLabel }: OverflowMenuProps) {\n  return (\n    <InternalButtonDropdown\n      items={items.map(item => ({\n        id: item.id,\n        text: item.ariaLabels.drawerName,\n        iconName: item.trigger.iconName,\n        iconSvg: item.trigger.iconSvg,\n        badge: item.badge,\n      }))}\n      onItemClick={onItemClick}\n      ariaLabel={ariaLabel}\n      variant=\"icon\"\n      customTriggerBuilder={customTriggerBuilder}\n      expandToViewport={true}\n    />\n  );\n}\n", "\n    import './styles.scoped.css';\n    export default {\n  \"block-body-scroll\": \"awsui_block-body-scroll_19d8l_c90gb_103\",\n  \"mobile-bar\": \"awsui_mobile-bar_19d8l_c90gb_107\",\n  \"mobile-bar-breadcrumbs\": \"awsui_mobile-bar-breadcrumbs_19d8l_c90gb_120\",\n  \"mobile-toggle\": \"awsui_mobile-toggle_19d8l_c90gb_127\",\n  \"mobile-toggle-type-navigation\": \"awsui_mobile-toggle-type-navigation_19d8l_c90gb_136\",\n  \"mobile-toggle-type-tools\": \"awsui_mobile-toggle-type-tools_19d8l_c90gb_139\",\n  \"mobile-toggle-type-drawer\": \"awsui_mobile-toggle-type-drawer_19d8l_c90gb_139\",\n  \"drawers-container\": \"awsui_drawers-container_19d8l_c90gb_146\"\n};\n  ", "\n    import './styles.scoped.css';\n    export default {\n  \"resize-active\": \"awsui_resize-active_lm6vo_1lt83_104\",\n  \"resize-side\": \"awsui_resize-side_lm6vo_1lt83_110\",\n  \"resize-bottom\": \"awsui_resize-bottom_lm6vo_1lt83_113\",\n  \"with-motion\": \"awsui_with-motion_lm6vo_1lt83_118\",\n  \"root\": \"awsui_root_lm6vo_1lt83_133\",\n  \"root-no-scroll\": \"awsui_root-no-scroll_lm6vo_1lt83_140\",\n  \"layout\": \"awsui_layout_lm6vo_1lt83_145\",\n  \"layout-no-scroll\": \"awsui_layout-no-scroll_lm6vo_1lt83_151\",\n  \"layout-main\": \"awsui_layout-main_lm6vo_1lt83_155\",\n  \"layout-main-scrollable\": \"awsui_layout-main-scrollable_lm6vo_1lt83_161\",\n  \"unfocusable\": \"awsui_unfocusable_lm6vo_1lt83_166\",\n  \"breadcrumbs-desktop\": \"awsui_breadcrumbs-desktop_lm6vo_1lt83_170\",\n  \"content-header-wrapper\": \"awsui_content-header-wrapper_lm6vo_1lt83_175\",\n  \"content-wrapper\": \"awsui_content-wrapper_lm6vo_1lt83_179\",\n  \"content-overlapped\": \"awsui_content-overlapped_lm6vo_1lt83_183\",\n  \"content-extra-top-padding\": \"awsui_content-extra-top-padding_lm6vo_1lt83_187\"\n};\n  ", "\n    import './styles.scoped.css';\n    export default {\n  \"root\": \"awsui_root_1fj9k_1uvk8_5\",\n  \"navigation\": \"awsui_navigation_1fj9k_1uvk8_9\",\n  \"navigation-toggle\": \"awsui_navigation-toggle_1fj9k_1uvk8_13\",\n  \"navigation-close\": \"awsui_navigation-close_1fj9k_1uvk8_17\",\n  \"content\": \"awsui_content_1fj9k_1uvk8_21\",\n  \"notifications\": \"awsui_notifications_1fj9k_1uvk8_25\",\n  \"breadcrumbs\": \"awsui_breadcrumbs_1fj9k_1uvk8_29\",\n  \"tools\": \"awsui_tools_1fj9k_1uvk8_33\",\n  \"tools-close\": \"awsui_tools-close_1fj9k_1uvk8_37\",\n  \"tools-toggle\": \"awsui_tools-toggle_1fj9k_1uvk8_41\",\n  \"drawer-closed\": \"awsui_drawer-closed_1fj9k_1uvk8_45\",\n  \"mobile-bar\": \"awsui_mobile-bar_1fj9k_1uvk8_49\",\n  \"disable-body-scroll-root\": \"awsui_disable-body-scroll-root_1fj9k_1uvk8_53\",\n  \"drawers-trigger\": \"awsui_drawers-trigger_1fj9k_1uvk8_57\",\n  \"active-drawer\": \"awsui_active-drawer_1fj9k_1uvk8_61\",\n  \"active-drawer-close-button\": \"awsui_active-drawer-close-button_1fj9k_1uvk8_65\",\n  \"drawers-slider\": \"awsui_drawers-slider_1fj9k_1uvk8_69\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function splitItems<T extends { id: string }>(\n  maybeItems: Array<T> | undefined,\n  splitIndex: number,\n  activeId: string | null\n) {\n  const items = maybeItems ?? [];\n  const visibleItems = items.slice(0, splitIndex);\n  const overflowItems = items.slice(splitIndex);\n\n  if (overflowItems.length === 1) {\n    return { visibleItems: items, overflowItems: [] };\n  }\n\n  if (activeId && overflowItems.length > 0 && visibleItems.length > 0) {\n    const activeInOverflow = overflowItems.find(item => item.id === activeId);\n    if (activeInOverflow) {\n      overflowItems.splice(overflowItems.indexOf(activeInOverflow), 1);\n      overflowItems.unshift(visibleItems.pop()!);\n      visibleItems.push(activeInOverflow);\n    }\n  }\n  return { visibleItems, overflowItems };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { sortByPriority } from '../../internal/plugins/helpers/utils';\nimport { convertRuntimeDrawers, DrawersLayout } from '../runtime-api';\nimport { AppLayoutProps } from '../interfaces';\nimport { togglesConfig } from '../toggles';\n\nexport const TOOLS_DRAWER_ID = 'awsui-internal-tools';\n\ninterface ToolsProps {\n  toolsHide: boolean | undefined;\n  toolsOpen: boolean | undefined;\n  toolsWidth: number;\n  tools: React.ReactNode | undefined;\n  onToolsToggle: (newOpen: boolean) => void;\n  ariaLabels: AppLayoutProps.Labels | undefined;\n}\n\nfunction getToolsDrawerItem(props: ToolsProps): AppLayoutProps.Drawer | null {\n  if (props.toolsHide) {\n    return null;\n  }\n  const { iconName, getLabels } = togglesConfig.tools;\n  const { mainLabel, closeLabel, openLabel } = getLabels(props.ariaLabels);\n  return {\n    id: TOOLS_DRAWER_ID,\n    content: props.tools,\n    resizable: false,\n    ariaLabels: {\n      triggerButton: openLabel,\n      closeButton: closeLabel,\n      drawerName: mainLabel ?? '',\n    },\n    trigger: {\n      iconName: iconName,\n    },\n  };\n}\n\nfunction useRuntimeDrawers(\n  disableRuntimeDrawers: boolean | undefined,\n  activeDrawerId: string | null,\n  onActiveDrawerChange: (newDrawerId: string | null) => void\n) {\n  const [runtimeDrawers, setRuntimeDrawers] = useState<DrawersLayout>({ before: [], after: [] });\n  const onActiveDrawerChangeStable = useStableCallback(onActiveDrawerChange);\n\n  const drawerWasOpenRef = useRef(false);\n  drawerWasOpenRef.current = drawerWasOpenRef.current || !!activeDrawerId;\n\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered(drawers => {\n      setRuntimeDrawers(convertRuntimeDrawers(drawers));\n      if (!drawerWasOpenRef.current) {\n        const defaultActiveDrawer = sortByPriority(drawers).find(drawer => drawer.defaultActive);\n        if (defaultActiveDrawer) {\n          onActiveDrawerChangeStable(defaultActiveDrawer.id);\n        }\n      }\n    });\n    return () => {\n      unsubscribe();\n      setRuntimeDrawers({ before: [], after: [] });\n    };\n  }, [disableRuntimeDrawers, onActiveDrawerChangeStable]);\n\n  return runtimeDrawers;\n}\n\nfunction applyToolsDrawer(toolsProps: ToolsProps, runtimeDrawers: DrawersLayout) {\n  const drawers = [...runtimeDrawers.before, ...runtimeDrawers.after];\n  if (drawers.length === 0) {\n    return null;\n  }\n  const toolsItem = getToolsDrawerItem(toolsProps);\n  if (toolsItem) {\n    drawers.unshift(toolsItem);\n  }\n\n  return drawers;\n}\n\ntype UseDrawersProps = Pick<AppLayoutProps, 'drawers' | 'activeDrawerId' | 'onDrawerChange'> & {\n  __disableRuntimeDrawers?: boolean;\n};\n\nexport function useDrawers(\n  {\n    drawers,\n    activeDrawerId: controlledActiveDrawerId,\n    onDrawerChange,\n    __disableRuntimeDrawers: disableRuntimeDrawers,\n  }: UseDrawersProps,\n  ariaLabels: AppLayoutProps['ariaLabels'],\n  toolsProps: ToolsProps\n) {\n  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {\n    componentName: 'AppLayout',\n    controlledProp: 'activeDrawerId',\n    changeHandler: 'onChange',\n  });\n  const [drawerSizes, setDrawerSizes] = useState<Record<string, number>>({});\n\n  function onActiveDrawerResize({ id, size }: { id: string; size: number }) {\n    setDrawerSizes(oldSizes => ({ ...oldSizes, [id]: size }));\n    fireNonCancelableEvent(activeDrawer?.onResize, { id, size });\n  }\n\n  function onActiveDrawerChange(newDrawerId: string | null) {\n    setActiveDrawerId(newDrawerId);\n    if (hasOwnDrawers) {\n      fireNonCancelableEvent(onDrawerChange, { activeDrawerId: newDrawerId });\n    } else if (!toolsProps.toolsHide) {\n      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);\n    }\n  }\n\n  const hasOwnDrawers = !!drawers;\n  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange);\n  const combinedDrawers = drawers\n    ? [...runtimeDrawers.before, ...drawers, ...runtimeDrawers.after]\n    : applyToolsDrawer(toolsProps, runtimeDrawers);\n  // support toolsOpen in runtime-drawers-only mode\n  let activeDrawerIdResolved = toolsProps?.toolsOpen && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId;\n  const activeDrawer = combinedDrawers?.find(drawer => drawer.id === activeDrawerIdResolved);\n  // ensure that id is only defined when the drawer exists\n  activeDrawerIdResolved = activeDrawer?.id ?? null;\n\n  const activeDrawerSize = activeDrawerIdResolved\n    ? drawerSizes[activeDrawerIdResolved] ?? activeDrawer?.defaultSize ?? toolsProps.toolsWidth\n    : toolsProps.toolsWidth;\n  const minDrawerSize = Math.min(activeDrawer?.defaultSize ?? 290, 290);\n\n  return {\n    ariaLabelsWithDrawers: ariaLabels,\n    drawers: combinedDrawers || undefined,\n    activeDrawer,\n    activeDrawerId: activeDrawerIdResolved,\n    activeDrawerSize,\n    minDrawerSize,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { DrawerConfig as RuntimeDrawerConfig } from '../internal/plugins/controllers/drawers';\nimport { RuntimeContentWrapper } from '../internal/plugins/helpers';\nimport { sortByPriority } from '../internal/plugins/helpers/utils';\nimport { AppLayoutProps } from './interfaces';\nimport { fireNonCancelableEvent } from '../internal/events';\n\nexport interface DrawersLayout {\n  before: Array<AppLayoutProps.Drawer>;\n  after: Array<AppLayoutProps.Drawer>;\n}\n\nexport function convertRuntimeDrawers(drawers: Array<RuntimeDrawerConfig>): DrawersLayout {\n  const converted = drawers.map(\n    ({\n      mountContent,\n      unmountContent,\n      trigger,\n      ...runtimeDrawer\n    }): AppLayoutProps.Drawer & { orderPriority?: number } => ({\n      ...runtimeDrawer,\n      ariaLabels: { drawerName: runtimeDrawer.ariaLabels.content ?? '', ...runtimeDrawer.ariaLabels },\n      trigger: {\n        iconSvg: (\n          // eslint-disable-next-line react/no-danger\n          <span dangerouslySetInnerHTML={{ __html: trigger.iconSvg }} />\n        ),\n      },\n      content: (\n        <RuntimeContentWrapper key={runtimeDrawer.id} mountContent={mountContent} unmountContent={unmountContent} />\n      ),\n      onResize: event => {\n        fireNonCancelableEvent(runtimeDrawer.onResize, { size: event.detail.size, id: runtimeDrawer.id });\n      },\n    })\n  );\n  const sorted = sortByPriority(converted);\n  return {\n    before: sorted.filter(item => (item.orderPriority ?? 0) > 0),\n    after: sorted.filter(item => (item.orderPriority ?? 0) <= 0),\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject, useCallback, useEffect, useRef } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\n\nexport interface FocusControlRefs {\n  toggle: RefObject<ButtonProps.Ref>;\n  close: RefObject<ButtonProps.Ref>;\n  slider: RefObject<HTMLDivElement>;\n}\n\ninterface FocusControlState {\n  refs: FocusControlRefs;\n  setFocus: (force?: boolean) => void;\n  loseFocus: () => void;\n}\n\nexport function useFocusControl(\n  isOpen: boolean,\n  restoreFocus = false,\n  activeDrawerId?: string | null\n): FocusControlState {\n  const refs = {\n    toggle: useRef<ButtonProps.Ref>(null),\n    close: useRef<ButtonProps.Ref>(null),\n    slider: useRef<HTMLDivElement>(null),\n  };\n  const previousFocusedElement = useRef<HTMLElement>();\n  const shouldFocus = useRef(false);\n\n  const doFocus = () => {\n    if (!shouldFocus.current) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current =\n        document.activeElement !== document.body ? (document.activeElement as HTMLElement) : undefined;\n      if (refs.slider.current) {\n        refs.slider.current?.focus();\n      } else {\n        refs.close.current?.focus();\n      }\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        refs.toggle.current?.focus();\n      }\n    }\n    shouldFocus.current = false;\n  };\n\n  const setFocus = (force?: boolean) => {\n    shouldFocus.current = true;\n    if (force && isOpen) {\n      doFocus();\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(doFocus, [isOpen, activeDrawerId]);\n\n  const loseFocus = useCallback(() => {\n    previousFocusedElement.current = undefined;\n  }, []);\n\n  return {\n    refs,\n    setFocus,\n    loseFocus,\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useState } from 'react';\nimport { useObservedElement } from './use-observed-element';\n\nexport default function useContentHeight(headerSelector: string, footerSelector: string, disableBodyScroll?: boolean) {\n  const headerHeight = useObservedElement(headerSelector);\n  const footerHeight = useObservedElement(footerSelector);\n  const [headerFooterHeight, setHeaderFooterHeight] = useState(0);\n\n  // Delay applying changes in header/footer height, as applying them immediately can cause\n  // ResizeOberver warnings due to the algorithm thinking that the change might have side-effects\n  // further up the tree, therefore blocking notifications to prevent loops\n  useEffect(() => {\n    const id = requestAnimationFrame(() => setHeaderFooterHeight(headerHeight + footerHeight));\n    return () => cancelAnimationFrame(id);\n  }, [headerHeight, footerHeight]);\n\n  const heightStyleValue = `calc(100vh - ${headerFooterHeight}px)`;\n\n  return {\n    headerHeight,\n    footerHeight,\n    contentHeightStyle: {\n      [disableBodyScroll ? 'height' : 'minHeight']: heightStyleValue,\n    },\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nimport { useCallback, useState } from 'react';\n\nexport function useObservedElement(selector: string) {\n  const getElement = useCallback(() => {\n    return document.querySelector(selector);\n  }, [selector]);\n\n  const [height, setHeight] = useState(0);\n\n  useResizeObserver(getElement, entry => setHeight(entry.borderBoxHeight));\n\n  return height;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The page height where the page is considered constrained.\n */\nexport const CONSTRAINED_PAGE_HEIGHT = 400;\n\n/**\n * Based on approximate height of breadcrumb, table header, and the first table row\n */\nexport const MAIN_PANEL_MIN_HEIGHT = 250;\n\n/**\n * Based on approximate height of app bar on comfortable mode on mobile.\n */\nexport const CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;\n\n/**\n * Estimate a default split panel size for the first render based on the document size.\n */\nexport function getSplitPanelDefaultSize(position: 'side' | 'bottom') {\n  if (typeof document === 'undefined') {\n    return 0; // render the split panel in its minimum possible size\n  }\n  return position === 'side' ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;\n}\n\nexport function getLimitedValue(min: number, value: number, max: number) {\n  if (min > max) {\n    return min;\n  }\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { AppLayoutProps } from '../interfaces';\n\nexport interface ContentWrapperProps {\n  className?: string;\n  contentType: AppLayoutProps.ContentType;\n  children?: React.ReactNode;\n  isMobile: boolean;\n  navigationPadding: boolean;\n  toolsPadding: boolean;\n  disablePaddings?: boolean;\n  contentWidthStyles?: React.CSSProperties;\n}\n\nconst ContentWrapper = React.forwardRef(\n  (\n    {\n      className,\n      contentType,\n      children,\n      toolsPadding,\n      disablePaddings,\n      navigationPadding,\n      isMobile,\n      contentWidthStyles,\n    }: ContentWrapperProps,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    if (disablePaddings) {\n      return (\n        <div className={className} ref={ref}>\n          {children}\n        </div>\n      );\n    }\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          styles['content-wrapper'],\n          !navigationPadding && styles['content-wrapper-no-navigation-padding'],\n          !toolsPadding && styles['content-wrapper-no-tools-padding'],\n          isMobile && styles['content-wrapper-mobile']\n        )}\n      >\n        <div style={contentWidthStyles} className={clsx(className, styles[`content-type-${contentType}`])}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ContentWrapper;\n", "\n    import './styles.scoped.css';\n    export default {\n  \"content-wrapper\": \"awsui_content-wrapper_zycdx_1ocfz_103\",\n  \"content-wrapper-mobile\": \"awsui_content-wrapper-mobile_zycdx_1ocfz_107\",\n  \"content-type-dashboard\": \"awsui_content-type-dashboard_zycdx_1ocfz_112\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\nimport { ToggleButton, CloseButton, togglesConfig } from '../toggles';\n\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nimport { DesktopDrawerProps, DrawerTriggersBarProps } from './interfaces';\nimport OverflowMenu from './overflow-menu';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useDensityMode } from '@cloudscape-design/component-toolkit/internal';\nimport { splitItems } from './drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nimport { AppLayoutProps } from '../interfaces';\n\n// We are using two landmarks per drawer, i.e. two NAVs and two ASIDEs, because of several\n// known bugs in NVDA that cause focus changes within a container to sometimes not be\n// announced. As a result, we use one region for the open button and one region for the\n// actual drawer content, always hiding the other one when it's not visible.\n// An alternative solution to follow a more classic implementation here to only have one\n// button that triggers the opening/closing of the drawer also did not work due to another\n// series of bugs in NVDA (together with Firefox) which prevent the changed expanded state\n// from being announced.\n// Even with this workaround in place, the announcement of the close button when opening a\n// panel in NVDA is not working correctly. The suspected root cause is one of the bugs below\n// as well.\n// Relevant tickets:\n// * https://github.com/nvaccess/nvda/issues/6606\n// * https://github.com/nvaccess/nvda/issues/5825\n// * https://github.com/nvaccess/nvda/issues/5247\n// * https://github.com/nvaccess/nvda/pull/8869 (reverted PR that was going to fix it)\nexport const Drawer = React.forwardRef(\n  (\n    {\n      id,\n      contentClassName,\n      toggleClassName,\n      closeClassName,\n      width,\n      type,\n      toggleRefs,\n      topOffset,\n      bottomOffset,\n      ariaLabels,\n      children,\n      hideOpenButton,\n      isOpen,\n      isHidden,\n      isMobile,\n      onToggle,\n      onClick,\n      onLoseFocus,\n      resizeHandle,\n    }: DesktopDrawerProps,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    const openButtonWrapperRef = useRef<HTMLElement | null>(null);\n    const { TagName, iconName } = togglesConfig[type];\n    const { mainLabel, closeLabel, openLabel } = ariaLabels;\n    const drawerContentWidthOpen = isMobile ? undefined : width;\n    const drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n\n    const regularOpenButton = (\n      <TagName ref={openButtonWrapperRef} aria-label={mainLabel} className={styles.toggle} aria-hidden={isOpen}>\n        <ToggleButton\n          ref={toggleRefs.toggle}\n          className={toggleClassName}\n          iconName={iconName}\n          ariaLabel={openLabel}\n          onClick={() => onToggle(true)}\n          ariaExpanded={isOpen ? undefined : false}\n        />\n      </TagName>\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(styles.drawer, {\n          [styles.hide]: isHidden,\n          [styles['drawer-closed']]: !isOpen,\n          [testutilStyles['drawer-closed']]: !isOpen,\n          [styles['drawer-mobile']]: isMobile,\n        })}\n        style={{ width: drawerContentWidth }}\n        onBlur={\n          onLoseFocus\n            ? e => {\n                if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n                  onLoseFocus(e);\n                }\n              }\n            : undefined\n        }\n        onClick={event => {\n          if (onClick) {\n            onClick(event);\n          }\n          if (!isOpen) {\n            // to prevent calling onToggle from the drawer when it's called from the toggle button\n            if (\n              openButtonWrapperRef.current === event.target ||\n              !openButtonWrapperRef.current?.contains(event.target as Node)\n            ) {\n              onToggle(true);\n            }\n          }\n        }}\n      >\n        <div\n          id={id}\n          style={{ width: drawerContentWidth, top: topOffset, bottom: bottomOffset }}\n          className={clsx(styles['drawer-content'], styles['drawer-content-clickable'], contentClassName)}\n        >\n          {!isMobile && !hideOpenButton && regularOpenButton}\n          <TagName\n            className={clsx(resizeHandle && styles['drawer-resize-content'])}\n            aria-label={mainLabel}\n            aria-hidden={!isOpen}\n          >\n            {!isMobile && isOpen && resizeHandle}\n            <CloseButton\n              ref={toggleRefs.close}\n              className={closeClassName}\n              ariaLabel={closeLabel}\n              onClick={() => {\n                onToggle(false);\n              }}\n            />\n            {children}\n          </TagName>\n        </div>\n      </div>\n    );\n  }\n);\n\ninterface DrawerTriggerProps {\n  testUtilsClassName?: string;\n  ariaLabel: string | undefined;\n  ariaExpanded: boolean;\n  ariaControls?: string;\n  badge: boolean | undefined;\n  itemId?: string;\n  isActive: boolean;\n  trigger: AppLayoutProps.Drawer['trigger'];\n  onClick: (() => void) | undefined;\n}\n\nconst DrawerTrigger = React.forwardRef(\n  (\n    {\n      testUtilsClassName,\n      ariaLabel,\n      ariaExpanded,\n      ariaControls,\n      badge,\n      itemId,\n      isActive,\n      trigger,\n      onClick,\n    }: DrawerTriggerProps,\n    ref: React.Ref<{ focus: () => void }>\n  ) => (\n    <div className={clsx(styles['drawer-trigger'], isActive && styles['drawer-trigger-active'])} onClick={onClick}>\n      <ToggleButton\n        ref={ref}\n        className={testUtilsClassName}\n        iconName={trigger.iconName}\n        iconSvg={trigger.iconSvg}\n        ariaLabel={ariaLabel}\n        ariaExpanded={ariaExpanded}\n        ariaControls={ariaControls}\n        badge={badge}\n        testId={itemId && `awsui-app-layout-trigger-${itemId}`}\n      />\n    </div>\n  )\n);\n\nexport const DrawerTriggersBar = ({\n  isMobile,\n  topOffset,\n  bottomOffset,\n  activeDrawerId,\n  ariaLabels,\n  drawers,\n  drawerRefs,\n  onDrawerChange,\n}: DrawerTriggersBarProps) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n  const isCompactMode = useDensityMode(containerRef) === 'compact';\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = isCompactMode ? 34 : 38;\n      const overflowSpot = containerHeight / 1.5;\n\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n\n      return index;\n    }\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <div\n      className={clsx(styles.drawer, styles['drawer-closed'], testutilStyles['drawer-closed'], {\n        [styles['drawer-mobile']]: isMobile,\n        [styles.hide]: drawers.length === 1 && !!activeDrawerId,\n      })}\n      ref={containerRef}\n    >\n      <div\n        ref={triggersContainerRef}\n        style={{ top: topOffset, bottom: bottomOffset }}\n        className={clsx(styles['drawer-content'], {\n          [styles['drawer-content-clickable']]: drawers.length === 1,\n        })}\n        onClick={\n          drawers.length === 1\n            ? () => onDrawerChange(drawers[0].id !== activeDrawerId ? drawers[0].id : null)\n            : undefined\n        }\n      >\n        {!isMobile && (\n          <aside aria-label={ariaLabels?.drawers} role=\"region\">\n            <div className={clsx(styles['drawer-triggers-wrapper'])} role=\"toolbar\" aria-orientation=\"vertical\">\n              {visibleItems.map((item, index) => {\n                return (\n                  <DrawerTrigger\n                    key={index}\n                    testUtilsClassName={clsx(\n                      testutilStyles['drawers-trigger'],\n                      item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n                    )}\n                    ariaExpanded={activeDrawerId === item.id}\n                    ref={item.id === previousActiveDrawerId.current ? drawerRefs.toggle : undefined}\n                    ariaLabel={item.ariaLabels?.triggerButton}\n                    ariaControls={activeDrawerId === item.id ? item.id : undefined}\n                    trigger={item.trigger}\n                    badge={item.badge}\n                    itemId={item.id}\n                    isActive={activeDrawerId === item.id}\n                    onClick={\n                      drawers.length !== 1\n                        ? () => onDrawerChange(item.id !== activeDrawerId ? item.id : null)\n                        : undefined\n                    }\n                  />\n                );\n              })}\n              {overflowItems.length > 0 && (\n                <div className={clsx(styles['drawer-trigger'])}>\n                  <OverflowMenu\n                    ariaLabel={\n                      overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow\n                    }\n                    items={overflowItems}\n                    onItemClick={({ detail }) => onDrawerChange(detail.id)}\n                  />\n                </div>\n              )}\n            </div>\n          </aside>\n        )}\n      </div>\n    </div>\n  );\n};\n", "\n    import './styles.scoped.css';\n    export default {\n  \"toggle\": \"awsui_toggle_1uo6m_1740t_103\",\n  \"drawer-triggers\": \"awsui_drawer-triggers_1uo6m_1740t_109\",\n  \"drawer\": \"awsui_drawer_1uo6m_1740t_109\",\n  \"drawer-mobile\": \"awsui_drawer-mobile_1uo6m_1740t_119\",\n  \"drawer-closed\": \"awsui_drawer-closed_1uo6m_1740t_122\",\n  \"drawer-content\": \"awsui_drawer-content_1uo6m_1740t_129\",\n  \"drawer-content-clickable\": \"awsui_drawer-content-clickable_1uo6m_1740t_141\",\n  \"drawer-resize-content\": \"awsui_drawer-resize-content_1uo6m_1740t_151\",\n  \"drawer-triggers-wrapper\": \"awsui_drawer-triggers-wrapper_1uo6m_1740t_157\",\n  \"drawer-trigger\": \"awsui_drawer-trigger_1uo6m_1740t_109\",\n  \"drawer-trigger-active\": \"awsui_drawer-trigger-active_1uo6m_1740t_176\",\n  \"hide\": \"awsui_hide_1uo6m_1740t_184\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useRef } from 'react';\n\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { usePointerEvents } from '../utils/use-pointer-events';\nimport { useKeyboardEvents } from '../utils/use-keyboard-events';\nimport { SizeControlProps } from '../utils/interfaces';\nimport { Drawer } from './index';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nimport ResizeHandler from '../../split-panel/icons/resize-handler';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport { ResizableDrawerProps } from './interfaces';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\n\nexport const ResizableDrawer = ({\n  onResize,\n  maxWidth,\n  minWidth,\n  refs,\n  activeDrawer,\n  toolsContent,\n  ...props\n}: ResizableDrawerProps) => {\n  const { isOpen, children, width, isMobile } = props;\n\n  const clampedWidth = getLimitedValue(minWidth, width, maxWidth);\n  const relativeSize = ((clampedWidth - minWidth) / (maxWidth - minWidth)) * 100;\n\n  const setSidePanelWidth = (newWidth: number) => {\n    const size = getLimitedValue(minWidth, newWidth, maxWidth);\n    const id = activeDrawer?.id;\n\n    if (isOpen && id && maxWidth >= minWidth) {\n      onResize({ size, id });\n    }\n  };\n\n  const drawerRefObject = useRef<HTMLDivElement>(null);\n\n  const sizeControlProps: SizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: refs.slider,\n    onResize: setSidePanelWidth,\n  };\n\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const resizeHandle = (\n    <div\n      ref={refs.slider}\n      role=\"slider\"\n      tabIndex={0}\n      aria-label={activeDrawer?.ariaLabels?.resizeHandle}\n      aria-valuemax={100}\n      aria-valuemin={0}\n      aria-valuenow={relativeSize}\n      className={clsx(splitPanelStyles.slider, splitPanelStyles[`slider-side`], testutilStyles['drawers-slider'])}\n      onKeyDown={onKeyDown}\n      onPointerDown={onSliderPointerDown}\n    >\n      <ResizeHandler className={clsx(splitPanelStyles['slider-icon'], splitPanelStyles[`slider-icon-side`])} />\n    </div>\n  );\n\n  return (\n    <Drawer\n      {...props}\n      id={activeDrawer?.id}\n      width={clampedWidth}\n      ref={drawerRefObject}\n      isHidden={!activeDrawer}\n      resizeHandle={\n        !isMobile &&\n        activeDrawer?.resizable && <div className={splitPanelStyles['slider-wrapper-side']}>{resizeHandle}</div>\n      }\n      ariaLabels={{\n        openLabel: activeDrawer?.ariaLabels?.triggerButton,\n        mainLabel: activeDrawer?.ariaLabels?.drawerName,\n        closeLabel: activeDrawer?.ariaLabels?.closeButton,\n      }}\n    >\n      {toolsContent && <div className={clsx(activeDrawer?.id !== TOOLS_DRAWER_ID && styles.hide)}>{toolsContent}</div>}\n      {activeDrawer?.id !== TOOLS_DRAWER_ID ? children : null}\n    </Drawer>\n  );\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback } from 'react';\nimport styles from '../styles.css.js';\nimport { SizeControlProps } from './interfaces';\n\nexport const usePointerEvents = ({\n  position,\n  panelRef,\n  handleRef,\n  onResize,\n  hasTransitions = false,\n}: SizeControlProps) => {\n  const onDocumentPointerMove = useCallback(\n    (event: PointerEvent) => {\n      if (!panelRef || !panelRef.current || !handleRef || !handleRef.current) {\n        return;\n      }\n\n      panelRef.current.classList.remove(styles['with-motion']);\n\n      if (position === 'side') {\n        const mouseClientX = event.clientX || 0;\n\n        // The handle offset aligns the cursor with the middle of the resize handle.\n        const handleOffset = handleRef.current.getBoundingClientRect().width / 2;\n        const width = panelRef.current.getBoundingClientRect().right - mouseClientX + handleOffset;\n\n        onResize(width);\n      } else {\n        const mouseClientY = event.clientY || 0;\n\n        // The handle offset aligns the cursor with the middle of the resize handle.\n        const handleOffset = handleRef.current.getBoundingClientRect().height / 2;\n        const height = panelRef.current.getBoundingClientRect().bottom - mouseClientY + handleOffset;\n\n        onResize(height);\n      }\n    },\n    [position, panelRef, handleRef, onResize]\n  );\n\n  const onDocumentPointerUp = useCallback(() => {\n    if (!panelRef || !panelRef.current) {\n      return;\n    }\n\n    if (hasTransitions) {\n      panelRef.current.classList.add(styles['with-motion']);\n    }\n    document.body.classList.remove(styles['resize-active']);\n    document.body.classList.remove(styles[`resize-${position}`]);\n    document.removeEventListener('pointerup', onDocumentPointerUp);\n    document.removeEventListener('pointermove', onDocumentPointerMove);\n  }, [panelRef, onDocumentPointerMove, position, hasTransitions]);\n\n  const onSliderPointerDown = useCallback(() => {\n    document.body.classList.add(styles['resize-active']);\n    document.body.classList.add(styles[`resize-${position}`]);\n    document.addEventListener('pointerup', onDocumentPointerUp);\n    document.addEventListener('pointermove', onDocumentPointerMove);\n  }, [onDocumentPointerMove, onDocumentPointerUp, position]);\n\n  return onSliderPointerDown;\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { KeyCode } from '../../internal/keycode';\nimport { SizeControlProps } from './interfaces';\n\nconst KEYBOARD_SINGLE_STEP_SIZE = 10;\nconst KEYBOARD_MULTIPLE_STEPS_SIZE = 60;\n\nconst getCurrentSize = (panelRef?: React.RefObject<HTMLDivElement>) => {\n  if (!panelRef || !panelRef.current) {\n    return {\n      panelHeight: 0,\n      panelWidth: 0,\n    };\n  }\n\n  return {\n    panelHeight: panelRef.current.clientHeight,\n    panelWidth: panelRef.current.clientWidth,\n  };\n};\n\nexport const useKeyboardEvents = ({ position, onResize, panelRef }: SizeControlProps) => {\n  return (event: React.KeyboardEvent) => {\n    let currentSize;\n    let maxSize;\n\n    const { panelHeight, panelWidth } = getCurrentSize(panelRef);\n\n    if (position === 'side') {\n      currentSize = panelWidth;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerWidth;\n    } else {\n      currentSize = panelHeight;\n      // don't need the exact max size as it's constrained in the set size function\n      maxSize = window.innerHeight;\n    }\n\n    const primaryGrowKey = position === 'bottom' ? KeyCode.up : KeyCode.left;\n    const primaryShrinkKey = position === 'bottom' ? KeyCode.down : KeyCode.right;\n    const altGrowKey = position === 'bottom' ? KeyCode.right : KeyCode.down;\n    const altShrinkKey = position === 'bottom' ? KeyCode.left : KeyCode.up;\n\n    let isEventHandled = true;\n    switch (event.keyCode) {\n      case primaryGrowKey:\n      case altGrowKey:\n        onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);\n\n        break;\n      case primaryShrinkKey:\n      case altShrinkKey:\n        onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);\n        break;\n      case KeyCode.pageUp:\n        onResize(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.pageDown:\n        onResize(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);\n        break;\n      case KeyCode.home:\n        onResize(maxSize);\n        break;\n      case KeyCode.end:\n        onResize(0);\n        break;\n      default:\n        isEventHandled = false;\n    }\n\n    if (isEventHandled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nconst ResizeHandler = ({ className }: { className?: string }) => (\n  <svg\n    focusable={false}\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n  >\n    <line strokeWidth=\"2\" x1=\"2\" y1=\"5\" x2=\"14\" y2=\"5\" />\n    <line strokeWidth=\"2\" x1=\"14\" y1=\"10\" x2=\"2\" y2=\"10\" />\n  </svg>\n);\n\nexport default ResizeHandler;\n", "\n    import './styles.scoped.css';\n    export default {\n  \"drawer\": \"awsui_drawer_1r9lg_5jcsd_201\",\n  \"refresh\": \"awsui_refresh_1r9lg_5jcsd_201\",\n  \"animating\": \"awsui_animating_1r9lg_5jcsd_215\",\n  \"preference-icon--layout-border\": \"awsui_preference-icon--layout-border_1r9lg_5jcsd_238\",\n  \"preference-icon--layout-background\": \"awsui_preference-icon--layout-background_1r9lg_5jcsd_242\",\n  \"preference-icon--layout-header\": \"awsui_preference-icon--layout-header_1r9lg_5jcsd_245\",\n  \"preference-icon--border\": \"awsui_preference-icon--border_1r9lg_5jcsd_248\",\n  \"preference-icon--primary-button\": \"awsui_preference-icon--primary-button_1r9lg_5jcsd_252\",\n  \"preference-icon--secondary\": \"awsui_preference-icon--secondary_1r9lg_5jcsd_255\",\n  \"preference-icon--disabled-element\": \"awsui_preference-icon--disabled-element_1r9lg_5jcsd_258\",\n  \"preference-icon--separator\": \"awsui_preference-icon--separator_1r9lg_5jcsd_261\",\n  \"preference-icon--focus-text\": \"awsui_preference-icon--focus-text_1r9lg_5jcsd_264\",\n  \"preference-icon-refresh--layout-top\": \"awsui_preference-icon-refresh--layout-top_1r9lg_5jcsd_268\",\n  \"preference-icon-refresh--layout-main\": \"awsui_preference-icon-refresh--layout-main_1r9lg_5jcsd_271\",\n  \"preference-icon-refresh--primary\": \"awsui_preference-icon-refresh--primary_1r9lg_5jcsd_274\",\n  \"preference-icon-refresh--disabled\": \"awsui_preference-icon-refresh--disabled_1r9lg_5jcsd_277\",\n  \"preference-icon-refresh--column-header\": \"awsui_preference-icon-refresh--column-header_1r9lg_5jcsd_280\",\n  \"preference-icon-refresh--window\": \"awsui_preference-icon-refresh--window_1r9lg_5jcsd_283\",\n  \"preference-icon-refresh--secondary\": \"awsui_preference-icon-refresh--secondary_1r9lg_5jcsd_287\",\n  \"preference-icon-refresh--default\": \"awsui_preference-icon-refresh--default_1r9lg_5jcsd_290\",\n  \"preference-icon-refresh--separator\": \"awsui_preference-icon-refresh--separator_1r9lg_5jcsd_293\",\n  \"preference-icon-refresh--input-default\": \"awsui_preference-icon-refresh--input-default_1r9lg_5jcsd_296\",\n  \"preference-icon-refresh--heading\": \"awsui_preference-icon-refresh--heading_1r9lg_5jcsd_299\",\n  \"root\": \"awsui_root_1r9lg_5jcsd_303\",\n  \"preferences-button\": \"awsui_preferences-button_1r9lg_5jcsd_338\",\n  \"close-button\": \"awsui_close-button_1r9lg_5jcsd_342\",\n  \"drawer-closed\": \"awsui_drawer-closed_1r9lg_5jcsd_354\",\n  \"drawer-content-side\": \"awsui_drawer-content-side_1r9lg_5jcsd_359\",\n  \"drawer-content-bottom\": \"awsui_drawer-content-bottom_1r9lg_5jcsd_375\",\n  \"position-bottom\": \"awsui_position-bottom_1r9lg_5jcsd_381\",\n  \"position-side\": \"awsui_position-side_1r9lg_5jcsd_408\",\n  \"slider\": \"awsui_slider_1r9lg_5jcsd_414\",\n  \"slider-side\": \"awsui_slider-side_1r9lg_5jcsd_449\",\n  \"slider-wrapper-bottom\": \"awsui_slider-wrapper-bottom_1r9lg_5jcsd_456\",\n  \"slider-wrapper-side\": \"awsui_slider-wrapper-side_1r9lg_5jcsd_467\",\n  \"open-button\": \"awsui_open-button_1r9lg_5jcsd_478\",\n  \"open-button-side\": \"awsui_open-button-side_1r9lg_5jcsd_482\",\n  \"slider-icon\": \"awsui_slider-icon_1r9lg_5jcsd_491\",\n  \"slider-icon-bottom\": \"awsui_slider-icon-bottom_1r9lg_5jcsd_497\",\n  \"slider-icon-side\": \"awsui_slider-icon-side_1r9lg_5jcsd_501\",\n  \"pane-header-wrapper-bottom\": \"awsui_pane-header-wrapper-bottom_1r9lg_5jcsd_505\",\n  \"drawer-mobile\": \"awsui_drawer-mobile_1r9lg_5jcsd_516\",\n  \"drawer-disable-content-paddings\": \"awsui_drawer-disable-content-paddings_1r9lg_5jcsd_520\",\n  \"content-bottom\": \"awsui_content-bottom_1r9lg_5jcsd_529\",\n  \"pane-bottom-center-align\": \"awsui_pane-bottom-center-align_1r9lg_5jcsd_545\",\n  \"pane-bottom-content-nav-padding\": \"awsui_pane-bottom-content-nav-padding_1r9lg_5jcsd_550\",\n  \"pane-bottom-content-tools-padding\": \"awsui_pane-bottom-content-tools-padding_1r9lg_5jcsd_554\",\n  \"content-bottom-max-width\": \"awsui_content-bottom-max-width_1r9lg_5jcsd_558\",\n  \"content-side\": \"awsui_content-side_1r9lg_5jcsd_563\",\n  \"pane-header-wrapper-side\": \"awsui_pane-header-wrapper-side_1r9lg_5jcsd_573\",\n  \"pane-content-wrapper-side\": \"awsui_pane-content-wrapper-side_1r9lg_5jcsd_579\",\n  \"header\": \"awsui_header_1r9lg_5jcsd_586\",\n  \"header-text\": \"awsui_header-text_1r9lg_5jcsd_596\",\n  \"header-actions\": \"awsui_header-actions_1r9lg_5jcsd_609\",\n  \"divider\": \"awsui_divider_1r9lg_5jcsd_617\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const SPLIT_PANEL_MIN_HEIGHT = 160;\nexport const SPLIT_PANEL_MIN_WIDTH = 280;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { useSplitPanelContext } from '../../internal/context/split-panel-context';\n\ninterface SideSplitPanelDrawer {\n  displayed: boolean;\n  children: React.ReactNode;\n}\n\nexport function SideSplitPanelDrawer({ displayed, children }: SideSplitPanelDrawer) {\n  const { isOpen, size, topOffset, bottomOffset } = useSplitPanelContext();\n  const width = isOpen && children ? size : undefined;\n  return (\n    <div\n      className={clsx(displayed && styles['drawer-displayed'])}\n      style={{ width }}\n      data-testid=\"side-split-panel-drawer\"\n    >\n      <div className={styles['drawer-content']} style={{ width: width, top: topOffset, bottom: bottomOffset }}>\n        {children}\n      </div>\n    </div>\n  );\n}\n", "\n    import './styles.scoped.css';\n    export default {\n  \"drawer-displayed\": \"awsui_drawer-displayed_1lh3u_1yevz_103\",\n  \"drawer-content\": \"awsui_drawer-content_1lh3u_1yevz_107\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, createContext } from 'react';\nimport { SplitPanelFocusControlRefs } from '../../app-layout/utils/use-split-panel-focus-control';\n\nexport interface SplitPanelSideToggleProps {\n  displayed: boolean;\n  ariaLabel: string | undefined;\n}\n\nexport interface SplitPanelContextBaseProps {\n  topOffset: number;\n  bottomOffset: number;\n  leftOffset: number;\n  rightOffset: number;\n  position: 'side' | 'bottom';\n  size: number;\n  disableContentPaddings?: boolean;\n  contentWidthStyles?: React.CSSProperties;\n  contentWrapperPaddings?: {\n    closedNav: boolean;\n    closedTools: boolean;\n  };\n  isOpen?: boolean;\n  isForcedPosition: boolean;\n  onResize: (newSize: number) => void;\n  onToggle: () => void;\n  onPreferencesChange: (detail: { position: 'side' | 'bottom' }) => void;\n  reportSize: (pixels: number) => void;\n  reportHeaderHeight: (pixels: number) => void;\n  setSplitPanelToggle: (config: SplitPanelSideToggleProps) => void;\n  refs: SplitPanelFocusControlRefs;\n}\n\nexport interface SplitPanelContextProps extends SplitPanelContextBaseProps {\n  relativeSize: number;\n}\n\nconst SplitPanelContext = createContext<SplitPanelContextProps | null>(null);\n\nexport const SplitPanelContextProvider = SplitPanelContext.Provider;\n\nexport function useSplitPanelContext() {\n  const ctx = useContext(SplitPanelContext);\n  if (!ctx) {\n    throw new Error('Split panel can only be used inside app layout');\n  }\n  return ctx;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useState } from 'react';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { SplitPanelContextBaseProps, SplitPanelContextProvider } from '../../internal/context/split-panel-context';\nimport { SPLIT_PANEL_MIN_HEIGHT, SPLIT_PANEL_MIN_WIDTH } from './constants';\n\nexport interface SplitPanelProviderProps extends SplitPanelContextBaseProps {\n  maxWidth: number;\n  getMaxHeight: () => number;\n  children?: React.ReactNode;\n}\n\nexport function SplitPanelProvider({\n  children,\n  size,\n  getMaxHeight,\n  maxWidth,\n  onResize,\n  ...rest\n}: SplitPanelProviderProps) {\n  const { position, reportSize, isOpen } = rest;\n  const [maxHeight, setMaxHeight] = useState(size);\n  const minSize = position === 'bottom' ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;\n  const maxSize = position === 'bottom' ? maxHeight : maxWidth;\n  const cappedSize = getLimitedValue(minSize, size, maxSize);\n  const relativeSize = ((size - minSize) / (maxSize - minSize)) * 100;\n\n  const onResizeWithValidation = (newSize: number) => {\n    const maxSize = position === 'side' ? maxWidth : getMaxHeight();\n    const isResizeValid = position === 'side' ? maxSize >= SPLIT_PANEL_MIN_WIDTH : maxSize >= SPLIT_PANEL_MIN_HEIGHT;\n    if (isOpen && isResizeValid) {\n      onResize(getLimitedValue(minSize, newSize, maxSize));\n    }\n  };\n\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));\n    return () => cancelAnimationFrame(handle);\n  }, [size, minSize, position, getMaxHeight]);\n\n  useEffect(() => {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    const handler = () => setMaxHeight(getMaxHeight());\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [position, getMaxHeight]);\n\n  return (\n    <SplitPanelContextProvider value={{ ...rest, size: cappedSize, relativeSize, onResize: onResizeWithValidation }}>\n      {children}\n    </SplitPanelContextProvider>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nimport { useCallback, useEffect, useState } from 'react';\n\ninterface AppLayoutRect {\n  left: number;\n  right: number;\n  width: number;\n}\n\nexport default function useAppLayoutRect(element: HTMLDivElement | null): AppLayoutRect {\n  const [offsets, setOffsets] = useState({ left: 0, right: 0, width: Number.POSITIVE_INFINITY });\n\n  const updatePosition = useCallback(() => {\n    // skip reading sizes in JSDOM\n    if (!element || !document.body.clientWidth) {\n      return;\n    }\n    const { left, right } = element.getBoundingClientRect();\n    const bodyWidth = document.body.clientWidth;\n\n    setOffsets({ left, right: bodyWidth - right, width: bodyWidth });\n  }, [element]);\n\n  useEffect(() => {\n    window.addEventListener('resize', updatePosition);\n    return () => window.removeEventListener('resize', updatePosition);\n  }, [updatePosition]);\n\n  const getElement = useCallback(() => element, [element]);\n  useResizeObserver(getElement, updatePosition);\n\n  return offsets;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DependencyList, RefObject, useEffect, useRef } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\n\nexport type SplitPanelLastInteraction = { type: 'open' } | { type: 'close' } | { type: 'position' };\n\nexport interface SplitPanelFocusControlRefs {\n  toggle: RefObject<ButtonProps.Ref>;\n  slider: RefObject<HTMLDivElement>;\n  preferences: RefObject<ButtonProps.Ref>;\n}\ninterface SplitPanelFocusControlState {\n  refs: SplitPanelFocusControlRefs;\n  setLastInteraction: (interaction: SplitPanelLastInteraction) => void;\n}\n\nexport function useSplitPanelFocusControl(dependencies: DependencyList): SplitPanelFocusControlState {\n  const refs = {\n    toggle: useRef<ButtonProps.Ref>(null),\n    slider: useRef<HTMLDivElement>(null),\n    preferences: useRef<ButtonProps.Ref>(null),\n  };\n  const lastInteraction = useRef<SplitPanelLastInteraction | null>(null);\n\n  useEffect(() => {\n    switch (lastInteraction.current?.type) {\n      case 'open':\n        refs.slider.current?.focus();\n        break;\n      case 'close':\n        refs.toggle.current?.focus();\n        break;\n      case 'position':\n        refs.preferences.current?.focus();\n        break;\n    }\n    lastInteraction.current = null;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n\n  return {\n    refs,\n    setLastInteraction: (interaction: SplitPanelLastInteraction) => (lastInteraction.current = interaction),\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { AppLayoutInternalsProvider } from './context';\nimport { AppLayoutProps } from '../interfaces';\nimport Background from './background';\nimport Breadcrumbs from './breadcrumbs';\nimport Drawers from './drawers';\nimport Header from './header';\nimport Layout from './layout';\nimport Main from './main';\nimport MobileToolbar from './mobile-toolbar';\nimport Navigation from './navigation';\nimport Notifications from './notifications';\nimport SplitPanel from './split-panel';\nimport Tools from './tools';\n\nconst AppLayoutWithRef = React.forwardRef(function AppLayout(\n  props: AppLayoutProps,\n  ref: React.Ref<AppLayoutProps.Ref>\n) {\n  return (\n    <AppLayoutInternalsProvider {...props} ref={ref}>\n      <SplitPanel>\n        <Layout>\n          <Background />\n\n          <Navigation />\n\n          <MobileToolbar />\n\n          <Notifications />\n\n          <Breadcrumbs />\n\n          <Header />\n\n          <Main />\n\n          <SplitPanel.Bottom />\n\n          <Tools>\n            <SplitPanel.Side />\n          </Tools>\n\n          <Drawers />\n        </Layout>\n      </SplitPanel>\n    </AppLayoutInternalsProvider>\n  );\n});\n\nexport default AppLayoutWithRef;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, {\n  createContext,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n  useContext,\n} from 'react';\nimport { applyDefaults } from '../defaults';\nimport { AppLayoutContext } from '../../internal/context/app-layout-context';\nimport { DynamicOverlapContext } from '../../internal/context/dynamic-overlap-context';\nimport { AppLayoutProps } from '../interfaces';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { FocusControlRefs, useFocusControl } from '../utils/use-focus-control';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport { isDevelopment } from '../../internal/is-development';\nimport { getSplitPanelPosition } from './split-panel';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { SplitPanelFocusControlRefs, useSplitPanelFocusControl } from '../utils/use-split-panel-focus-control';\nimport { SplitPanelSideToggleProps } from '../../internal/context/split-panel-context';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useStableCallback, warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport useResize from '../utils/use-resize';\nimport styles from './styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport useBackgroundOverlap from './use-background-overlap';\nimport { useDrawers } from '../utils/use-drawers';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\n\ninterface AppLayoutInternals extends AppLayoutProps {\n  activeDrawerId: string | null;\n  drawers: Array<AppLayoutProps.Drawer> | undefined;\n  drawersAriaLabel: string | undefined;\n  drawersOverflowAriaLabel: string | undefined;\n  drawersOverflowWithBadgeAriaLabel: string | undefined;\n  drawersRefs: FocusControlRefs;\n  drawerSize: number;\n  drawersMinWidth: number;\n  drawersMaxWidth: number;\n  drawerRef: React.Ref<HTMLElement>;\n  resizeHandle: React.ReactElement;\n  drawersTriggerCount: number;\n  handleDrawersClick: (activeDrawerId: string | null, skipFocusControl?: boolean) => void;\n  handleSplitPanelClick: () => void;\n  handleNavigationClick: (isOpen: boolean) => void;\n  handleSplitPanelPreferencesChange: (detail: AppLayoutProps.SplitPanelPreferences) => void;\n  handleSplitPanelResize: (newSize: number) => void;\n  handleToolsClick: (value: boolean, skipFocusControl?: boolean) => void;\n  hasBackgroundOverlap: boolean;\n  hasDefaultToolsWidth: boolean;\n  hasDrawerViewportOverlay: boolean;\n  hasNotificationsContent: boolean;\n  hasOpenDrawer?: boolean;\n  hasStickyBackground: boolean;\n  isBackgroundOverlapDisabled: boolean;\n  isMobile: boolean;\n  isNavigationOpen: boolean;\n  isSplitPanelForcedPosition: boolean;\n  isSplitPanelOpen?: boolean;\n  isToolsOpen: boolean;\n  layoutElement: React.Ref<HTMLElement>;\n  layoutWidth: number;\n  loseToolsFocus: () => void;\n  loseDrawersFocus: () => void;\n  mainElement: React.Ref<HTMLDivElement>;\n  mainOffsetLeft: number;\n  navigationRefs: FocusControlRefs;\n  notificationsElement: React.Ref<HTMLDivElement>;\n  notificationsHeight: number;\n  offsetBottom: number;\n  setHasStickyBackground: (value: boolean) => void;\n  setSplitPanelReportedSize: (value: number) => void;\n  setSplitPanelReportedHeaderHeight: (value: number) => void;\n  headerHeight: number;\n  footerHeight: number;\n  splitPanelControlId: string;\n  splitPanelMaxWidth: number;\n  splitPanelMinWidth: number;\n  splitPanelPosition: AppLayoutProps.SplitPanelPosition;\n  splitPanelReportedSize: number;\n  splitPanelReportedHeaderHeight: number;\n  splitPanelToggle: SplitPanelSideToggleProps;\n  setSplitPanelToggle: (toggle: SplitPanelSideToggleProps) => void;\n  splitPanelDisplayed: boolean;\n  splitPanelRefs: SplitPanelFocusControlRefs;\n  toolsControlId: string;\n  toolsRefs: FocusControlRefs;\n  __embeddedViewMode?: boolean;\n}\n\n/**\n * The default values are destructured in the context instantiation to\n * prevent downstream Typescript errors. This could likely be replaced\n * by a context interface definition that extends the AppLayout interface.\n */\nconst AppLayoutInternalsContext = createContext<AppLayoutInternals | null>(null);\n\ninterface AppLayoutProviderInternalsProps extends AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function useAppLayoutInternals() {\n  const ctx = useContext(AppLayoutInternalsContext);\n  if (!ctx) {\n    throw new Error('Invariant violation: this context is only available inside app layout');\n  }\n  return ctx;\n}\n\nexport const AppLayoutInternalsProvider = React.forwardRef(\n  (\n    {\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      navigationHide,\n      navigationOpen: controlledNavigationOpen,\n      contentType = 'default',\n      headerSelector = '#b #h',\n      footerSelector = '#b #h',\n      children,\n      splitPanel,\n      ...props\n    }: AppLayoutProviderInternalsProps,\n    forwardRef: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    const isMobile = useMobile();\n\n    // Private API for embedded view mode\n    const __embeddedViewMode = Boolean((props as any).__embeddedViewMode);\n\n    if (isDevelopment) {\n      if (controlledToolsOpen && toolsHide) {\n        warnOnce(\n          'AppLayout',\n          `You have enabled both the \\`toolsOpen\\` prop and the \\`toolsHide\\` prop. This is not supported. Set \\`toolsOpen\\` to \\`false\\` when you set \\`toolsHide\\` to \\`true\\`.`\n        );\n      }\n    }\n\n    const [hasStickyBackground, setHasStickyBackground] = useState(false);\n\n    /**\n     * Set the default values for minimum and maximum content width.\n     */\n    const geckoMaxCssLength = ((1 << 30) - 1) / 60;\n    const halfGeckoMaxCssLength = geckoMaxCssLength / 2;\n    // CSS lengths in Gecko are limited to at most (1<<30)-1 app units (Gecko uses 60 as app unit).\n    // Limit the maxContentWidth to the half of the upper boundary (≈4230^2) to be on the safe side.\n    const maxContentWidth =\n      props.maxContentWidth && props.maxContentWidth > halfGeckoMaxCssLength\n        ? halfGeckoMaxCssLength\n        : props.maxContentWidth ?? 0;\n    const minContentWidth = props.minContentWidth ?? 280;\n\n    /**\n     * Determine the default state of the Navigation and Tools drawers.\n     * Mobile viewports should be closed by default under all circumstances.\n     * If the navigationOpen prop has been set then that should take precedence\n     * over the contentType prop. Desktop viewports that do not have the\n     * navigationOpen or contentType props set will use the default contentType.\n     */\n    const contentTypeDefaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, true);\n\n    /**\n     * The useControllable hook will set the default value and manage either\n     * the controlled or uncontrolled state of the Navigation drawer. The logic\n     * for determining the default state is colocated with the Navigation component.\n     *\n     * The callback that will be passed to the Navigation and MobileToolbar\n     * components to handle the click events that will change the state\n     * of the Navigation drawer. It will set the Navigation state with the\n     * useControllable hook and also fire the onNavigationChange function to\n     * emit the state change.\n     */\n    const [isNavigationOpen = false, setIsNavigationOpen] = useControllable(\n      controlledNavigationOpen,\n      props.onNavigationChange,\n      isMobile ? false : contentTypeDefaults.navigationOpen,\n      { componentName: 'AppLayout', controlledProp: 'navigationOpen', changeHandler: 'onNavigationChange' }\n    );\n\n    const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(isNavigationOpen);\n\n    const handleNavigationClick = useStableCallback(function handleNavigationChange(isOpen: boolean) {\n      setIsNavigationOpen(isOpen);\n      focusNavButtons();\n      fireNonCancelableEvent(props.onNavigationChange, { open: isOpen });\n    });\n\n    useEffect(() => {\n      // Close navigation drawer on mobile so that the main content is visible\n      if (isMobile) {\n        handleNavigationClick(false);\n      }\n    }, [isMobile, handleNavigationClick]);\n\n    /**\n     * The useControllable hook will set the default value and manage either\n     * the controlled or uncontrolled state of the Tools drawer. The logic\n     * for determining the default state is colocated with the Tools component.\n     *\n     * The callback that will be passed to the Navigation and MobileToolbar\n     * components to handle the click events that will change the state\n     * of the Tools drawer. It will set the Tools state with the\n     * useControllable hook and also fire the onToolsChange function to\n     * emit the state change.\n     */\n    const toolsWidth = props.toolsWidth ?? 290;\n    const hasDefaultToolsWidth = props.toolsWidth === undefined;\n\n    const [isToolsOpen = false, setIsToolsOpen] = useControllable(\n      controlledToolsOpen,\n      props.onToolsChange,\n      isMobile ? false : contentTypeDefaults.toolsOpen,\n      { componentName: 'AppLayout', controlledProp: 'toolsOpen', changeHandler: 'onToolsChange' }\n    );\n\n    const {\n      refs: toolsRefs,\n      setFocus: focusToolsButtons,\n      loseFocus: loseToolsFocus,\n    } = useFocusControl(isToolsOpen, true);\n\n    const handleToolsClick = useCallback(\n      function handleToolsChange(isOpen: boolean, skipFocusControl?: boolean) {\n        setIsToolsOpen(isOpen);\n        !skipFocusControl && focusToolsButtons();\n        fireNonCancelableEvent(props.onToolsChange, { open: isOpen });\n      },\n      [props.onToolsChange, setIsToolsOpen, focusToolsButtons]\n    );\n\n    /**\n     * Query the DOM for the header and footer elements based on the selectors provided\n     * by the properties and pass the heights to the custom property definitions.\n     */\n    const headerHeight = useObservedElement(headerSelector);\n    const footerHeight = useObservedElement(footerSelector);\n\n    /**\n     * Set the default values for the minimum and maximum Split Panel width when it is\n     * in the side position. The useLayoutEffect will compute the available space in the\n     * DOM for the Split Panel given the current state. The minimum and maximum\n     * widths will potentially trigger a side effect that will put the Split Panel into\n     * a forced position on the bottom.\n     */\n    const splitPanelMinWidth = 280;\n    const [splitPanelMaxWidth, setSplitPanelMaxWidth] = useState(splitPanelMinWidth);\n\n    /**\n     * The useControllable hook will set the default value and manage either\n     * the controlled or uncontrolled state of the Split Panel. By default\n     * the Split Panel should always be closed on page load.\n     *\n     * The callback that will be passed to the SplitPanel component\n     * to handle the click events that will change the state of the SplitPanel\n     * to open or closed given the current state. It will set the isSplitPanelOpen\n     * controlled state and fire the onSplitPanelToggle event.\n     */\n    const [isSplitPanelOpen, setIsSplitPanelOpen] = useControllable(\n      props.splitPanelOpen,\n      props.onSplitPanelToggle,\n      false,\n      { componentName: 'AppLayout', controlledProp: 'splitPanelOpen', changeHandler: 'onSplitPanelToggle' }\n    );\n\n    /**\n     * The useControllable hook will manage the controlled or uncontrolled\n     * state of the splitPanelPreferences. By default the splitPanelPreferences\n     * is undefined. When set the object shape should have a single key to indicate\n     * either bottom or side position.\n     *\n     * The callback that will handle changes to the splitPanelPreferences\n     * object that will determine if the SplitPanel is rendered either on the\n     * bottom of the viewport or within the Tools container.\n     */\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      props.splitPanelPreferences,\n      props.onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n\n    const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([\n      splitPanelPreferences,\n      isSplitPanelOpen,\n    ]);\n\n    const handleSplitPanelClick = useCallback(\n      function handleSplitPanelChange() {\n        setIsSplitPanelOpen(!isSplitPanelOpen);\n        setSplitPanelLastInteraction({ type: isSplitPanelOpen ? 'close' : 'open' });\n        fireNonCancelableEvent(props.onSplitPanelToggle, { open: !isSplitPanelOpen });\n      },\n      [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen, setSplitPanelLastInteraction]\n    );\n\n    /**\n     * The Split Panel will be in forced (bottom) position if the defined minimum width is\n     * greater than the maximum width. In other words, the maximum width is the currently\n     * available horizontal space based on all other components that are rendered. If the\n     * minimum width exceeds this value then there is not enough horizontal space and we must\n     * force it to the bottom position.\n     */\n    const [isSplitPanelForcedPosition, setSplitPanelForcedPosition] = useState(false);\n    const splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);\n\n    useLayoutEffect(\n      function handleSplitPanelForcePosition() {\n        setSplitPanelForcedPosition(splitPanelMinWidth > splitPanelMaxWidth);\n      },\n      [splitPanelMaxWidth, splitPanelMinWidth]\n    );\n\n    /**\n     * The useControllable hook will set the default size of the SplitPanel based\n     * on the default position set in the splitPanelPreferences. The logic for the\n     * default size is contained in the SplitPanel component. The splitPanelControlledSize\n     * will be bound to the size property in the SplitPanel context for rendering.\n     *\n     * The callback that will be passed to the SplitPanel component\n     * to handle the resize events that will change the size of the SplitPanel.\n     * It will set the splitPanelControlledSize controlled state and fire the\n     * onSplitPanelResize event.\n     */\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n    const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = useState(0);\n    const [splitPanelToggle, setSplitPanelToggle] = useState<SplitPanelSideToggleProps>({\n      displayed: false,\n      ariaLabel: undefined,\n    });\n    const splitPanelDisplayed = !!(splitPanelToggle.displayed || (isSplitPanelOpen && !!splitPanel));\n    const splitPanelControlId = useUniqueId('split-panel-');\n    const toolsControlId = useUniqueId('tools-');\n\n    const [splitPanelSize, setSplitPanelSize] = useControllable(\n      props.splitPanelSize,\n      props.onSplitPanelResize,\n      getSplitPanelDefaultSize(splitPanelPosition),\n      { componentName: 'AppLayout', controlledProp: 'splitPanelSize', changeHandler: 'onSplitPanelResize' }\n    );\n\n    const handleSplitPanelResize = useCallback(\n      (size: number) => {\n        setSplitPanelSize(size);\n        fireNonCancelableEvent(props.onSplitPanelResize, { size });\n      },\n      [props.onSplitPanelResize, setSplitPanelSize]\n    );\n\n    const handleSplitPanelPreferencesChange = useCallback(\n      function handleSplitPanelChange(detail: AppLayoutProps.SplitPanelPreferences) {\n        setSplitPanelPreferences(detail);\n        setSplitPanelLastInteraction({ type: 'position' });\n        fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);\n      },\n      [props.onSplitPanelPreferencesChange, setSplitPanelPreferences, setSplitPanelLastInteraction]\n    );\n\n    const {\n      drawers,\n      activeDrawer,\n      activeDrawerId,\n      minDrawerSize: drawersMinWidth,\n      onActiveDrawerChange,\n      onActiveDrawerResize,\n      activeDrawerSize,\n      ...drawersProps\n    } = useDrawers(props, props.ariaLabels, {\n      ariaLabels: props.ariaLabels,\n      toolsHide,\n      toolsOpen: isToolsOpen,\n      tools: props.tools,\n      toolsWidth,\n      onToolsToggle: handleToolsClick,\n    });\n\n    const [drawersMaxWidth, setDrawersMaxWidth] = useState(toolsWidth);\n    const hasDrawers = !!drawers && drawers.length > 0;\n\n    const {\n      refs: drawersRefs,\n      setFocus: focusDrawersButtons,\n      loseFocus: loseDrawersFocus,\n    } = useFocusControl(!!activeDrawerId, true, activeDrawerId);\n\n    const drawerRef = useRef<HTMLDivElement>(null);\n    const { resizeHandle, drawerSize } = useResize(drawerRef, {\n      onActiveDrawerResize,\n      activeDrawerSize,\n      activeDrawer,\n      drawersRefs,\n      isToolsOpen,\n      drawersMaxWidth,\n    });\n\n    const handleDrawersClick = (id: string | null, skipFocusControl?: boolean) => {\n      const newActiveDrawerId = id !== activeDrawerId ? id : null;\n\n      onActiveDrawerChange(newActiveDrawerId);\n\n      !skipFocusControl && focusDrawersButtons();\n    };\n\n    let drawersTriggerCount = drawers ? drawers.length : !toolsHide ? 1 : 0;\n    if (splitPanelDisplayed && splitPanelPosition === 'side') {\n      drawersTriggerCount++;\n    }\n    const hasOpenDrawer =\n      !!activeDrawerId ||\n      (!toolsHide && isToolsOpen) ||\n      (splitPanelDisplayed && splitPanelPosition === 'side' && isSplitPanelOpen);\n    const hasDrawerViewportOverlay =\n      isMobile && (!!activeDrawerId || (!navigationHide && isNavigationOpen) || (!toolsHide && isToolsOpen));\n\n    /**\n     * The Layout element is not necessarily synonymous with the client\n     * viewport width. There can be content in the horizontal viewport\n     * that exists on either side of the AppLayout. This resize observer\n     * will set the custom property of the Layout element width that\n     * is used for various horizontal constraints such as the maximum\n     * allowed width of the Tools container.\n     *\n     * The offsetLeft of the Main will return the distance that the\n     * Main element has from the left edge of the Layout component.\n     * The offsetLeft value can vary based on the presence and state\n     * of the Navigation as well as content gaps in the grid definition.\n     * This value is used to determine the max width constraint calculation\n     * for the Tools container.\n     */\n    const [layoutContainerQuery, layoutElement] = useContainerQuery(rect => rect.contentBoxWidth);\n    const layoutWidth = layoutContainerQuery ?? 0;\n\n    const mainElement = useRef<HTMLDivElement>(null);\n    const [mainOffsetLeft, setMainOffsetLeft] = useState(0);\n\n    const { hasBackgroundOverlap, updateBackgroundOverlapHeight } = useBackgroundOverlap({\n      contentHeader: props.contentHeader,\n      disableContentHeaderOverlap: props.disableContentHeaderOverlap,\n      layoutElement,\n    });\n\n    useLayoutEffect(\n      function handleMainOffsetLeft() {\n        setMainOffsetLeft(mainElement?.current?.offsetLeft ?? 0);\n      },\n      [layoutWidth, isNavigationOpen, isToolsOpen, splitPanelReportedSize]\n    );\n\n    /**\n     * On mobile viewports the navigation and tools drawers are adjusted to a fixed position\n     * that consumes 100% of the viewport height and width. The body content could potentially\n     * be scrollable underneath the drawer. In order to prevent this a CSS class needs to be\n     * added to the document body that sets overflow to hidden.\n     */\n    useEffect(\n      function handleBodyScroll() {\n        if (isMobile && (isNavigationOpen || isToolsOpen || !!activeDrawer)) {\n          document.body.classList.add(styles['block-body-scroll']);\n        } else {\n          document.body.classList.remove(styles['block-body-scroll']);\n        }\n\n        // Ensure the CSS class is removed from the body on side effect cleanup\n        return function cleanup() {\n          document.body.classList.remove(styles['block-body-scroll']);\n        };\n      },\n      [isMobile, isNavigationOpen, isToolsOpen, activeDrawer]\n    );\n\n    /**\n     * Because the notifications slot does not give us any direction insight into\n     * what the state of the child content is we need to have a mechanism for\n     * tracking the height of the notifications and whether or not it has content.\n     * The height of the notifications is an integer that will be used as a custom\n     * property on the Layout component to determine what the sticky offset should\n     * be if there are sticky notifications. This could be any number including\n     * zero based on how the child content renders. The hasNotificationsContent boolean\n     * is simply centralizing the logic of the notifications height being > 0 such\n     * that it is not repeated in various components (such as MobileToolbar) that need to\n     * know if the notifications slot is empty.\n     */\n    const [notificationsContainerQuery, notificationsElement] = useContainerQuery(rect => rect.contentBoxHeight);\n\n    const notificationsHeight = notificationsContainerQuery ?? 0;\n    const hasNotificationsContent = notificationsHeight > 0;\n    /**\n     * Determine the offsetBottom value based on the presence of a footer element and\n     * the SplitPanel component. Ignore the SplitPanel if it is not in the bottom\n     * position. Use the size property if it is open and the header height if it is closed.\n     */\n    let offsetBottom = footerHeight;\n\n    if (splitPanelDisplayed && splitPanelPosition === 'bottom') {\n      if (isSplitPanelOpen) {\n        offsetBottom += splitPanelReportedSize;\n      } else {\n        offsetBottom += splitPanelReportedHeaderHeight;\n      }\n    }\n\n    /**\n     * Warning! This is a hack! In order to accurately calculate if there is adequate\n     * horizontal space for the Split Panel to be in the side position we need two values\n     * that are not available in JavaScript.\n     *\n     * The first is the the content gap on the right which is stored in a design token\n     * and applied in the Layout CSS:\n     *\n     * $contentGapRight: #{awsui.$space-layout-content-horizontal};\n     *\n     * The second is the width of the element that has the circular buttons for the\n     * Tools and Split Panel. This could be suppressed given the state of the Tools\n     * drawer returning a zero value. It would, however, be rendered if the Split Panel\n     * were to move into the side position. This is calculated in the Tools CSS and\n     * the Trigger button CSS with design tokens:\n     *\n     * padding: awsui.$space-scaled-s awsui.$space-layout-toggle-padding;\n     * width: awsui.$space-layout-toggle-diameter;\n     *\n     * These values will be defined below as static integers that are rough approximations\n     * of their computed width when rendered in the DOM, but doubled to ensure adequate\n     * spacing for the Split Panel to be in side position.\n     */\n    useLayoutEffect(\n      function handleSplitPanelMaxWidth() {\n        const contentGapRight = 50; // Approximately 24px when rendered but doubled for safety\n        const toolsFormOffsetWidth = 120; // Approximately 60px when rendered but doubled for safety\n        const getPanelOffsetWidth = () => {\n          if (drawers) {\n            return activeDrawerId ? drawerSize : 0;\n          }\n          return isToolsOpen ? toolsWidth : 0;\n        };\n\n        setSplitPanelMaxWidth(\n          layoutWidth -\n            mainOffsetLeft -\n            minContentWidth -\n            contentGapRight -\n            toolsFormOffsetWidth -\n            getPanelOffsetWidth()\n        );\n\n        setDrawersMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth);\n      },\n      [\n        activeDrawerId,\n        drawerSize,\n        drawers,\n        isNavigationOpen,\n        isToolsOpen,\n        layoutWidth,\n        mainOffsetLeft,\n        minContentWidth,\n        toolsWidth,\n      ]\n    );\n\n    /**\n     * The useImperativeHandle hook in conjunction with the forwardRef function\n     * in the AppLayout component definition expose the following callable\n     * functions to component consumers when they put a ref as a property on\n     * their component implementation.\n     */\n    useImperativeHandle(\n      forwardRef,\n      function createImperativeHandle() {\n        return {\n          closeNavigationIfNecessary: function () {\n            isMobile && handleNavigationClick(false);\n          },\n          openTools: function () {\n            handleToolsClick(true);\n          },\n          focusToolsClose: () => {\n            if (hasDrawers) {\n              focusDrawersButtons(true);\n            } else {\n              focusToolsButtons(true);\n            }\n          },\n          focusActiveDrawer: () => focusDrawersButtons(true),\n          focusSplitPanel: () => splitPanelRefs.slider.current?.focus(),\n        };\n      },\n      [\n        isMobile,\n        handleNavigationClick,\n        handleToolsClick,\n        focusToolsButtons,\n        focusDrawersButtons,\n        splitPanelRefs.slider,\n        hasDrawers,\n      ]\n    );\n\n    return (\n      <AppLayoutInternalsContext.Provider\n        value={{\n          ...props,\n          activeDrawerId,\n          contentType,\n          drawers,\n          drawersAriaLabel: drawersProps.ariaLabelsWithDrawers?.drawers,\n          drawersOverflowAriaLabel: drawersProps.ariaLabelsWithDrawers?.drawersOverflow,\n          drawersOverflowWithBadgeAriaLabel: drawersProps.ariaLabelsWithDrawers?.drawersOverflowWithBadge,\n          drawersRefs,\n          drawersMinWidth,\n          drawersMaxWidth,\n          drawerSize,\n          drawerRef,\n          resizeHandle,\n          drawersTriggerCount,\n          headerHeight,\n          footerHeight,\n          hasDefaultToolsWidth,\n          hasDrawerViewportOverlay,\n          handleDrawersClick,\n          handleNavigationClick,\n          handleSplitPanelClick,\n          handleSplitPanelPreferencesChange,\n          handleSplitPanelResize,\n          handleToolsClick,\n          hasBackgroundOverlap,\n          hasNotificationsContent,\n          hasOpenDrawer,\n          hasStickyBackground,\n          isBackgroundOverlapDisabled: props.disableContentHeaderOverlap || !hasBackgroundOverlap,\n          isMobile,\n          isNavigationOpen: isNavigationOpen ?? false,\n          isSplitPanelForcedPosition,\n          isSplitPanelOpen,\n          isToolsOpen,\n          layoutElement,\n          layoutWidth,\n          loseToolsFocus,\n          loseDrawersFocus,\n          mainElement,\n          mainOffsetLeft,\n          maxContentWidth,\n          minContentWidth,\n          navigationHide,\n          navigationRefs,\n          notificationsElement,\n          notificationsHeight,\n          offsetBottom,\n          setHasStickyBackground,\n          setSplitPanelReportedSize,\n          setSplitPanelReportedHeaderHeight,\n          splitPanel,\n          splitPanelControlId,\n          splitPanelDisplayed,\n          splitPanelMaxWidth,\n          splitPanelMinWidth,\n          splitPanelPosition,\n          splitPanelPreferences,\n          splitPanelReportedSize,\n          splitPanelReportedHeaderHeight,\n          splitPanelSize,\n          splitPanelToggle,\n          setSplitPanelToggle,\n          splitPanelRefs,\n          toolsControlId,\n          toolsHide,\n          toolsOpen: isToolsOpen,\n          toolsWidth,\n          toolsRefs,\n          __embeddedViewMode,\n        }}\n      >\n        <AppLayoutContext.Provider\n          value={{\n            stickyOffsetBottom: offsetBottom,\n            stickyOffsetTop: 0, // not used in this design. Sticky headers read a CSS-var instead\n            setHasStickyBackground,\n          }}\n        >\n          <DynamicOverlapContext.Provider value={updateBackgroundOverlapHeight}>\n            {children}\n          </DynamicOverlapContext.Provider>\n        </AppLayoutContext.Provider>\n      </AppLayoutInternalsContext.Provider>\n    );\n  }\n);\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport { SplitPanelProvider, SplitPanelProviderProps } from '../split-panel';\nimport { AppLayoutProps } from '../interfaces';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel({ children }: React.PropsWithChildren<unknown>) {\n  const {\n    footerHeight,\n    handleSplitPanelClick,\n    handleSplitPanelPreferencesChange,\n    handleSplitPanelResize,\n    headerHeight,\n    isSplitPanelForcedPosition,\n    isSplitPanelOpen,\n    setSplitPanelReportedSize,\n    setSplitPanelReportedHeaderHeight,\n    setSplitPanelToggle,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelSize,\n  } = useAppLayoutInternals();\n\n  const props: SplitPanelProviderProps = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    maxWidth: typeof document !== 'undefined' ? document.documentElement.clientWidth : Number.POSITIVE_INFINITY,\n    isForcedPosition: isSplitPanelForcedPosition,\n    isOpen: isSplitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    reportHeaderHeight: setSplitPanelReportedHeaderHeight,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    topOffset: 0,\n    setSplitPanelToggle,\n    refs: splitPanelRefs,\n  };\n\n  return <SplitPanelProvider {...props}>{children}</SplitPanelProvider>;\n}\n\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  const {\n    disableBodyScroll,\n    hasOpenDrawer,\n    isNavigationOpen,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelReportedSize,\n    splitPanelReportedHeaderHeight,\n  } = useAppLayoutInternals();\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          className={clsx(styles['split-panel-bottom'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles['has-open-drawer']]: hasOpenDrawer,\n            [styles['is-navigation-open']]: isNavigationOpen,\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelReportedSize]: `${splitPanelReportedSize}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`,\n          }}\n        >\n          <SplitPanel></SplitPanel>\n          {splitPanelPosition === 'bottom' && splitPanel}\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\n\n/**\n * This component has no opening animations because it causes lots of rerenders that makes the component lag. *\n */\n\nfunction SplitPanelSide() {\n  const {\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelPosition,\n    splitPanelMaxWidth,\n    splitPanelMinWidth,\n    splitPanelControlId,\n    isToolsOpen,\n    activeDrawerId,\n  } = useAppLayoutInternals();\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <section\n      id={splitPanelControlId}\n      aria-hidden={!isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false}\n      className={clsx(styles['split-panel-side'], styles[`position-${splitPanelPosition}`], {\n        [styles['is-split-panel-open']]: isSplitPanelOpen,\n        [styles['has-open-drawer']]: !!activeDrawerId || isToolsOpen,\n      })}\n      style={{\n        [customCssProps.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,\n        [customCssProps.splitPanelMinWidth]: `${splitPanelMinWidth}px`,\n      }}\n    >\n      {splitPanelPosition === 'side' && splitPanel}\n    </section>\n  );\n}\n\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(\n  isSplitPanelForcedPosition: boolean,\n  splitPanelPreferences: AppLayoutProps.SplitPanelPreferences | undefined\n) {\n  let splitPanelPosition: AppLayoutProps.SplitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && splitPanelPreferences?.position === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\n\nexport default SplitPanel;\n", "\n    import './styles.scoped.css';\n    export default {\n  \"background\": \"awsui_background_hyvsj_zz5e8_99\",\n  \"scrolling-background\": \"awsui_scrolling-background_hyvsj_zz5e8_102\",\n  \"sticky-background\": \"awsui_sticky-background_hyvsj_zz5e8_108\",\n  \"has-sticky-notifications\": \"awsui_has-sticky-notifications_hyvsj_zz5e8_116\",\n  \"breadcrumbs\": \"awsui_breadcrumbs_hyvsj_zz5e8_129\",\n  \"has-sticky-background\": \"awsui_has-sticky-background_hyvsj_zz5e8_139\",\n  \"drawers-container\": \"awsui_drawers-container_hyvsj_zz5e8_151\",\n  \"has-open-drawer\": \"awsui_has-open-drawer_hyvsj_zz5e8_162\",\n  \"disable-body-scroll\": \"awsui_disable-body-scroll_hyvsj_zz5e8_185\",\n  \"drawers-desktop-triggers-container\": \"awsui_drawers-desktop-triggers-container_hyvsj_zz5e8_190\",\n  \"has-multiple-triggers\": \"awsui_has-multiple-triggers_hyvsj_zz5e8_231\",\n  \"drawers-mobile-triggers-container\": \"awsui_drawers-mobile-triggers-container_hyvsj_zz5e8_241\",\n  \"drawers-trigger-content\": \"awsui_drawers-trigger-content_hyvsj_zz5e8_245\",\n  \"drawers-trigger-overflow\": \"awsui_drawers-trigger-overflow_hyvsj_zz5e8_259\",\n  \"drawers-trigger\": \"awsui_drawers-trigger_hyvsj_zz5e8_245\",\n  \"drawer\": \"awsui_drawer_hyvsj_zz5e8_151\",\n  \"drawer-content-container\": \"awsui_drawer-content-container_hyvsj_zz5e8_290\",\n  \"drawer-close-button\": \"awsui_drawer-close-button_hyvsj_zz5e8_299\",\n  \"drawer-content\": \"awsui_drawer-content_hyvsj_zz5e8_290\",\n  \"drawer-content-hidden\": \"awsui_drawer-content-hidden_hyvsj_zz5e8_307\",\n  \"drawer-slider\": \"awsui_drawer-slider_hyvsj_zz5e8_310\",\n  \"is-drawer-open\": \"awsui_is-drawer-open_hyvsj_zz5e8_317\",\n  \"content\": \"awsui_content_hyvsj_zz5e8_343\",\n  \"layout\": \"awsui_layout_hyvsj_zz5e8_364\",\n  \"has-max-content-width\": \"awsui_has-max-content-width_hyvsj_zz5e8_447\",\n  \"content-type-dashboard\": \"awsui_content-type-dashboard_hyvsj_zz5e8_462\",\n  \"content-type-table\": \"awsui_content-type-table_hyvsj_zz5e8_476\",\n  \"content-type-cards\": \"awsui_content-type-cards_hyvsj_zz5e8_476\",\n  \"is-overlap-disabled\": \"awsui_is-overlap-disabled_hyvsj_zz5e8_482\",\n  \"is-hide-mobile-toolbar\": \"awsui_is-hide-mobile-toolbar_hyvsj_zz5e8_485\",\n  \"has-content-gap-left\": \"awsui_has-content-gap-left_hyvsj_zz5e8_517\",\n  \"has-content-gap-right\": \"awsui_has-content-gap-right_hyvsj_zz5e8_520\",\n  \"content-first-child-notifications\": \"awsui_content-first-child-notifications_hyvsj_zz5e8_530\",\n  \"has-breadcrumbs\": \"awsui_has-breadcrumbs_hyvsj_zz5e8_533\",\n  \"content-first-child-header\": \"awsui_content-first-child-header_hyvsj_zz5e8_536\",\n  \"has-header\": \"awsui_has-header_hyvsj_zz5e8_536\",\n  \"content-first-child-main\": \"awsui_content-first-child-main_hyvsj_zz5e8_557\",\n  \"disable-content-paddings\": \"awsui_disable-content-paddings_hyvsj_zz5e8_557\",\n  \"has-split-panel\": \"awsui_has-split-panel_hyvsj_zz5e8_600\",\n  \"split-panel-position-bottom\": \"awsui_split-panel-position-bottom_hyvsj_zz5e8_600\",\n  \"block-body-scroll\": \"awsui_block-body-scroll_hyvsj_zz5e8_616\",\n  \"unfocusable\": \"awsui_unfocusable_hyvsj_zz5e8_621\",\n  \"container\": \"awsui_container_hyvsj_zz5e8_631\",\n  \"is-navigation-open\": \"awsui_is-navigation-open_hyvsj_zz5e8_657\",\n  \"is-tools-open\": \"awsui_is-tools-open_hyvsj_zz5e8_660\",\n  \"is-split-panel-open\": \"awsui_is-split-panel-open_hyvsj_zz5e8_660\",\n  \"split-panel-position-side\": \"awsui_split-panel-position-side_hyvsj_zz5e8_660\",\n  \"has-active-drawer\": \"awsui_has-active-drawer_hyvsj_zz5e8_660\",\n  \"mobile-toolbar\": \"awsui_mobile-toolbar_hyvsj_zz5e8_669\",\n  \"remove-high-contrast-header\": \"awsui_remove-high-contrast-header_hyvsj_zz5e8_686\",\n  \"mobile-toolbar-nav\": \"awsui_mobile-toolbar-nav_hyvsj_zz5e8_690\",\n  \"mobile-toolbar-breadcrumbs\": \"awsui_mobile-toolbar-breadcrumbs_hyvsj_zz5e8_694\",\n  \"mobile-toolbar-tools\": \"awsui_mobile-toolbar-tools_hyvsj_zz5e8_698\",\n  \"navigation-container\": \"awsui_navigation-container_hyvsj_zz5e8_707\",\n  \"show-navigation\": \"awsui_show-navigation_hyvsj_zz5e8_751\",\n  \"animating\": \"awsui_animating_hyvsj_zz5e8_774\",\n  \"showButtons\": \"awsui_showButtons_hyvsj_zz5e8_1\",\n  \"navigation\": \"awsui_navigation_hyvsj_zz5e8_707\",\n  \"openNavigation\": \"awsui_openNavigation_hyvsj_zz5e8_1\",\n  \"animated-content\": \"awsui_animated-content_hyvsj_zz5e8_836\",\n  \"hide-navigation\": \"awsui_hide-navigation_hyvsj_zz5e8_845\",\n  \"notifications\": \"awsui_notifications_hyvsj_zz5e8_855\",\n  \"sticky-notifications\": \"awsui_sticky-notifications_hyvsj_zz5e8_861\",\n  \"split-panel-bottom\": \"awsui_split-panel-bottom_hyvsj_zz5e8_878\",\n  \"position-bottom\": \"awsui_position-bottom_hyvsj_zz5e8_925\",\n  \"openSplitPanelBottom\": \"awsui_openSplitPanelBottom_hyvsj_zz5e8_1\",\n  \"split-panel-side\": \"awsui_split-panel-side_hyvsj_zz5e8_954\",\n  \"position-side\": \"awsui_position-side_hyvsj_zz5e8_967\",\n  \"tools-container\": \"awsui_tools-container_hyvsj_zz5e8_989\",\n  \"tools\": \"awsui_tools_hyvsj_zz5e8_989\",\n  \"openTools\": \"awsui_openTools_hyvsj_zz5e8_1\",\n  \"has-tools-form-persistence\": \"awsui_has-tools-form-persistence_hyvsj_zz5e8_1086\",\n  \"hide-tools\": \"awsui_hide-tools_hyvsj_zz5e8_1096\",\n  \"show-tools\": \"awsui_show-tools_hyvsj_zz5e8_1108\",\n  \"has-tools-form\": \"awsui_has-tools-form_hyvsj_zz5e8_1086\",\n  \"trigger-badge-wrapper\": \"awsui_trigger-badge-wrapper_hyvsj_zz5e8_1191\",\n  \"trigger\": \"awsui_trigger_hyvsj_zz5e8_1191\",\n  \"selected\": \"awsui_selected_hyvsj_zz5e8_1265\",\n  \"badge\": \"awsui_badge_hyvsj_zz5e8_1285\",\n  \"trigger-wrapper\": \"awsui_trigger-wrapper_hyvsj_zz5e8_1289\",\n  \"dot\": \"awsui_dot_hyvsj_zz5e8_1300\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState, useEffect } from 'react';\n\nimport clsx from 'clsx';\n\nimport ResizeHandler from '../../split-panel/icons/resize-handler';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { usePointerEvents } from './use-pointer-events';\nimport { useKeyboardEvents } from './use-keyboard-events';\nimport { AppLayoutProps } from '../interfaces';\n\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport styles from '../visual-refresh/styles.css.js';\nimport { FocusControlRefs } from './use-focus-control';\nimport { SizeControlProps } from './interfaces';\n\nexport interface DrawerResizeProps {\n  activeDrawer: AppLayoutProps.Drawer | undefined;\n  activeDrawerSize: number;\n  onActiveDrawerResize: (detail: { id: string; size: number }) => void;\n  drawersRefs: FocusControlRefs;\n  isToolsOpen: boolean;\n  drawersMaxWidth: number;\n}\n\nfunction useResize(\n  drawerRefObject: React.RefObject<HTMLDivElement>,\n  { activeDrawer, activeDrawerSize, onActiveDrawerResize, drawersRefs, isToolsOpen, drawersMaxWidth }: DrawerResizeProps\n) {\n  const toolsWidth = 290;\n  const MIN_WIDTH = Math.min(activeDrawer?.defaultSize ?? Number.POSITIVE_INFINITY, toolsWidth);\n  const [relativeSize, setRelativeSize] = useState(0);\n\n  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;\n\n  useEffect(() => {\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => {\n      const maxSize = drawersMaxWidth;\n      setRelativeSize(((drawerSize - MIN_WIDTH) / (maxSize - MIN_WIDTH)) * 100);\n    });\n    return () => cancelAnimationFrame(handle);\n  }, [drawerSize, drawersMaxWidth, MIN_WIDTH]);\n\n  const setSidePanelWidth = (width: number) => {\n    const maxWidth = drawersMaxWidth;\n    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);\n    const id = activeDrawer?.id;\n\n    if (id && maxWidth >= MIN_WIDTH) {\n      onActiveDrawerResize({ size, id });\n    }\n  };\n\n  const sizeControlProps: SizeControlProps = {\n    position: 'side',\n    panelRef: drawerRefObject,\n    handleRef: drawersRefs.slider,\n    onResize: setSidePanelWidth,\n    hasTransitions: true,\n  };\n\n  const onSliderPointerDown = usePointerEvents(sizeControlProps);\n  const onKeyDown = useKeyboardEvents(sizeControlProps);\n\n  const resizeHandle = (\n    <div\n      ref={drawersRefs.slider}\n      role=\"slider\"\n      tabIndex={0}\n      aria-label={activeDrawer?.ariaLabels?.resizeHandle}\n      aria-valuemax={100}\n      aria-valuemin={0}\n      aria-valuenow={relativeSize}\n      className={clsx(splitPanelStyles.slider, splitPanelStyles[`slider-side`], testutilStyles['drawers-slider'])}\n      onKeyDown={onKeyDown}\n      onPointerDown={onSliderPointerDown}\n    >\n      <ResizeHandler className={clsx(splitPanelStyles['slider-icon'], splitPanelStyles[`slider-icon-side`])} />\n    </div>\n  );\n\n  return { resizeHandle: <div className={styles['drawer-slider']}>{resizeHandle}</div>, drawerSize };\n}\n\nexport default useResize;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useState } from 'react';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * The overlap height has a default set in CSS but can also be dynamically overridden\n * for content types (such as Table and Wizard) that have variable size content in the overlap.\n * If a child component utilizes a sticky header the hasStickyBackground property will determine\n * if the background remains in the same vertical position.\n */\nexport default function useBackgroundOverlap({\n  contentHeader,\n  disableContentHeaderOverlap,\n  layoutElement,\n}: {\n  contentHeader: React.ReactNode;\n  disableContentHeaderOverlap?: boolean;\n  layoutElement: React.Ref<HTMLElement>;\n}) {\n  const hasContentHeader = !!contentHeader;\n\n  const [hasBackgroundOverlap, setHasBackgroundOverlap] = useState(hasContentHeader);\n\n  const updateBackgroundOverlapHeight = useCallback(\n    (height: number) => {\n      const hasOverlap = hasContentHeader || height > 0;\n      setHasBackgroundOverlap(hasOverlap);\n\n      /**\n       * React 18 will trigger a paint before the state is correctly updated\n       * (see https://github.com/facebook/react/issues/24331).\n       * To work around this, we bypass React state updates and imperatively update the custom property on the DOM.\n       * An alternative would be to use `queueMicrotask` and `flushSync` in the ResizeObserver callback,\n       * but that would have some performance impact as it would delay the render.\n       */\n      // Layout component uses RefObject, we don't expect a RefCallback\n      const element = typeof layoutElement !== 'function' && layoutElement?.current;\n      if (!element) {\n        return;\n      }\n      if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {\n        element.style.removeProperty(customCssProps.overlapHeight);\n      } else {\n        element.style.setProperty(customCssProps.overlapHeight, `${height}px`);\n      }\n    },\n    [hasContentHeader, layoutElement, disableContentHeaderOverlap]\n  );\n\n  return {\n    hasBackgroundOverlap,\n    updateBackgroundOverlapHeight,\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getContentHeaderClassName } from '../../internal/utils/content-header-utils';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\n\nexport default function Background() {\n  const {\n    breadcrumbs,\n    hasBackgroundOverlap,\n    hasNotificationsContent,\n    hasStickyBackground,\n    isMobile,\n    stickyNotifications,\n  } = useAppLayoutInternals();\n\n  if (!hasNotificationsContent && (!breadcrumbs || isMobile) && !hasBackgroundOverlap) {\n    return null;\n  }\n\n  return (\n    <div className={clsx(styles.background, getContentHeaderClassName())}>\n      <div className={styles['scrolling-background']} />\n\n      {!isMobile && hasStickyBackground && (\n        <div\n          className={clsx(styles['sticky-background'], {\n            [styles['has-sticky-notifications']]: stickyNotifications,\n          })}\n        />\n      )}\n    </div>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getContentHeaderClassName } from '../../internal/utils/content-header-utils';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nexport default function Breadcrumbs() {\n  const { breadcrumbs, hasStickyBackground, isMobile } = useAppLayoutInternals();\n\n  if (isMobile || !breadcrumbs) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(\n        styles.breadcrumbs,\n        testutilStyles.breadcrumbs,\n        {\n          [styles['has-sticky-background']]: hasStickyBackground,\n        },\n        getContentHeaderClassName()\n      )}\n    >\n      {breadcrumbs}\n    </div>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { InternalButton } from '../../button/internal';\nimport SplitPanel from './split-panel';\nimport TriggerButton from './trigger-button';\nimport { useAppLayoutInternals } from './context';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport OverflowMenu from '../drawer/overflow-menu';\nimport { splitItems } from '../drawer/drawers-helpers';\nimport { TOOLS_DRAWER_ID } from '../utils/use-drawers';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\n\n/**\n * The Drawers root component is mounted in the AppLayout index file. It will only\n * render if the drawers are defined, and it will take over the mounting of and\n * rendering of the Tools and SplitPanel (side position) if they exist. If drawers\n * do not exist then the Tools and SplitPanel will be handled by the Tools component.\n */\nexport default function Drawers() {\n  const {\n    disableBodyScroll,\n    drawers,\n    drawersTriggerCount,\n    hasDrawerViewportOverlay,\n    hasOpenDrawer,\n    isNavigationOpen,\n    navigationHide,\n    isMobile,\n  } = useAppLayoutInternals();\n\n  const isUnfocusable = hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;\n\n  if (!drawers || drawersTriggerCount === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(styles['drawers-container'], {\n        [styles['disable-body-scroll']]: disableBodyScroll,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n        [styles.unfocusable]: isUnfocusable,\n      })}\n    >\n      <SplitPanel.Side />\n      <ActiveDrawer />\n      {!isMobile && <DesktopTriggers />}\n    </div>\n  );\n}\n\nfunction ActiveDrawer() {\n  const {\n    activeDrawerId,\n    ariaLabels,\n    drawers,\n    drawersRefs,\n    handleDrawersClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    navigationHide,\n    loseDrawersFocus,\n    resizeHandle,\n    drawerSize,\n    drawersMinWidth,\n    drawersMaxWidth,\n    drawerRef,\n  } = useAppLayoutInternals();\n\n  const activeDrawer = drawers?.find(item => item.id === activeDrawerId) ?? null;\n\n  const computedAriaLabels = {\n    closeButton: activeDrawerId ? activeDrawer?.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeDrawerId ? activeDrawer?.ariaLabels?.drawerName : ariaLabels?.tools,\n  };\n\n  const isHidden = !activeDrawerId;\n  const isUnfocusable = isHidden || (hasDrawerViewportOverlay && isNavigationOpen && !navigationHide);\n  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;\n  const toolsContent = drawers?.find(drawer => drawer.id === TOOLS_DRAWER_ID)?.content;\n\n  const size = getLimitedValue(drawersMinWidth, drawerSize, drawersMaxWidth);\n\n  return (\n    <aside\n      id={activeDrawerId ?? undefined}\n      aria-hidden={isHidden}\n      aria-label={computedAriaLabels.content}\n      className={clsx(styles.drawer, {\n        [styles['is-drawer-open']]: activeDrawerId,\n        [styles.unfocusable]: isUnfocusable,\n        [testutilStyles['active-drawer']]: activeDrawerId,\n        [testutilStyles.tools]: isToolsDrawer,\n      })}\n      style={{\n        ...(!isMobile && drawerSize && { [customCssProps.drawerSize]: `${size}px` }),\n      }}\n      ref={drawerRef}\n      onBlur={e => {\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          loseDrawersFocus();\n        }\n      }}\n    >\n      {!isMobile && activeDrawer?.resizable && resizeHandle}\n      <div className={styles['drawer-content-container']}>\n        <div className={clsx(styles['drawer-close-button'])}>\n          <InternalButton\n            ariaLabel={computedAriaLabels.closeButton}\n            className={clsx({\n              [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n              [testutilStyles['tools-close']]: isToolsDrawer,\n            })}\n            formAction=\"none\"\n            iconName={isMobile ? 'close' : 'angle-right'}\n            onClick={() => {\n              handleDrawersClick(activeDrawerId);\n              handleToolsClick(false);\n            }}\n            ref={drawersRefs.close}\n            variant=\"icon\"\n          />\n        </div>\n        {toolsContent && (\n          <div\n            className={clsx(\n              styles['drawer-content'],\n              activeDrawerId !== TOOLS_DRAWER_ID && styles['drawer-content-hidden']\n            )}\n          >\n            {toolsContent}\n          </div>\n        )}\n        {activeDrawerId !== TOOLS_DRAWER_ID && (\n          <div className={styles['drawer-content']}>{activeDrawerId && activeDrawer?.content}</div>\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The DesktopTriggers will render the trigger buttons for Tools, Drawers, and the\n * SplitPanel in non mobile viewports. Changes to the activeDrawerId need to be\n * tracked by the previousActiveDrawerId property in order to appropriately apply\n * the ref required to manage focus control.\n */\nfunction DesktopTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    drawersTriggerCount,\n    handleDrawersClick,\n    handleSplitPanelClick,\n    hasOpenDrawer,\n    isSplitPanelOpen,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    splitPanelReportedHeaderHeight,\n    splitPanelReportedSize,\n  } = useAppLayoutInternals();\n\n  const hasMultipleTriggers = drawersTriggerCount > 1;\n  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === 'side';\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n  const [containerHeight, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxHeight);\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const splitPanelHeight =\n    isSplitPanelOpen && splitPanelPosition === 'bottom' ? splitPanelReportedSize : splitPanelReportedHeaderHeight;\n\n  const getIndexOfOverflowItem = () => {\n    if (containerHeight) {\n      const ITEM_HEIGHT = 48;\n      const overflowSpot =\n        activeDrawerId && isSplitPanelOpen\n          ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5\n          : (containerHeight - splitPanelHeight) / 1.5;\n\n      const index = Math.floor(overflowSpot / ITEM_HEIGHT);\n\n      let splitPanelItem = 0;\n      if (hasSplitPanel && splitPanelToggle.displayed) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n\n    return 0;\n  };\n\n  const { visibleItems, overflowItems } = splitItems(drawers ?? undefined, getIndexOfOverflowItem(), activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      className={clsx(styles['drawers-desktop-triggers-container'], {\n        [styles['has-multiple-triggers']]: hasMultipleTriggers,\n        [styles['has-open-drawer']]: hasOpenDrawer,\n      })}\n      aria-label={drawersAriaLabel}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div\n        className={clsx(styles['drawers-trigger-content'], {\n          [styles['has-multiple-triggers']]: hasMultipleTriggers,\n          [styles['has-open-drawer']]: hasOpenDrawer,\n        })}\n        role=\"toolbar\"\n        aria-orientation=\"vertical\"\n      >\n        {visibleItems.map(item => {\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={item.id === activeDrawerId}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger.iconName}\n              iconSvg={item.trigger.iconSvg}\n              key={item.id}\n              onClick={() => handleDrawersClick(item.id)}\n              ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n              selected={item.id === activeDrawerId}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n            />\n          );\n        })}\n\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => (\n              <TriggerButton\n                ref={triggerRef}\n                ariaLabel={ariaLabel}\n                ariaExpanded={ariaExpanded}\n                badge={overflowMenuHasBadge}\n                className={clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testUtilsClass)}\n                iconName=\"ellipsis\"\n                onClick={onClick}\n              />\n            )}\n            onItemClick={({ detail }) => {\n              handleDrawersClick(detail.id);\n            }}\n          />\n        )}\n        {hasSplitPanel && splitPanelToggle.displayed && (\n          <TriggerButton\n            ariaLabel={splitPanelToggle.ariaLabel}\n            ariaControls={splitPanelControlId}\n            ariaExpanded={!!isSplitPanelOpen}\n            className={clsx(styles['drawers-trigger'], splitPanelStyles['open-button'])}\n            iconName=\"view-vertical\"\n            onClick={() => handleSplitPanelClick()}\n            selected={hasSplitPanel && isSplitPanelOpen}\n            ref={splitPanelRefs.toggle}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n\n/**\n * The MobileTriggers will be mounted inside of the AppBar component and\n * only rendered when Drawers are defined in mobile viewports. The same logic\n * will in the AppBar component will suppress the rendering of the legacy\n * trigger button for the Tools drawer.\n */\nexport function MobileTriggers() {\n  const {\n    activeDrawerId,\n    drawers,\n    drawersAriaLabel,\n    drawersOverflowAriaLabel,\n    drawersOverflowWithBadgeAriaLabel,\n    drawersRefs,\n    handleDrawersClick,\n    hasDrawerViewportOverlay,\n  } = useAppLayoutInternals();\n\n  const previousActiveDrawerId = useRef(activeDrawerId);\n\n  if (!drawers) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveDrawerId.current = activeDrawerId;\n  }\n\n  const { visibleItems, overflowItems } = splitItems(drawers, 2, activeDrawerId);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n\n  return (\n    <aside\n      aria-hidden={hasDrawerViewportOverlay}\n      className={clsx({\n        [styles.unfocusable]: hasDrawerViewportOverlay,\n      })}\n      aria-label={drawersAriaLabel}\n      role=\"region\"\n    >\n      <div className={clsx(styles['drawers-mobile-triggers-container'])} role=\"toolbar\" aria-orientation=\"horizontal\">\n        {visibleItems.map(item => (\n          <InternalButton\n            ariaExpanded={item.id === activeDrawerId}\n            ariaLabel={item.ariaLabels?.triggerButton}\n            className={clsx(\n              styles['drawers-trigger'],\n              testutilStyles['drawers-trigger'],\n              item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n            )}\n            disabled={hasDrawerViewportOverlay}\n            ref={item.id === previousActiveDrawerId.current ? drawersRefs.toggle : undefined}\n            formAction=\"none\"\n            iconName={item.trigger.iconName}\n            iconSvg={item.trigger.iconSvg}\n            badge={item.badge}\n            key={item.id}\n            onClick={() => handleDrawersClick(item.id)}\n            variant=\"icon\"\n            __nativeAttributes={{ 'aria-haspopup': true, 'data-testid': `awsui-app-layout-trigger-${item.id}` }}\n          />\n        ))}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems}\n            ariaLabel={overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel}\n            onItemClick={({ detail }) => handleDrawersClick(detail.id)}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport Icon from '../../icon/internal';\nimport styles from './styles.css.js';\nimport { ButtonProps } from '../../button/interfaces';\nimport { IconProps } from '../../icon/interfaces';\nimport { shouldRemoveHighContrastHeader } from '../../internal/utils/content-header-utils';\n\nexport interface TriggerButtonProps {\n  ariaLabel?: string;\n  className?: string;\n  iconName?: IconProps.Name;\n  iconSvg?: React.ReactNode;\n  ariaExpanded: boolean | undefined;\n  ariaControls?: string;\n  testId?: string;\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n  selected?: boolean;\n  badge?: boolean;\n}\n\nfunction TriggerButton(\n  {\n    ariaLabel,\n    className,\n    iconName,\n    iconSvg,\n    ariaExpanded,\n    ariaControls,\n    onClick,\n    testId,\n    badge,\n    selected = false,\n  }: TriggerButtonProps,\n  ref: React.Ref<ButtonProps.Ref>\n) {\n  return (\n    <div\n      className={clsx(\n        styles['trigger-wrapper'],\n        shouldRemoveHighContrastHeader() && styles['remove-high-contrast-header']\n      )}\n    >\n      <button\n        aria-expanded={ariaExpanded}\n        aria-controls={ariaControls}\n        aria-haspopup={true}\n        aria-label={ariaLabel}\n        className={clsx(\n          styles.trigger,\n          {\n            [styles.selected]: selected,\n            [styles.badge]: badge,\n          },\n          className\n        )}\n        onClick={onClick}\n        ref={ref as React.Ref<HTMLButtonElement>}\n        type=\"button\"\n        data-testid={testId}\n      >\n        <span className={clsx(badge && styles['trigger-badge-wrapper'])}>\n          <Icon name={iconName} svg={iconSvg} />\n        </span>\n      </button>\n      {badge && <div className={clsx(styles.dot)} />}\n    </div>\n  );\n}\n\nexport default React.forwardRef(TriggerButton);\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getContentHeaderClassName } from '../../internal/utils/content-header-utils';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\n\nexport default function Header() {\n  const { breadcrumbs, contentHeader, hasDrawerViewportOverlay, hasNotificationsContent } = useAppLayoutInternals();\n\n  if (!contentHeader) {\n    return null;\n  }\n\n  return (\n    <header\n      className={clsx(\n        styles.content,\n        {\n          [styles['has-breadcrumbs']]: breadcrumbs,\n          [styles['has-notifications-content']]: hasNotificationsContent,\n          [styles.unfocusable]: hasDrawerViewportOverlay,\n        },\n        getContentHeaderClassName()\n      )}\n    >\n      {contentHeader}\n    </header>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\n/**\n * The layoutElement ref will be used by the resize observers to calculate the offset from\n * the top and bottom of the viewport based on the header and footer elements. This is to\n * ensure the Layout component minimum height will fill 100% of the viewport less those\n * cumulative heights.\n */\nexport default function Layout({ children }: LayoutProps) {\n  const {\n    breadcrumbs,\n    contentHeader,\n    contentType,\n    disableBodyScroll,\n    disableContentPaddings,\n    drawersTriggerCount,\n    footerHeight,\n    hasNotificationsContent,\n    hasStickyBackground,\n    hasOpenDrawer,\n    headerHeight,\n    isBackgroundOverlapDisabled,\n    isMobile,\n    isNavigationOpen,\n    layoutElement,\n    layoutWidth,\n    mainOffsetLeft,\n    maxContentWidth,\n    minContentWidth,\n    navigationHide,\n    notificationsHeight,\n    __embeddedViewMode,\n    splitPanelPosition,\n    stickyNotifications,\n    splitPanelDisplayed,\n  } = useAppLayoutInternals();\n\n  // Determine the first content child so the gap will vertically align with the trigger buttons\n  const contentFirstChild = getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile);\n\n  // Content gaps on the left and right are used with the minmax function in the CSS grid column definition\n  const hasContentGapLeft = isNavigationOpen || navigationHide;\n  const hasContentGapRight = drawersTriggerCount === 0 || hasOpenDrawer;\n\n  return (\n    <main\n      className={clsx(\n        styles.layout,\n        styles[`content-first-child-${contentFirstChild}`],\n        styles[`content-type-${contentType}`],\n        styles[`split-panel-position-${splitPanelPosition ?? 'bottom'}`],\n        {\n          [styles['disable-body-scroll']]: disableBodyScroll,\n          [testutilStyles['disable-body-scroll-root']]: disableBodyScroll,\n          [styles['disable-content-paddings']]: disableContentPaddings,\n          [styles['has-breadcrumbs']]: breadcrumbs && !isMobile,\n          [styles['has-content-gap-left']]: hasContentGapLeft,\n          [styles['has-content-gap-right']]: hasContentGapRight,\n          [styles['has-header']]: contentHeader,\n          [styles['has-max-content-width']]: maxContentWidth && maxContentWidth > 0,\n          [styles['has-split-panel']]: splitPanelDisplayed,\n          [styles['has-sticky-background']]: hasStickyBackground,\n          [styles['has-sticky-notifications']]: stickyNotifications && hasNotificationsContent,\n          [styles['is-overlap-disabled']]: isBackgroundOverlapDisabled,\n          [styles['is-hide-mobile-toolbar']]: __embeddedViewMode,\n        },\n        testutilStyles.root\n      )}\n      ref={layoutElement}\n      style={{\n        [customCssProps.headerHeight]: `${headerHeight}px`,\n        [customCssProps.footerHeight]: `${footerHeight}px`,\n        [customCssProps.layoutWidth]: `${layoutWidth}px`,\n        [customCssProps.mainOffsetLeft]: `${mainOffsetLeft}px`,\n        ...(maxContentWidth && { [customCssProps.maxContentWidth]: `${maxContentWidth}px` }),\n        ...(minContentWidth && { [customCssProps.minContentWidth]: `${minContentWidth}px` }),\n        [customCssProps.notificationsHeight]: `${notificationsHeight}px`,\n      }}\n    >\n      {children}\n    </main>\n  );\n}\n\n/*\nThe Notifications, Breadcrumbs, Header, and Main are all rendered in the center\ncolumn of the grid layout. Any of these could be the first child to render in the\ncontent area if the previous siblings do not exist. The grid gap before the first\nchild will be different to ensure vertical alignment with the trigger buttons.\n*/\nfunction getContentFirstChild(\n  breadcrumbs: React.ReactNode,\n  contentHeader: React.ReactNode,\n  hasNotificationsContent: boolean,\n  isMobile: boolean\n) {\n  let contentFirstChild = 'main';\n\n  if (hasNotificationsContent) {\n    contentFirstChild = 'notifications';\n  } else if (breadcrumbs && !isMobile) {\n    contentFirstChild = 'breadcrumbs';\n  } else if (contentHeader) {\n    contentFirstChild = 'header';\n  }\n\n  return contentFirstChild;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useAppLayoutInternals } from './context';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nexport default function Main() {\n  const {\n    content,\n    disableContentPaddings,\n    footerHeight,\n    hasDrawerViewportOverlay,\n    isNavigationOpen,\n    isSplitPanelOpen,\n    isToolsOpen,\n    mainElement,\n    offsetBottom,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    activeDrawerId,\n  } = useAppLayoutInternals();\n\n  const splitPanelHeight = offsetBottom - footerHeight;\n\n  return (\n    <div\n      className={clsx(\n        styles.container,\n        styles[`split-panel-position-${splitPanelPosition ?? 'bottom'}`],\n        {\n          [styles['disable-content-paddings']]: disableContentPaddings,\n          [styles['has-split-panel']]: splitPanelDisplayed,\n          [styles['is-navigation-open']]: isNavigationOpen,\n          [styles['is-tools-open']]: isToolsOpen,\n          [styles['has-active-drawer']]: !!activeDrawerId,\n          [styles['is-split-panel-open']]: isSplitPanelOpen,\n          [styles.unfocusable]: hasDrawerViewportOverlay,\n        },\n        testutilStyles.content\n      )}\n      ref={mainElement}\n      style={{\n        [customCssProps.splitPanelHeight]: `${splitPanelHeight}px`,\n      }}\n    >\n      {content}\n    </div>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getContentHeaderClassName } from '../../internal/utils/content-header-utils';\nimport { InternalButton } from '../../button/internal';\nimport { MobileTriggers as DrawersMobileTriggers } from './drawers';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { shouldRemoveHighContrastHeader } from '../../internal/utils/content-header-utils';\n\nexport default function MobileToolbar() {\n  const {\n    ariaLabels,\n    breadcrumbs,\n    drawers,\n    handleNavigationClick,\n    handleToolsClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    __embeddedViewMode,\n    isToolsOpen,\n    navigationHide,\n    navigationRefs,\n    toolsHide,\n    toolsRefs,\n  } = useAppLayoutInternals();\n\n  if (\n    !isMobile ||\n    __embeddedViewMode ||\n    (navigationHide && !breadcrumbs && toolsHide && (!drawers || drawers.length === 0))\n  ) {\n    return null;\n  }\n\n  return (\n    <section\n      className={clsx(\n        styles['mobile-toolbar'],\n        [testutilStyles['mobile-bar']],\n        {\n          [styles['has-breadcrumbs']]: breadcrumbs,\n          [styles.unfocusable]: hasDrawerViewportOverlay,\n        },\n        testutilStyles['mobile-bar'],\n        getContentHeaderClassName(),\n        shouldRemoveHighContrastHeader() && styles['remove-high-contrast-header']\n      )}\n    >\n      {!navigationHide && (\n        <nav\n          aria-hidden={isNavigationOpen}\n          className={clsx(styles['mobile-toolbar-nav'], { [testutilStyles['drawer-closed']]: !isNavigationOpen })}\n        >\n          <InternalButton\n            ariaLabel={ariaLabels?.navigationToggle ?? undefined}\n            ariaExpanded={isNavigationOpen ? undefined : false}\n            iconName=\"menu\"\n            formAction=\"none\"\n            onClick={() => handleNavigationClick(true)}\n            variant=\"icon\"\n            className={testutilStyles['navigation-toggle']}\n            ref={navigationRefs.toggle}\n            disabled={hasDrawerViewportOverlay}\n            __nativeAttributes={{ 'aria-haspopup': isNavigationOpen ? undefined : true }}\n          />\n        </nav>\n      )}\n\n      {breadcrumbs && (\n        <div className={clsx(styles['mobile-toolbar-breadcrumbs'], testutilStyles.breadcrumbs)}>{breadcrumbs}</div>\n      )}\n\n      {drawers ? (\n        <DrawersMobileTriggers />\n      ) : (\n        !toolsHide && (\n          <aside\n            aria-hidden={isToolsOpen}\n            aria-label={ariaLabels?.tools ?? undefined}\n            className={clsx(styles['mobile-toolbar-tools'], { [testutilStyles['drawer-closed']]: !isToolsOpen })}\n          >\n            <InternalButton\n              className={testutilStyles['tools-toggle']}\n              ariaExpanded={isToolsOpen}\n              disabled={hasDrawerViewportOverlay}\n              ariaLabel={ariaLabels?.toolsToggle ?? undefined}\n              iconName=\"status-info\"\n              formAction=\"none\"\n              onClick={() => handleToolsClick(true)}\n              variant=\"icon\"\n              ref={toolsRefs.toggle}\n              __nativeAttributes={{ 'aria-haspopup': true }}\n            />\n          </aside>\n        )\n      )}\n    </section>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useAppLayoutInternals } from './context';\nimport { InternalButton } from '../../button/internal';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { Transition } from '../../internal/components/transition';\nimport { findUpUntil } from '../../internal/utils/dom';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * The Navigation component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the show navigation form that contains the trigger for the drawer in large viewports;\n * the navigation, or drawer, that contains the hide navigation form and the children\n * passed through the API;\n */\nexport default function Navigation() {\n  const {\n    ariaLabels,\n    disableBodyScroll,\n    handleNavigationClick,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isNavigationOpen,\n    isToolsOpen,\n    navigation,\n    navigationHide,\n    navigationRefs,\n    navigationWidth,\n    toolsHide,\n  } = useAppLayoutInternals();\n\n  if (navigationHide) {\n    return null;\n  }\n\n  // Close the Navigation drawer on mobile when a user clicks a link inside.\n  const onNavigationClick = (event: React.MouseEvent) => {\n    const hasLink = findUpUntil(\n      event.target as HTMLElement,\n      node => node.tagName === 'A' && !!(node as HTMLAnchorElement).href\n    );\n    if (hasLink && isMobile) {\n      handleNavigationClick(false);\n    }\n  };\n\n  const isUnfocusable = hasDrawerViewportOverlay && (!isNavigationOpen || (isToolsOpen && !toolsHide));\n\n  return (\n    <Transition in={isNavigationOpen}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['navigation-container'], {\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles.unfocusable]: isUnfocusable,\n            [testutilStyles['drawer-closed']]: !isNavigationOpen,\n          })}\n          // Overwrite the default nav width (depends on breakpoints) only when the `navigationWidth` property is set.\n          style={{ ...(navigationWidth && { [customCssProps.navigationWidth]: `${navigationWidth}px` }) }}\n        >\n          {!isMobile && (\n            <nav\n              aria-hidden={isMobile || isNavigationOpen ? true : false}\n              aria-label={ariaLabels?.navigation ?? undefined}\n              className={clsx(styles['show-navigation'], {\n                [styles.animating]: state === 'exiting',\n                [styles['is-navigation-open']]: isNavigationOpen,\n              })}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n            >\n              <TriggerButton\n                ariaLabel={ariaLabels?.navigationToggle}\n                ariaExpanded={isNavigationOpen ? undefined : false}\n                iconName=\"menu\"\n                className={testutilStyles['navigation-toggle']}\n                onClick={() => handleNavigationClick(true)}\n                ref={navigationRefs.toggle}\n              />\n            </nav>\n          )}\n\n          <nav\n            aria-label={ariaLabels?.navigation ?? undefined}\n            className={clsx(\n              styles.navigation,\n              {\n                [styles.animating]: state === 'entering',\n                [styles['is-navigation-open']]: isNavigationOpen,\n              },\n              testutilStyles.navigation\n            )}\n            ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            aria-hidden={!isNavigationOpen}\n            onClick={event => {\n              onNavigationClick && onNavigationClick(event);\n            }}\n          >\n            <div className={clsx(styles['animated-content'])}>\n              <div className={clsx(styles['hide-navigation'])}>\n                <InternalButton\n                  ariaLabel={ariaLabels?.navigationClose ?? undefined}\n                  iconName={isMobile ? 'close' : 'angle-left'}\n                  onClick={() => handleNavigationClick(false)}\n                  variant=\"icon\"\n                  formAction=\"none\"\n                  className={testutilStyles['navigation-close']}\n                  ref={navigationRefs.close}\n                />\n              </div>\n              {navigation}\n            </div>\n          </nav>\n        </div>\n      )}\n    </Transition>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getContentHeaderClassName } from '../../internal/utils/content-header-utils';\nimport { useAppLayoutInternals } from './context';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nexport default function Notifications() {\n  const { ariaLabels, hasDrawerViewportOverlay, notifications, notificationsElement, stickyNotifications } =\n    useAppLayoutInternals();\n\n  if (!notifications) {\n    return null;\n  }\n\n  /**\n   * The notificationsElement ref is assigned to an inner div to prevent internal bottom margin\n   * from affecting the calculated height, which is used for sticky elements below.\n   */\n  return (\n    <div\n      role=\"region\"\n      aria-label={ariaLabels?.notifications ?? undefined}\n      className={clsx(\n        styles.notifications,\n        {\n          [styles['sticky-notifications']]: stickyNotifications,\n          [styles.unfocusable]: hasDrawerViewportOverlay,\n        },\n        testutilStyles.notifications,\n        getContentHeaderClassName()\n      )}\n    >\n      <div ref={notificationsElement}>{notifications}</div>\n    </div>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../button/internal';\nimport { useAppLayoutInternals } from './context';\nimport TriggerButton from './trigger-button';\nimport styles from './styles.css.js';\nimport splitPanelStyles from '../../split-panel/styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nimport { Transition } from '../../internal/components/transition';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\ninterface ToolsProps {\n  children: React.ReactNode;\n}\n\n/**\n * The Tools component consists of the following elements:\n * the container, or root element, that sits as a direct child to the Layout grid definition;\n * the split panel, which exists only if there is a split panel in side position;\n * the tools, or drawer, that contains the hide tools form and the children passed through the API;\n * the show tools form that contains the triggers for both the drawer and the\n * split panel in large viewports;\n */\nexport default function Tools({ children }: ToolsProps) {\n  const {\n    ariaLabels,\n    disableBodyScroll,\n    drawers,\n    handleSplitPanelClick,\n    handleToolsClick,\n    hasDefaultToolsWidth,\n    hasDrawerViewportOverlay,\n    isMobile,\n    isSplitPanelOpen,\n    isToolsOpen,\n    loseToolsFocus,\n    splitPanel,\n    splitPanelControlId,\n    splitPanelDisplayed,\n    splitPanelPosition,\n    splitPanelRefs,\n    splitPanelToggle,\n    tools,\n    toolsControlId,\n    toolsHide,\n    toolsRefs,\n    toolsWidth,\n  } = useAppLayoutInternals();\n\n  const hasSplitPanel = !!splitPanel && getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition);\n  const hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);\n  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;\n\n  /**\n   * If the drawers property is defined the SplitPanel will be mounted and rendered\n   * by the Drawers component.\n   */\n  if ((toolsHide && !hasSplitPanel) || drawers) {\n    return null;\n  }\n\n  return (\n    <Transition in={isToolsOpen ?? false}>\n      {(state, transitionEventsRef) => (\n        <div\n          className={clsx(styles['tools-container'], {\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles.unfocusable]: isUnfocusable,\n            [testutilStyles['drawer-closed']]: !isToolsOpen,\n          })}\n          style={{\n            [customCssProps.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,\n            // Overwrite the default tools width (depends on breakpoints) only when the `toolsWidth` property has been set.\n            [customCssProps.toolsWidth]: hasDefaultToolsWidth ? '' : `${toolsWidth}px`,\n          }}\n          onBlur={e => {\n            if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n              loseToolsFocus();\n            }\n          }}\n        >\n          {children}\n\n          {!toolsHide && (\n            <aside\n              id={toolsControlId}\n              aria-hidden={!isToolsOpen ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(\n                styles.tools,\n                {\n                  [styles.animating]: state === 'entering',\n                  [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n                  [styles['is-tools-open']]: isToolsOpen,\n                },\n                testutilStyles.tools\n              )}\n              ref={state !== 'exiting' ? transitionEventsRef : undefined}\n            >\n              <div className={clsx(styles['animated-content'])}>\n                <div className={clsx(styles['hide-tools'])}>\n                  <InternalButton\n                    ariaLabel={ariaLabels?.toolsClose ?? undefined}\n                    iconName={isMobile ? 'close' : 'angle-right'}\n                    onClick={() => handleToolsClick(false)}\n                    variant=\"icon\"\n                    formAction=\"none\"\n                    className={testutilStyles['tools-close']}\n                    ref={toolsRefs.close}\n                  />\n                </div>\n\n                {tools}\n              </div>\n            </aside>\n          )}\n\n          {!isMobile && (\n            <aside\n              aria-hidden={!hasToolsForm ? true : false}\n              aria-label={ariaLabels?.tools ?? undefined}\n              className={clsx(styles['show-tools'], {\n                [styles.animating]: state === 'exiting',\n                [styles['has-tools-form']]: hasToolsForm,\n                [styles['has-tools-form-persistence']]: hasToolsFormPersistence,\n              })}\n              ref={state === 'exiting' ? transitionEventsRef : undefined}\n              data-testid=\"side-split-panel-drawer\"\n            >\n              {!toolsHide && (\n                <TriggerButton\n                  ariaLabel={ariaLabels?.toolsToggle}\n                  ariaControls={toolsControlId}\n                  ariaExpanded={isToolsOpen}\n                  iconName=\"status-info\"\n                  onClick={() => handleToolsClick(!isToolsOpen)}\n                  selected={hasSplitPanel && isToolsOpen}\n                  className={testutilStyles['tools-toggle']}\n                  ref={toolsRefs.toggle}\n                />\n              )}\n\n              {hasSplitPanel && splitPanelToggle.displayed && (\n                <TriggerButton\n                  ariaLabel={splitPanelToggle.ariaLabel}\n                  ariaControls={splitPanelControlId}\n                  ariaExpanded={!!isSplitPanelOpen}\n                  iconName=\"view-vertical\"\n                  onClick={() => handleSplitPanelClick()}\n                  selected={hasSplitPanel && isSplitPanelOpen}\n                  className={splitPanelStyles['open-button']}\n                  ref={splitPanelRefs.toggle}\n                />\n              )}\n            </aside>\n          )}\n        </div>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This simple function returns the presence of the split panel as a child of the\n * Tools component. It must exist and be in side position.\n */\nfunction getSplitPanelStatus(splitPanelDisplayed: boolean, splitPanelPosition: string) {\n  return splitPanelDisplayed && splitPanelPosition === 'side' ? true : false;\n}\n\n/**\n * By default the Tools form is styled as display: none; This behavior should\n * be unchanged in mobile viewports where the Tools form is always suppressed.\n * In large viewports, however the Tools form and its corresponding buttons\n * should be present in the UI under the below circumstances.\n */\nfunction getToolsFormStatus(\n  hasSplitPanel: boolean,\n  isMobile: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsForm = false;\n\n  if (!isMobile) {\n    // Both the Split Panel and Tools button are needed\n    if (hasSplitPanel && !toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Split Panel button is needed\n    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {\n      hasToolsForm = true;\n    }\n\n    // The Tools button is needed\n    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {\n      hasToolsForm = true;\n    }\n  }\n\n  return hasToolsForm;\n}\n\n/**\n * Under two scenarios the Tools form that contains the triggers\n * for the Tools content and the Split Panel may be persistent\n * in the UI (as opposed to disappearing when one of the drawers\n * is open). This will also add a white background as opposed to the\n * default transparent background. The buttons will present and in a\n * selected / not selected state.\n */\nfunction getToolsFormPersistence(\n  hasSplitPanel: boolean,\n  isSplitPanelOpen?: boolean,\n  isToolsOpen?: boolean,\n  toolsHide?: boolean\n) {\n  let hasToolsFormPersistence = false;\n\n  // Both Tools and Split Panel exist and one or both is open\n  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {\n    hasToolsFormPersistence = true;\n  }\n\n  return hasToolsFormPersistence;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createWidgetizedAppLayout } from './widget';\n\nexport const AppLayoutInternal = createWidgetizedAppLayout();\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "import_react", "React", "import_react", "import_react", "styles_css_default", "React", "styles_css_default", "import_react", "React", "internal_default", "styles_css_default", "styles_css_default", "styles_css_default", "import_react", "import_react", "React", "React", "styles_css_default", "import_react", "import_react", "import_react", "import_react", "styles_css_default", "React", "styles_css_default", "import_react", "styles_css_default", "React", "styles_css_default", "import_react", "import_react", "styles_css_default", "import_react", "React", "styles_css_default", "React", "styles_css_default", "import_react", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "maxSize", "React", "import_react", "import_react", "React", "defaults", "_a", "styles_css_default", "import_react", "import_react", "import_react", "styles_css_default", "React", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "React", "_b", "_a", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "import_react", "React", "styles_css_default", "React", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "MobileToolbar", "React", "styles_css_default", "import_react", "React", "styles_css_default", "import_react", "Notifications", "React", "styles_css_default", "import_react", "React", "styles_css_default", "React", "MobileToolbar", "Notifications", "React", "React", "AppLayout", "React"]
}
